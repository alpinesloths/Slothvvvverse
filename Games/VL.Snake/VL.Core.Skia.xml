<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.Core.Skia</name>
    </assembly>
    <members>
        <member name="T:VL.Skia.CallerInfo">
            <summary>
            Information from downstream that gets handed over to upstream on render and on notify. Immutable
            </summary>
        </member>
        <member name="M:VL.Skia.CallerInfo.InRenderer(System.Single,System.Single,SkiaSharp.SKCanvas,SkiaSharp.GRContext)">
            <summary>
            Renderers call this to set up the caller info
            </summary>
        </member>
        <member name="M:VL.Skia.CallerInfo.WithRenderPaintHack(System.Func{System.Object,System.Object})">
            <summary>
            Use this to implement semantics-like features.
            With the delegate you can influence all rendering nodes upstream.
            </summary>
        </member>
        <member name="M:VL.Skia.CallerInfoExtensions.PushTransformation(VL.Skia.CallerInfo,SkiaSharp.SKMatrix)">
            <summary>
            Adjust the space for upstream - based on the downstream tranformation.
            Can be used by cameras or normal object to world space transformations.
            Adjust the camera further downstream to make it work as expected.
            </summary>
        </member>
        <member name="M:VL.Skia.CallerInfoExtensions.InViewport(VL.Skia.CallerInfo,SkiaSharp.SKRect,System.Func{VL.Skia.CallerInfo,SkiaSharp.SKMatrix})">
            <summary>
            Setup a new viewport.
            If we are already in a viewport this places the new viewport inside the downstream viewport.
            </summary>
        </member>
        <member name="M:VL.Skia.CallerInfoExtensions.GetWithinSpaceTransformation(SkiaSharp.SKRect,VL.Skia.Sizing,System.Single,System.Single,VL.Lib.Mathematics.RectangleAnchor)">
            <summary>
            Applies the space by resetting the Transformation.
            Further upstream you may use cameras and other transformations and thus invent your own space.
            </summary>
        </member>
        <member name="F:VL.Skia.CommonSpace.Normalized">
            <summary>
            Height goes from -1 Top to 1 Bottom. The origin is located in the center.
            </summary>
        </member>
        <member name="F:VL.Skia.CommonSpace.DIP">
            <summary>
            Works with device independant pixels. One unit equals 100 actual DIP. The origin is located in the center.
            </summary>
        </member>
        <member name="F:VL.Skia.CommonSpace.DIPTopLeft">
            <summary>
            Works with device independant pixels. One unit equals 100 actual DIP. The origin is located at the top left.
            </summary>
        </member>
        <member name="F:VL.Skia.CommonSpace.PixelTopLeft">
            <summary>
            Works with pixels. One unit equals 100 actual pixels. The origin is located at the top left.
            </summary>
        </member>
        <member name="T:VL.Skia.Sizing">
            <summary>
            Allows to adjust the units of the coordinate space 
            </summary>
        </member>
        <member name="F:VL.Skia.Sizing.Pixels">
            <summary>
            Pixel space. One unit equals 100 acutal pixels.  
            </summary>
        </member>
        <member name="F:VL.Skia.Sizing.DIP">
            <summary>
            Device Independant Pixels are like pixels, but respect the scaling factor of the display. One unit equals 100 actual DIP.
            </summary>
        </member>
        <member name="F:VL.Skia.Sizing.ManualSize">
            <summary>
            Adjust with and height manually. 
            Setting either width or height to 0 results in computing width depending on height or vice versa, 
            while respecting the aspect ratio of the renderer or viewport.
            </summary>
        </member>
        <member name="T:VL.Skia.ILayer">
            <summary>
            Scene graph nodes may 
            * render themselves into the layer
            * react on or modify notifications from downstream 
            </summary>
        </member>
        <member name="M:VL.Skia.ILayer.Render(VL.Skia.CallerInfo)">
            <summary>
            Renders the layer. Called from downstream. 
            Scene graph elements should render themselves before calling render upstream.
            </summary>
        </member>
        <member name="M:VL.Skia.ILayer.Notify(VL.Lib.IO.Notifications.INotification,VL.Skia.CallerInfo)">
            <summary>
            Scene graph nodes typically notify upstream before considering to apply own logic.
            Typically only apply own logic if notification didn't get processed by upstream. 
            Return if notification got processed.
            </summary>
        </member>
        <member name="P:VL.Skia.ILayer.Bounds">
            <summary>
            The Bounds of the rendering
            </summary>
        </member>
        <member name="T:VL.Skia.IRendering">
            <summary>
            Allows to concentrate on the rendering of a single layer. 
            No need for calling anything upstream, no need to think about notifications.
            </summary>
        </member>
        <member name="M:VL.Skia.IRendering.Render(VL.Skia.CallerInfo)">
            <summary>
            Renders the layer. 
            </summary>
        </member>
        <member name="P:VL.Skia.IRendering.Bounds">
            <summary>
            The Bounds of the rendering
            </summary>
        </member>
        <member name="T:VL.Skia.IBehavior">
            <summary>
            Allows to concentrate on the behavior of a single layer. 
            No need for calling anything upstream, no need to think about rendering.
            </summary>
        </member>
        <member name="M:VL.Skia.IBehavior.Notify(VL.Lib.IO.Notifications.INotification,VL.Skia.CallerInfo)">
            <summary>
            If notification got processed return true.
            </summary>
        </member>
        <member name="M:VL.Skia.RenderContext.ForCurrentThread">
            <summary>
            Returns the render context for the current thread.
            </summary>
            <returns>The render context for the current thread.</returns>
        </member>
        <member name="P:VL.Skia.RenderStopwatch.RenderTime">
            <summary>
            The time between StartRender and EndRender in Î¼s.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.HRESULT">
            <remarks>
            <para>The **HRESULT** data type is the same as the [SCODE](scode.md) data type. An **HRESULT** value consists of the following fields: - A 1-bit code indicating severity, where zero represents success and 1 represents failure. - A 4-bit reserved value. - An 11-bit code indicating responsibility for the error or warning, also known as a facility code. - A 16-bit code describing the error or warning. Most MAPI interface methods and functions return **HRESULT** values to provide detailed cause formation. **HRESULT** values are also used widely in OLE interface methods. OLE provides several macros for converting between **HRESULT** values and **SCODE** values, another common data type for error handling. > [!NOTE] > In 64-bit MAPI, **HRESULT** is still a 32-bit value. For information about the OLE use of **HRESULT** values, see the  *OLE Programmer's Reference*. For more information about the use of these values in MAPI, see [Error Handling](error-handling-in-mapi.md) and any of the following interface methods: [IABLogon::GetLastError](iablogon-getlasterror.md) [IMAPISupport::GetLastError](imapisupport-getlasterror.md) [IMAPIControl::GetLastError](imapicontrol-getlasterror.md) [IMAPITable::GetLastError](imapitable-getlasterror.md) [IMAPIProp::GetLastError](imapiprop-getlasterror.md) [IMAPIViewAdviseSink::OnPrint](imapiviewadvisesink-onprint.md)</para>
            <para><see href="https://learn.microsoft.com/office/client-developer/outlook/mapi/hresult#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Foundation.HRESULT.ThrowOnFailure(System.IntPtr)">
            <inheritdoc cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
            <param name="errorInfo">
            A pointer to the IErrorInfo interface that provides more information about the
            error. You can specify <see cref="F:System.IntPtr.Zero"/> to use the current IErrorInfo interface, or
            <c>new IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception
            just from the error code.
            </param>
            <returns><see langword="this"/> <see cref="T:Windows.Win32.Foundation.HRESULT"/>, if it does not reflect an error.</returns>
            <seealso cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)"/>
        </member>
        <member name="T:Windows.Win32.Foundation.LUID">
            <summary>The LUID structure is an opaque structure that specifies an identifier that is guaranteed to be unique on the local machine. For more information, see the reference page for LUID in the Microsoft Windows SDK documentation.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/ntdef/ns-ntdef-luid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.PCSTR">
            <summary>
            A pointer to a null-terminated, constant, ANSI character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, decoding as UTF-8.
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCSTR.ToString"/>
        </member>
        <member name="P:Windows.Win32.Foundation.PSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCSTR.Length"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.RECT">
            <summary>The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.</summary>
            <remarks>The RECT structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure.</remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.left">
            <summary>Specifies the <i>x</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.top">
            <summary>Specifies the <i>y</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.right">
            <summary>Specifies the <i>x</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.bottom">
            <summary>Specifies the <i>y</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="P:Windows.Win32.__char_32.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_32.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            â  Important â : When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_32.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_32.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_32.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.__char_128.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_128.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            â  Important â : When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_128.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_128.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_128.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_128.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_128.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG">
            <summary>Identifies how to bind a resource to the pipeline. (D3D11_BIND_FLAG)</summary>
            <remarks>
            <para>In general, binding flags can be combined using a bitwise OR (except the constant-buffer flag); however, you should use a single flag to allow the device to optimize the resource usage. This enumeration is used by a: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_bind_flag#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_VERTEX_BUFFER">
            <summary>Bind a buffer as a vertex buffer to the input-assembler stage.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_INDEX_BUFFER">
            <summary>Bind a buffer as an index buffer to the input-assembler stage.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_CONSTANT_BUFFER">
            <summary>Bind a buffer as a constant buffer to a shader stage; this flag may NOT be combined with any other bind flag.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_SHADER_RESOURCE">
            <summary>
            <para>Bind a buffer or texture to a shader stage; this flag cannot be used with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_map">D3D11_MAP_WRITE_NO_OVERWRITE</a> flag. <div class="alert"><b>Note</b>Â Â The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, enables  mapping dynamic constant buffers and shader resource views (SRVs) of dynamic buffers with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_map">D3D11_MAP_WRITE_NO_OVERWRITE</a>.  The Direct3D 11 and earlier runtimes limited mapping to vertex or index buffers. To determine if a Direct3D device supports these features, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-checkfeaturesupport">ID3D11Device::CheckFeatureSupport</a> with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_feature">D3D11_FEATURE_D3D11_OPTIONS</a>. <b>CheckFeatureSupport</b> fills members of a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options">D3D11_FEATURE_DATA_D3D11_OPTIONS</a> structure with the device's features. The relevant members here are <b>MapNoOverwriteOnDynamicConstantBuffer</b> and <b>MapNoOverwriteOnDynamicBufferSRV</b>.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_bind_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_STREAM_OUTPUT">
            <summary>Bind an output buffer for the stream-output stage.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_RENDER_TARGET">
            <summary>Bind a texture as a render target for the output-merger stage.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_DEPTH_STENCIL">
            <summary>Bind a texture as a depth-stencil target for the output-merger stage.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_UNORDERED_ACCESS">
            <summary>Bind an <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">unordered access</a> resource.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_DECODER">
            <summary>
            <para>Set this flag to indicate that a  <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-textures-intro">2D texture</a> is used to receive output from the decoder API. The common way to create resources for a decoder output is by calling the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture2d">ID3D11Device::CreateTexture2D</a> method to create an array of 2D  textures. However, you cannot use texture arrays that are created with this flag in calls to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_bind_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG.D3D11_BIND_VIDEO_ENCODER">
            <summary>
            <para>Set this flag to indicate that a  <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-textures-intro">2D texture</a> is used to receive input from the video encoder API. The common way to create resources for a video encoder is by calling the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture2d">ID3D11Device::CreateTexture2D</a> method to create an array of 2D  textures. However, you cannot use texture arrays that are created with this flag in calls to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_bind_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND">
            <summary>Blend factors, which modulate values for the pixel shader and render target.</summary>
            <remarks>Blend operations are specified in a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">blend description</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_ZERO">
            <summary>The blend factor is (0, 0, 0, 0). No pre-blend operation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_ONE">
            <summary>The blend factor is (1, 1, 1, 1). No pre-blend operation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_SRC_COLOR">
            <summary>The blend factor is (Râ, Gâ, Bâ, Aâ), that is color data (RGB) from a pixel shader. No pre-blend operation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_INV_SRC_COLOR">
            <summary>The blend factor is (1 - Râ, 1 - Gâ, 1 - Bâ, 1 - Aâ), that is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_SRC_ALPHA">
            <summary>The blend factor is (Aâ, Aâ, Aâ, Aâ), that is alpha data (A) from a pixel shader. No pre-blend operation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_INV_SRC_ALPHA">
            <summary>The blend factor is ( 1 - Aâ, 1 - Aâ, 1 - Aâ, 1 - Aâ), that is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_DEST_ALPHA">
            <summary>The blend factor is (A<sub>d</sub> A<sub>d</sub> A<sub>d</sub> A<sub>d</sub>), that is alpha data from a render target. No pre-blend operation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_INV_DEST_ALPHA">
            <summary>The blend factor is (1 - A<sub>d</sub> 1 - A<sub>d</sub> 1 - A<sub>d</sub> 1 - A<sub>d</sub>), that is alpha data from a render target. The pre-blend operation inverts the data, generating 1 - A.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_DEST_COLOR">
            <summary>The blend factor is (R<sub>d</sub>, G<sub>d</sub>, B<sub>d</sub>, A<sub>d</sub>), that is color data from a render target. No pre-blend operation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_INV_DEST_COLOR">
            <summary>The blend factor is (1 - R<sub>d</sub>, 1 - G<sub>d</sub>, 1 - B<sub>d</sub>, 1 - A<sub>d</sub>), that is color data from a render target. The pre-blend operation inverts the data, generating 1 - RGB.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_SRC_ALPHA_SAT">
            <summary>
            <para>The blend factor is (f, f, f, 1); where f = min(Aâ, 1 - A<sub>d</sub>). The pre-blend operation clamps the data to 1 or less.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_blend#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_BLEND_FACTOR">
            <summary>The blend factor is the blend factor set with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate">ID3D11DeviceContext::OMSetBlendState</a>. No pre-blend operation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_INV_BLEND_FACTOR">
            <summary>The blend factor is the blend factor set with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate">ID3D11DeviceContext::OMSetBlendState</a>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_SRC1_COLOR">
            <summary>The blend factor is data sources both as color data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_INV_SRC1_COLOR">
            <summary>The blend factor is data sources both as color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This blend factor supports dual-source color blending.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_SRC1_ALPHA">
            <summary>The blend factor is data sources as alpha data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND.D3D11_BLEND_INV_SRC1_ALPHA">
            <summary>The blend factor is data sources as alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This blend factor supports dual-source color blending.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC">
            <summary>Describes the blend state that you use in a call to ID3D11Device::CreateBlendState to create a blend-state object.</summary>
            <remarks>
            <para>Here are the default values for blend state. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_blend_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC.AlphaToCoverageEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target. For more info about using alpha-to-coverage, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-blend-state">Alpha-To-Coverage</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC.IndependentBlendEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether to enable independent blending in simultaneous render targets.  Set to <b>TRUE</b> to enable independent blending. If set to <b>FALSE</b>, only the RenderTarget[0] members are used; RenderTarget[1..7] are ignored.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC.RenderTarget">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc">D3D11_RENDER_TARGET_BLEND_DESC</a>[8]</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc">D3D11_RENDER_TARGET_BLEND_DESC</a> structures that describe the blend states for render targets; these correspond to the eight render targets that can be bound to the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a> at one time.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP">
            <summary>RGB or alpha blending operation. (D3D11_BLEND_OP)</summary>
            <remarks>
            <para>The runtime implements RGB blending and alpha blending separately. Therefore, blend state requires separate blend operations for RGB data and alpha data. These blend operations are specified in a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">blend description</a>. The two sources âsource 1 and source 2â are shown in the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">blending block diagram</a>. Blend state is used by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a> to determine how to blend together two RGB pixel values and two alpha values. The two RGB pixel values and two alpha values are the RGB pixel value and alpha value that the pixel shader outputs and the RGB pixel value and alpha value already in the output render target. The <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">blend option</a> controls the data source that the blending stage uses to modulate values for the pixel shader, render target, or both. The <b>blend operation</b> controls how the blending stage mathematically combines these modulated values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_blend_op#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP.D3D11_BLEND_OP_ADD">
            <summary>Add source 1 and source 2.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP.D3D11_BLEND_OP_SUBTRACT">
            <summary>Subtract source 1 from source 2.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP.D3D11_BLEND_OP_REV_SUBTRACT">
            <summary>Subtract source 2 from source 1.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP.D3D11_BLEND_OP_MIN">
            <summary>Find the minimum of source 1 and source 2.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP.D3D11_BLEND_OP_MAX">
            <summary>Find the maximum of source 1 and source 2.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BOX">
            <summary>Defines a 3D box. (D3D11_BOX)</summary>
            <remarks>
            <para>The following diagram shows a 3D box, where the origin is the left, front, top corner. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_box#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BOX.left">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The x position of the left hand side of the box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_box#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BOX.top">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The y position of the top of the box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_box#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BOX.front">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The z position of the front of the box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_box#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BOX.right">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The x position of the right hand side of the box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_box#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BOX.bottom">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The y position of the bottom of the box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_box#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BOX.back">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The z position of the back of the box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_box#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFEREX_SRV">
            <summary>Describes the elements in a raw buffer resource to use in a shader-resource view.</summary>
            <remarks>This structure is used by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a> to create a raw view of a buffer.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFEREX_SRV.FirstElement">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first element to be accessed by the view.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_bufferex_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFEREX_SRV.NumElements">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of elements in the resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_bufferex_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFEREX_SRV.Flags">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bufferex_srv_flag">D3D11_BUFFEREX_SRV_FLAG</a>-typed value that identifies view options for the buffer. Currently, the only option is to identify a raw view of the buffer. For more info about raw viewing of buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-intro">Raw Views of Buffers</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_bufferex_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC">
            <summary>Describes a buffer resource. (D3D11_BUFFER_DESC)</summary>
            <remarks>
            <para>This structure is used by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createbuffer">ID3D11Device::CreateBuffer</a> to create buffer resources. In addition to this structure, you can also use the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-cd3d11_buffer_desc">CD3D11_BUFFER_DESC</a> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a buffer description. If the bind flag is <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_CONSTANT_BUFFER</a>, you must set the <b>ByteWidth</b> value in multiples of 16, and less than or equal to <b>D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC.ByteWidth">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Size of the buffer in bytes.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC.Usage">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a></b> Identify how the buffer is expected to be read from and written to. Frequency of update is a key factor. The most common value is typically D3D11_USAGE_DEFAULT; see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a> for all possible values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC.StructureByteStride">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer. For more info about structured buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">Structured Buffer</a>. The size value in <b>StructureByteStride</b> must match the size of the format that you use for views of the buffer. For example, if you use a shader resource view (SRV) to read a buffer in a pixel shader, the SRV format size must match the size value in <b>StructureByteStride</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_RTV">
            <summary>Specifies the elements in a buffer resource to use in a render-target view.</summary>
            <remarks>A render-target view is a member of a render-target-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>). Create a render-target view by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createrendertargetview">ID3D11Device::CreateRenderTargetView</a>.</remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_SRV">
            <summary>Specifies the elements in a buffer resource to use in a shader-resource view. (D3D11_BUFFER_SRV)</summary>
            <remarks>The <b>D3D11_BUFFER_SRV</b> structure is a member of the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a> structure, which represents a shader-resource view description. You can create a shader-resource view by calling the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> method.</remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_UAV">
            <summary>Describes the elements in a buffer to use in a unordered-access view. (D3D11_BUFFER_UAV)</summary>
            <remarks>This structure is used by a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_UAV.FirstElement">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The zero-based index of the first element to be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_UAV.NumElements">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of elements in the resource. For structured buffers, this is the number of structures in the buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_UAV.Flags">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> View options for the resource (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_buffer_uav_flag">D3D11_BUFFER_UAV_FLAG</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC">
            <summary>Describes an HLSL class instance.</summary>
            <remarks>
            <para>The D3D11_CLASS_INSTANCE_DESC structure is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11classinstance-getdesc">ID3D11ClassInstance::GetDesc</a> method. The members of this structure except <b>InstanceIndex</b> are valid (non default values) if they describe a class instance acquired using  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance">ID3D11ClassLinkage::CreateClassInstance</a>.  The <b>InstanceIndex</b> member is only valid when the class instance is aquired using <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11classlinkage-getclassinstance">ID3D11ClassLinkage::GetClassInstance</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.InstanceId">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The instance ID of an HLSL class; the default value is 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.InstanceIndex">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The instance index of an HLSL class; the default value is 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.TypeId">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The type ID of an HLSL class; the default value is 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.ConstantBuffer">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Describes the constant buffer associated with an HLSL class; the default value is 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.BaseConstantBufferOffset">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The base constant buffer offset associated with an HLSL class; the default value is 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.BaseTexture">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The base texture associated with an HLSL class; the default value is 127.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.BaseSampler">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The base sampler associated with an HLSL class; the default value is 15.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC.Created">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> True if the class was created; the default value is false.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_class_instance_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC">
            <summary>Comparison options. (D3D11_COMPARISON_FUNC)</summary>
            <remarks>A comparison option determines whether how the runtime compares source (new) data against destination (existing) data before storing the new data. The comparison option is declared in a description before an object is created. The API allows you to set a comparison option for a depth-stencil buffer (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>), depth-stencil operations (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc">D3D11_DEPTH_STENCILOP_DESC</a>), or sampler state (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_NEVER">
            <summary>Never pass the comparison.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_LESS">
            <summary>If the source data is less than the destination data, the comparison passes.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_EQUAL">
            <summary>If the source data is equal to the destination data, the comparison passes.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_LESS_EQUAL">
            <summary>If the source data is less than or equal to the destination data, the comparison passes.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_GREATER">
            <summary>If the source data is greater than the destination data, the comparison passes.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_NOT_EQUAL">
            <summary>If the source data is not equal to the destination data, the comparison passes.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_GREATER_EQUAL">
            <summary>If the source data is greater than or equal to the destination data, the comparison passes.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC.D3D11_COMPARISON_ALWAYS">
            <summary>Always pass the comparison.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER">
            <summary>Options for performance counters.</summary>
            <remarks>
            <para>Independent hardware vendors may define their own set of performance counters for their devices, by giving the enumeration value a number that is greater than the value for D3D11_COUNTER_DEVICE_DEPENDENT_0. This enumeration is used by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_info">D3D11_COUNTER_INFO</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_counter#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER.D3D11_COUNTER_DEVICE_DEPENDENT_0">
            <summary>Define a performance counter that is dependent on the hardware device.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC">
            <summary>Describes a counter. (D3D11_COUNTER_DESC)</summary>
            <remarks>This structure is used by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11counter-getdesc">ID3D11Counter::GetDesc</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-checkcounter">ID3D11Device::CheckCounter</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createcounter">ID3D11Device::CreateCounter</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC.Counter">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter">D3D11_COUNTER</a></b> Type of counter (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter">D3D11_COUNTER</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_counter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC.MiscFlags">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Reserved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_counter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO">
            <summary>Information about the video card's performance counter capabilities. (D3D11_COUNTER_INFO)</summary>
            <remarks>This structure is returned by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-checkcounterinfo">ID3D11Device::CheckCounterInfo</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO.LastDeviceDependentCounter">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter">D3D11_COUNTER</a></b> Largest device-dependent counter ID that the device supports. If none are supported, this value will be 0. Otherwise it will be greater than or equal to D3D11_COUNTER_DEVICE_DEPENDENT_0. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter">D3D11_COUNTER</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_counter_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO.NumSimultaneousCounters">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of counters that can be simultaneously supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_counter_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO.NumDetectableParallelUnits">
            <summary>
            <para>Type: <b>UINT8</b> Number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4. Use NumDetectableParallelUnits to interpret the values of the VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, and OTHER_GPU_PROCESSING counters.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_counter_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE">
            <summary>Data type of a performance counter. (D3D11_COUNTER_TYPE)</summary>
            <remarks>These flags are an output parameter in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-checkcounter">ID3D11Device::CheckCounter</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE.D3D11_COUNTER_TYPE_FLOAT32">
            <summary>32-bit floating point.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE.D3D11_COUNTER_TYPE_UINT16">
            <summary>16-bit unsigned integer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE.D3D11_COUNTER_TYPE_UINT32">
            <summary>32-bit unsigned integer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE.D3D11_COUNTER_TYPE_UINT64">
            <summary>64-bit unsigned integer.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG">
            <summary>Specifies the types of CPU access allowed for a resource. (D3D11_CPU_ACCESS_FLAG)</summary>
            <remarks>
            <para>This enumeration is used in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a>. Applications may combine one or more of these flags with a bitwise OR. When possible, create resources with no CPU access flags, as this enables better resource optimization. The <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_FLAG</a> cannot be used when creating resources with <b>D3D11_CPU_ACCESS</b> flags.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_cpu_access_flag#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG.D3D11_CPU_ACCESS_WRITE">
            <summary>The resource is to be mappable so that the CPU can change its contents. Resources created with this flag cannot be set as outputs of the pipeline and must be created with either dynamic or staging usage (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>).</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG.D3D11_CPU_ACCESS_READ">
            <summary>The resource is to be mappable so that the CPU can read its contents. Resources created with this flag cannot be set as either inputs or outputs to the pipeline and must be created with staging usage (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>).</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG">
            <summary>Describes parameters that are used to create a device.</summary>
            <remarks>
            <para>Device creation flags are used by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdevice">D3D11CreateDevice</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdeviceandswapchain">D3D11CreateDeviceAndSwapChain</a>. An application might dynamically create (and destroy) threads to improve performance especially on a machine with multiple CPU cores. There may be cases, however, when an application needs to prevent extra threads from being created. This can happen when you want to simplify debugging, profile code or develop a tool for instance. For these cases, use <b>D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS</b> to request that the runtime and video driver not create any additional threads that might interfere with the application.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_SINGLETHREADED">
            <summary>
            <para>Use this flag if your application will only call methods of Direct3DÂ 11 interfaces from a single thread. By default, the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a> object is  <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-render-multi-thread-differences">thread-safe</a>. By using this flag, you can increase performance. However, if you use this flag and your application calls methods of Direct3DÂ 11 interfaces from multiple threads, undefined behavior might result.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_DEBUG">
            <summary>
            <para>Creates a device that supports the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a>. To use this flag, you must have D3D11*SDKLayers.dll installed; otherwise, device creation fails. To get D3D11_1SDKLayers.dll, install the SDK for WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_SWITCH_TO_REF">
            <summary>
            <para><div class="alert"><b>Note</b>Â Â This flag is not supported in Direct3DÂ 11.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS">
            <summary>
            <para>Prevents multiple threads from being created. When this flag is used with a <a href="https://docs.microsoft.com/windows/desktop/direct3darticles/directx-warp">Windows Advanced Rasterization Platform (WARP)</a> device, no additional threads will be created by WARP and all rasterization will occur on the calling thread. This flag is not recommended for general use. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_BGRA_SUPPORT">
            <summary>
            <para>Creates a device that supports BGRA formats (<a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_B8G8R8A8_UNORM</a> and <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</a>). All 10level9 and higher hardware with WDDM 1.1+ drivers support BGRA formats. <div class="alert"><b>Note</b>Â Â Required for Direct2D interoperability with Direct3D resources.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_DEBUGGABLE">
            <summary>
            <para>Causes the device and driver to keep information that you can use for shader debugging.  The exact impact from this flag will vary from driver to driver. To use this flag, you must have D3D11_1SDKLayers.dll installed; otherwise, device creation fails. The created device supports the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a>. To get D3D11_1SDKLayers.dll, install the SDK for WindowsÂ 8. If you use this flag and the current driver does not support shader debugging, device creation fails. Shader debugging requires a driver that is implemented to the WDDM for WindowsÂ 8 (WDDM 1.2). <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY">
            <summary>
            <para>Causes the Direct3D runtime to ignore registry settings that turn on the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a>. You can turn on the debug layer by using the <a href="https://docs.microsoft.com/previous-versions/bb219725(v=vs.85)">DirectX Control Panel</a> that was included as part of the DirectX SDK. We shipped the last version of the DirectX SDK in June 2010; you can download it from the <a href="https://www.microsoft.com/download/en/details.aspx?id=6812">Microsoft Download Center</a>. You can set this flag in your app, typically in release builds only, to prevent end users from using the <a href="https://docs.microsoft.com/previous-versions/bb219725(v=vs.85)">DirectX Control Panel</a> to monitor how the app uses Direct3D. <div class="alert"><b>Note</b>Â Â You can also set this flag in your app to prevent Direct3D debugging tools, such as Visual Studio UltimateÂ 2012, from hooking your app.</div> <div>Â </div> <b>WindowsÂ 8.1:Â Â </b>This flag doesn't prevent Visual StudioÂ 2013 and later running on WindowsÂ 8.1 and later from hooking your app; instead use <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_2/nf-d3d11_2-id3d11devicecontext2-isannotationenabled">ID3D11DeviceContext2::IsAnnotationEnabled</a>. This flag still prevents Visual StudioÂ 2013 and later running on WindowsÂ 8 and earlier from hooking your app. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT">
            <summary>
            <para>Use this flag if the device will produce GPU workloads that take more than two seconds to complete, and you want the operating system to allow them to successfully finish. If this flag is not set, the operating system performs <a href="https://docs.microsoft.com/windows-hardware/drivers/display/timeout-detection-and-recovery">timeout detection and recovery</a> when it detects a GPU packet that took more than two seconds to execute. If this flag is set, the operating system allows such a long running packet to execute without resetting the GPU. We recommend not to set this flag if your device needs to be highly responsive so that the operating system can detect and recover from GPU timeouts. We recommend to set this flag if your device needs to perform time consuming background tasks such as compute, image recognition, and video encoding to allow such tasks to successfully finish. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG.D3D11_CREATE_DEVICE_VIDEO_SUPPORT">
            <summary>
            <para>Forces the creation of the Direct3D device to fail if the display driver is not implemented to the WDDM for WindowsÂ 8 (WDDM 1.2). When the display driver is not implemented to WDDM 1.2, only a Direct3D device that is created with <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9.1, 9.2, or 9.3 supports video; therefore, if this flag is set, the runtime creates the Direct3D device only for feature level 9.1, 9.2, or 9.3. We recommend not to specify this flag for applications that want to favor Direct3D capability over video. If feature level 10 and higher is available, the runtime will use that feature level regardless of video support. If this flag is set, device creation on the Basic Render Device (BRD) will succeed regardless of the BRD's missing support for video decode. This is because the Media Foundation video stack operates in software mode on BRD. In this situation, if you force the video stack to create the Direct3D device twice (create the device once with this flag, next discover BRD, then again create the device without the flag), you actually degrade performance. If you attempt to create a Direct3D device with driver type <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE_NULL</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE_REFERENCE</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE_SOFTWARE</a>, device creation fails at any <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> because none of the associated drivers provide video capability. If you attempt to create a Direct3D device with driver type <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE_WARP</a>, device creation succeeds to allow software fallback for video. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE">
            <summary>Indicates triangles facing a particular direction are not drawn. (D3D11_CULL_MODE)</summary>
            <remarks>This enumeration is part of a rasterizer-state object description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE.D3D11_CULL_NONE">
            <summary>Always draw all triangles.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE.D3D11_CULL_FRONT">
            <summary>Do not draw triangles that are front-facing.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE.D3D11_CULL_BACK">
            <summary>Do not draw triangles that are back-facing.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC">
            <summary>Stencil operations that can be performed based on the results of stencil test.</summary>
            <remarks>
            <para>All stencil operations are specified as a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_stencil_op">D3D11_STENCIL_OP</a>. The stencil operation can be set differently based on the outcome of the stencil test (which is referred to as <b>StencilFunc</b> in the stencil test portion of depth-stencil testing. This structure is a member of a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">depth-stencil description</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC.StencilFailOp">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_stencil_op">D3D11_STENCIL_OP</a></b> The stencil operation to perform when stencil testing fails.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC.StencilDepthFailOp">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_stencil_op">D3D11_STENCIL_OP</a></b> The stencil operation to perform when stencil testing passes and depth testing fails.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC.StencilPassOp">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_stencil_op">D3D11_STENCIL_OP</a></b> The stencil operation to perform when stencil testing and depth testing both pass.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC.StencilFunc">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_comparison_func">D3D11_COMPARISON_FUNC</a></b> A function that compares stencil data against existing stencil data. The function options are listed in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_comparison_func">D3D11_COMPARISON_FUNC</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC">
            <summary>Describes depth-stencil state. (D3D11_DEPTH_STENCIL_DESC)</summary>
            <remarks>
            <para>Pass a pointer to <b>D3D11_DEPTH_STENCIL_DESC</b> to the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createdepthstencilstate">ID3D11Device::CreateDepthStencilState</a> method to create the depth-stencil state object. Depth-stencil state controls how depth-stencil testing is performed by the output-merger stage. The following table shows the default values of depth-stencil states. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.DepthEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Enable depth testing.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.DepthWriteMask">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_depth_write_mask">D3D11_DEPTH_WRITE_MASK</a></b> Identify a portion of the depth-stencil buffer that can be modified by depth data (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_depth_write_mask">D3D11_DEPTH_WRITE_MASK</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.DepthFunc">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_comparison_func">D3D11_COMPARISON_FUNC</a></b> A function that compares depth data against existing depth data. The function options are listed in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_comparison_func">D3D11_COMPARISON_FUNC</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.StencilEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Enable stencil testing.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.StencilReadMask">
            <summary>
            <para>Type: <b>UINT8</b> Identify a portion of the depth-stencil buffer for reading stencil data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.StencilWriteMask">
            <summary>
            <para>Type: <b>UINT8</b> Identify a portion of the depth-stencil buffer for writing stencil data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.FrontFace">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc">D3D11_DEPTH_STENCILOP_DESC</a></b> Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc">D3D11_DEPTH_STENCILOP_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC.BackFace">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc">D3D11_DEPTH_STENCILOP_DESC</a></b> Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencilop_desc">D3D11_DEPTH_STENCILOP_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC">
            <summary>Specifies the subresources of a texture that are accessible from a depth-stencil view.</summary>
            <remarks>
            <para>These are valid formats for a depth-stencil view: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> Resource data  format (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>). See remarks for allowable formats.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC.ViewDimension">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_dsv_dimension">D3D11_DSV_DIMENSION</a></b> Type of resource (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_dsv_dimension">D3D11_DSV_DIMENSION</a>). Specifies how a depth-stencil resource will be accessed; the value is stored in the union in this structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC.Flags">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value that describes whether the texture is read only.  Pass 0 to specify that it is not read only; otherwise, pass one of the members of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_dsv_flag">D3D11_DSV_FLAG</a> enumerated type.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_WRITE_MASK">
            <summary>Identify the portion of a depth-stencil buffer for writing depth data. (D3D11_DEPTH_WRITE_MASK)</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_depth_write_mask">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_WRITE_MASK.D3D11_DEPTH_WRITE_MASK_ZERO">
            <summary>Turn off writes to the depth-stencil buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_WRITE_MASK.D3D11_DEPTH_WRITE_MASK_ALL">
            <summary>Turn on writes to the depth-stencil buffer.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_DEVICE_CONTEXT_TYPE">
            <summary>Device context options.</summary>
            <remarks>This enumeration is used by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-gettype">ID3D11DeviceContext::GetType</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEVICE_CONTEXT_TYPE.D3D11_DEVICE_CONTEXT_IMMEDIATE">
            <summary>The device context is an immediate context.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DEVICE_CONTEXT_TYPE.D3D11_DEVICE_CONTEXT_DEFERRED">
            <summary>The device context is a deferred context.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION">
            <summary>Specifies how to access a resource used in a depth-stencil view. (D3D11_DSV_DIMENSION)</summary>
            <remarks>This enumeration is used in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a> to create a depth-stencil view.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION.D3D11_DSV_DIMENSION_UNKNOWN">
            <summary><i>D3D11_DSV_DIMENSION_UNKNOWN</i> is not a valid value for <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a> and is not used.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION.D3D11_DSV_DIMENSION_TEXTURE1D">
            <summary>The resource will be accessed as a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION.D3D11_DSV_DIMENSION_TEXTURE1DARRAY">
            <summary>The resource will be accessed as an array of 1D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION.D3D11_DSV_DIMENSION_TEXTURE2D">
            <summary>The resource will be accessed as a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION.D3D11_DSV_DIMENSION_TEXTURE2DARRAY">
            <summary>The resource will be accessed as an array of 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION.D3D11_DSV_DIMENSION_TEXTURE2DMS">
            <summary>The resource will be accessed as a 2D texture with multisampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION.D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY">
            <summary>The resource will be accessed as an array of 2D textures with multisampling.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE">
            <summary>Direct3D 11 feature options.</summary>
            <remarks>This enumeration is used when querying a driver about support for these features by calling <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkfeaturesupport">ID3D11Device::CheckFeatureSupport</a>. Each value in this enumeration has a corresponding data structure that is required to be passed to the <i>pFeatureSupportData</i> parameter of <b>ID3D11Device::CheckFeatureSupport</b>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_THREADING">
            <summary>The driver supports <a href="https://docs.microsoft.com/windows/win32/direct3d11/overviews-direct3d-11-render-multi-thread-intro">multithreading</a>. To see an example of testing a driver for multithread support, see <a href="https://docs.microsoft.com/windows/win32/direct3d11/overviews-direct3d-11-render-multi-thread-support">How To: Check for Driver Support</a>. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_threading">D3D11_FEATURE_DATA_THREADING</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_DOUBLES">
            <summary>Supports the use of the double-precision shaders in HLSL. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_doubles">D3D11_FEATURE_DATA_DOUBLES</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_FORMAT_SUPPORT">
            <summary>Supports the formats in <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_format_support">D3D11_FORMAT_SUPPORT</a>. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_format_support">D3D11_FEATURE_DATA_FORMAT_SUPPORT</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_FORMAT_SUPPORT2">
            <summary>Supports the formats in <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_format_support2">D3D11_FORMAT_SUPPORT2</a>. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_format_support2">D3D11_FEATURE_DATA_FORMAT_SUPPORT2</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS">
            <summary>Supports compute shaders and raw and structured buffers. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d10_x_hardware_options">D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D11_OPTIONS">
            <summary>
            <para>Supports Direct3D 11.1 feature options. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options">D3D11_FEATURE_DATA_D3D11_OPTIONS</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_ARCHITECTURE_INFO">
            <summary>
            <para>Supports specific adapter architecture. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_architecture_info">D3D11_FEATURE_DATA_ARCHITECTURE_INFO</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D9_OPTIONS">
            <summary>
            <para>Supports Direct3DÂ 9 feature options. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d9_options">D3D11_FEATURE_DATA_D3D9_OPTIONS</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT">
            <summary>
            <para>Supports minimum precision of shaders. For more info about HLSL minimum precision, see <a href="https://docs.microsoft.com/windows/win32/direct3d11/direct3d-11-1-features">using HLSL minimum precision</a>. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_shader_min_precision_support">D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D9_SHADOW_SUPPORT">
            <summary>
            <para>Supports Direct3DÂ 9 shadowing feature. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d9_shadow_support">D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D11_OPTIONS1">
            <summary>
            <para>Supports Direct3D 11.2 feature options. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.2.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT">
            <summary>
            <para>Supports Direct3D 11.2 instancing options. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d9_simple_instancing_support">D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.2.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_MARKER_SUPPORT">
            <summary>
            <para>Supports Direct3D 11.2 marker options. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_marker_support">D3D11_FEATURE_DATA_MARKER_SUPPORT</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.2.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D9_OPTIONS1">
            <summary>
            <para>Supports Direct3DÂ 9 feature options, which includes the Direct3DÂ 9 shadowing feature and instancing support. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d9_options1">D3D11_FEATURE_DATA_D3D9_OPTIONS1</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.2.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D11_OPTIONS2">
            <summary>
            <para>Supports Direct3D 11.3 conservative rasterization feature options. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options2">D3D11_FEATURE_DATA_D3D11_OPTIONS2</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.3.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D11_OPTIONS3">
            <summary>
            <para>Supports Direct3D 11.4 conservative rasterization feature options. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options3">D3D11_FEATURE_DATA_D3D11_OPTIONS3</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.4.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT">
            <summary>Supports GPU virtual addresses. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_gpu_virtual_address_support">D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D11_OPTIONS4">
            <summary>
            <para>Supports a single boolean for NV12 shared textures. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11_4/ns-d3d11_4-d3d11_feature_data_d3d11_options4">D3D11_FEATURE_DATA_D3D11_OPTIONS4</a>. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.4.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_SHADER_CACHE">
            <summary>Supports shader cache, described in <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_shader_cache">D3D11_FEATURE_DATA_SHADER_CACHE</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_D3D11_OPTIONS5">
            <summary>Supports a <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_shared_resource_tier">D3D11_SHARED_RESOURCE_TIER</a> to indicate the level of support for shared resources in the current graphics driver. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options5">D3D11_FEATURE_DATA_D3D11_OPTIONS5</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE.D3D11_FEATURE_DISPLAYABLE">
            <summary>Supports displayable surfaces, described in [D3D11_FEATURE_DATA_DISPLAYABLE](/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_displayable).</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE">
            <summary>Determines the fill mode to use when rendering triangles. (D3D11_FILL_MODE)</summary>
            <remarks>This enumeration is part of a rasterizer-state object description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE.D3D11_FILL_WIREFRAME">
            <summary>Draw lines connecting the vertices. Adjacent vertices are not drawn.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE.D3D11_FILL_SOLID">
            <summary>Fill the triangles formed by the vertices. Adjacent vertices are not drawn.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER">
            <summary>Filtering options during texture sampling. (D3D11_FILTER)</summary>
            <remarks>
            <para><div class="alert"><b>Note</b>Â Â If you use different filter types for min versus mag filter, undefined behavior occurs in certain cases where the choice between whether magnification or minification happens is ambiguous.  To prevent this undefined behavior, use filter modes that use similar filter operations for both min and mag (or use anisotropic filtering, which avoids the issue as well).</div> <div>Â </div> During texture sampling, one or more texels are read and combined (this is calling filtering) to produce a single value. Point sampling reads a single texel while linear sampling reads two texels (endpoints) and linearly interpolates a third value between the endpoints. HLSL texture-sampling functions also support comparison filtering during texture sampling. Comparison filtering compares each sampled texel against a comparison value. The boolean result is blended the same way that normal texture filtering is blended. You can use HLSL intrinsic texture-sampling functions that implement texture filtering only or companion functions that use texture filtering with comparison filtering. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_filter#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_MAG_MIP_POINT">
            <summary>Use point sampling for minification, magnification, and mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR">
            <summary>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT">
            <summary>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR">
            <summary>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT">
            <summary>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
            <summary>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT">
            <summary>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MIN_MAG_MIP_LINEAR">
            <summary>Use linear interpolation for minification, magnification, and mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_ANISOTROPIC">
            <summary>Use anisotropic interpolation for minification, magnification, and mip-level sampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT">
            <summary>Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR">
            <summary>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT">
            <summary>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR">
            <summary>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT">
            <summary>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
            <summary>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT">
            <summary>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR">
            <summary>Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_COMPARISON_ANISOTROPIC">
            <summary>Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_POINT and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_LINEAR and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MINIMUM_ANISOTROPIC">
            <summary>Fetch the same set of texels as D3D11_FILTER_ANISOTROPIC and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_POINT and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR">
            <summary>Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_LINEAR and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_FILTER.D3D11_FILTER_MAXIMUM_ANISOTROPIC">
            <summary>Fetch the same set of texels as D3D11_FILTER_ANISOTROPIC and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_CLASSIFICATION">
            <summary>Type of data contained in an input slot. (D3D11_INPUT_CLASSIFICATION)</summary>
            <remarks>Use these values to specify the type of data for a particular input element (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_input_element_desc">D3D11_INPUT_ELEMENT_DESC</a>) of an input-layout object.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_CLASSIFICATION.D3D11_INPUT_PER_VERTEX_DATA">
            <summary>Input data is per-vertex data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_CLASSIFICATION.D3D11_INPUT_PER_INSTANCE_DATA">
            <summary>Input data is per-instance data.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC">
            <summary>A description of a single element for the input-assembler stage. (D3D11_INPUT_ELEMENT_DESC)</summary>
            <remarks>
            <para>An input-layout object contains an array of structures, each structure defines one element being read from an input slot. Create an input-layout object by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createinputlayout">ID3D11Device::CreateInputLayout</a>. For an example, see the "Create the Input-Layout Object" subtopic under the  <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">Getting Started with the Input-Assembler Stage</a> topic.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC.SemanticName">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b> The HLSL semantic associated with this element in a shader input-signature. See <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/dx-graphics-hlsl-semantics">HLSL Semantics</a> for more info.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC.SemanticIndex">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> The data type of the element data. See <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC.InputSlot">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> An integer value that identifies the input-assembler (see input slot). Valid values are between 0 and 15, defined in D3D11.h.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC.AlignedByteOffset">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Optional. Offset (in bytes) from the start of the vertex. Use D3D11_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly after the previous one, including any packing if necessary.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC.InputSlotClass">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_input_classification">D3D11_INPUT_CLASSIFICATION</a></b> Identifies the input data class for a single input slot (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_input_classification">D3D11_INPUT_CLASSIFICATION</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC.InstanceDataStepRate">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data (the slot class is set to D3D11_INPUT_PER_VERTEX_DATA).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_input_element_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_MAP">
            <summary>Identifies a resource to be accessed for reading and writing by the CPU. Applications may combine one or more of these flags. (D3D11_MAP)</summary>
            <remarks>
            <para>This enumeration is used in <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-map">ID3D11DeviceContext::Map</a>. <h3><a id="NO_OVERWRITE_DETAILS"></a><a id="no_overwrite_details"></a>Meaning of D3D11_MAP_WRITE_NO_OVERWRITE</h3> <b>D3D11_MAP_WRITE_NO_OVERWRITE</b> signifies that the application promises not to write to data that the input assembler (IA) stage is using. In exchange, the GPU allows the application to write to other parts of the same buffer.  The application must ensure that it does not write over any data in use by the IA stage. For example, consider the buffer illustrated in the following diagram. If a <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-draw">Draw</a> call has been issued that uses vertices 4-6, then an application that calls <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-map">Map</a> on this buffer must ensure that it does not write to the vertices that the <b>Draw</b> call will access during rendering. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_map#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAP.D3D11_MAP_READ">
            <summary>
            <para>Resource is mapped for reading. The resource must have been created with read access (see <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_cpu_access_flag">D3D11_CPU_ACCESS_READ</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_map#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAP.D3D11_MAP_WRITE">
            <summary>
            <para>Resource is mapped for writing. The resource must have been created with write access (see <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_cpu_access_flag">D3D11_CPU_ACCESS_WRITE</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_map#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAP.D3D11_MAP_READ_WRITE">
            <summary>
            <para>Resource is mapped for reading and writing. The resource must have been created with read and write access (see <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_cpu_access_flag">D3D11_CPU_ACCESS_READ and D3D11_CPU_ACCESS_WRITE</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_map#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAP.D3D11_MAP_WRITE_DISCARD">
            <summary>
            <para>Resource is mapped for writing; the previous contents of the resource will be undefined. The resource must have been created with write access and dynamic usage (See <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_cpu_access_flag">D3D11_CPU_ACCESS_WRITE</a> and <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE_DYNAMIC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_map#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAP.D3D11_MAP_WRITE_NO_OVERWRITE">
            <summary>
            <para>Resource is mapped for writing; the existing contents of the resource cannot be overwritten (see Remarks). This flag is only valid on vertex and index buffers. The resource must have been created with write access (see <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_cpu_access_flag">D3D11_CPU_ACCESS_WRITE</a>). Cannot be used on a resource created with the <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_CONSTANT_BUFFER</a> flag. <div class="alert"><b>Note</b>Â Â The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, enables  mapping dynamic constant buffers and shader resource views (SRVs) of dynamic buffers with <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_map">D3D11_MAP_WRITE_NO_OVERWRITE</a>.  The Direct3D 11 and earlier runtimes limited mapping to vertex or index buffers. To determine if a Direct3D device supports these features, call <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkfeaturesupport">ID3D11Device::CheckFeatureSupport</a> with <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_feature">D3D11_FEATURE_D3D11_OPTIONS</a>. <b>CheckFeatureSupport</b> fills members of a <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options">D3D11_FEATURE_DATA_D3D11_OPTIONS</a> structure with the device's features. The relevant members here are <b>MapNoOverwriteOnDynamicConstantBuffer</b> and <b>MapNoOverwriteOnDynamicBufferSRV</b>.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_map#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE">
            <summary>Provides access to subresource data.</summary>
            <remarks>
            <para>This structure is used in a call to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-map">ID3D11DeviceContext::Map</a>. The values in these members tell you how much data you can view: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE.pData">
            <summary>
            <para>Type: <b>void*</b> Pointer to the data. When <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-map">ID3D11DeviceContext::Map</a> provides the pointer, the runtime ensures that the pointer has a specific alignment, depending on the following feature levels: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE.RowPitch">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The row pitch, or width, or physical size (in bytes) of the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE.DepthPitch">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The depth pitch, or width, or physical size (in bytes)of the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY">
            <summary>Query types. (D3D11_QUERY)</summary>
            <remarks>Create a query with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createquery">ID3D11Device::CreateQuery</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_EVENT">
            <summary>Determines whether or not the GPU is finished processing commands. When the GPU is finished processing commands <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return S_OK, and pData will point to a BOOL with a value of <b>TRUE</b>. When using this type of query, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> is disabled.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_OCCLUSION">
            <summary>Get the number of samples that passed the depth and stencil tests in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a UINT64. If a depth or stencil test is disabled, then each of those tests will be counted as a pass.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_TIMESTAMP">
            <summary>Get a timestamp value where <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a UINT64. This kind of query is only useful if two timestamp queries are done in the middle of a D3D11_QUERY_TIMESTAMP_DISJOINT query. The difference of two timestamps can be used to determine how many ticks have elapsed, and the D3D11_QUERY_TIMESTAMP_DISJOINT query will determine if that difference is a reliable value and also has a value that shows how to convert the number of ticks into seconds. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_timestamp_disjoint">D3D11_QUERY_DATA_TIMESTAMP_DISJOINT</a>. When using this type of query, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> is disabled.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_TIMESTAMP_DISJOINT">
            <summary>Determines whether or not a D3D11_QUERY_TIMESTAMP is returning reliable values, and also gives the frequency of the processor enabling you to convert the number of elapsed ticks into seconds. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_timestamp_disjoint">D3D11_QUERY_DATA_TIMESTAMP_DISJOINT</a>. This type of query should only be invoked once per frame or less.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_PIPELINE_STATISTICS">
            <summary>Get pipeline statistics, such as the number of pixel shader invocations in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_pipeline_statistics">D3D11_QUERY_DATA_PIPELINE_STATISTICS</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_OCCLUSION_PREDICATE">
            <summary>Similar to D3D11_QUERY_OCCLUSION, except <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a BOOL indicating whether or not any samples passed the depth and stencil tests - <b>TRUE</b> meaning at least one passed, <b>FALSE</b> meaning none passed.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_STATISTICS">
            <summary>Get streaming output statistics, such as the number of primitives streamed out in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_so_statistics">D3D11_QUERY_DATA_SO_STATISTICS</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE">
            <summary>Determines whether or not any of the streaming output buffers overflowed in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM0">
            <summary>Get streaming output statistics for stream 0, such as the number of primitives streamed out in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_so_statistics">D3D11_QUERY_DATA_SO_STATISTICS</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0">
            <summary>Determines whether or not the stream 0 output buffers overflowed in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM1">
            <summary>Get streaming output statistics for stream 1, such as the number of primitives streamed out in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_so_statistics">D3D11_QUERY_DATA_SO_STATISTICS</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1">
            <summary>Determines whether or not the stream 1 output buffers overflowed in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM2">
            <summary>Get streaming output statistics for stream 2, such as the number of primitives streamed out in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_so_statistics">D3D11_QUERY_DATA_SO_STATISTICS</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2">
            <summary>Determines whether or not the stream 2 output buffers overflowed in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM3">
            <summary>Get streaming output statistics for stream 3, such as the number of primitives streamed out in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> will return a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_data_so_statistics">D3D11_QUERY_DATA_SO_STATISTICS</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3">
            <summary>Determines whether or not the stream 3 output buffers overflowed in between <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC">
            <summary>Describes a query. (D3D11_QUERY_DESC)</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_query_desc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC.Query">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_query">D3D11_QUERY</a></b> Type of query (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_query">D3D11_QUERY</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_query_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC.MiscFlags">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Miscellaneous flags (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_query_misc_flag">D3D11_QUERY_MISC_FLAG</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_query_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC">
            <summary>Describes rasterizer state. (D3D11_RASTERIZER_DESC)</summary>
            <remarks>
            <para>Rasterizer state defines the behavior of the rasterizer stage. To create a rasterizer-state object, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createrasterizerstate">ID3D11Device::CreateRasterizerState</a>. To set rasterizer state, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-rssetstate">ID3D11DeviceContext::RSSetState</a>. If you do not specify some rasterizer state,  the Direct3D runtime uses the following default values for rasterizer state. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.FillMode">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_fill_mode">D3D11_FILL_MODE</a></b> Determines the fill mode to use when rendering (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_fill_mode">D3D11_FILL_MODE</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.CullMode">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_cull_mode">D3D11_CULL_MODE</a></b> Indicates triangles facing the specified direction are not drawn (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_cull_mode">D3D11_CULL_MODE</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.FrontCounterClockwise">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Determines if a triangle is front- or back-facing. If this parameter is <b>TRUE</b>, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is <b>FALSE</b>, the opposite is true.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.DepthBias">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b> Depth value added to a given pixel. For info about depth bias, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias">Depth Bias</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.DepthBiasClamp">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Maximum depth bias of a pixel. For info about depth bias, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias">Depth Bias</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.SlopeScaledDepthBias">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Scalar on a given pixel's slope. For info about depth bias, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias">Depth Bias</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.DepthClipEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Enable clipping based on distance. The hardware always performs x and y clipping of rasterized coordinates. When <b>DepthClipEnable</b> is set to the defaultâ<b>TRUE</b>, the hardware also clips the z value (that is, the hardware performs the last step of the following algorithm).</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.ScissorEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.MultisampleEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Set to <b>TRUE</b> to use the quadrilateral line anti-aliasing algorithm and to <b>FALSE</b> to use the alpha line anti-aliasing algorithm. For more info about this member, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC.AntialiasedLineEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether to enable line antialiasing; only applies if doing line drawing and <b>MultisampleEnable</b> is <b>FALSE</b>. For more info about this member, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_rasterizer_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC">
            <summary>Describes the blend state for a render target. (D3D11_RENDER_TARGET_BLEND_DESC)</summary>
            <remarks>
            <para>You specify an array of <b>D3D11_RENDER_TARGET_BLEND_DESC</b> structures in the <b>RenderTarget</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">D3D11_BLEND_DESC</a> structure to describe the blend states for render targets; you can bind up to eight render targets to the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a> at one time. For info about how blending is done, see the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a>. Here are the default values for blend state. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.BlendEnable">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Enable (or disable) blending.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.SrcBlend">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND</a></b> This <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">blend option</a> specifies the operation to perform on the RGB value that the pixel shader outputs. The <b>BlendOp</b> member defines how to combine the <b>SrcBlend</b> and <b>DestBlend</b> operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.DestBlend">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND</a></b> This <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">blend option</a> specifies the operation to perform on the current RGB value in the render target. The <b>BlendOp</b> member defines how to combine the <b>SrcBlend</b> and <b>DestBlend</b> operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.BlendOp">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend_op">D3D11_BLEND_OP</a></b> This <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend_op">blend operation</a> defines how to combine the <b>SrcBlend</b> and <b>DestBlend</b> operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.SrcBlendAlpha">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND</a></b> This <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">blend option</a> specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. The <b>BlendOpAlpha</b> member defines how to combine the <b>SrcBlendAlpha</b> and <b>DestBlendAlpha</b> operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.DestBlendAlpha">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND</a></b> This <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">blend option</a> specifies the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. The <b>BlendOpAlpha</b> member defines how to combine the <b>SrcBlendAlpha</b> and <b>DestBlendAlpha</b> operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.BlendOpAlpha">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend_op">D3D11_BLEND_OP</a></b> This <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend_op">blend operation</a> defines how to combine the <b>SrcBlendAlpha</b> and <b>DestBlendAlpha</b> operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC.RenderTargetWriteMask">
            <summary>
            <para>Type: <b>UINT8</b> A write mask.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_blend_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="P:Windows.Win32.Graphics.Direct3D11.__D3D11_RENDER_TARGET_BLEND_DESC_8.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.__D3D11_RENDER_TARGET_BLEND_DESC_8.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.__D3D11_RENDER_TARGET_BLEND_DESC_8.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC">
            <summary>Specifies the subresources from a resource that are accessible using a render-target view.</summary>
            <remarks>
            <para>A render-target-view description is passed into <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createrendertargetview">ID3D11Device::CreateRenderTargetView</a> to create a render target. A render-target-view cannot use the following formats: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_view_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> The data format (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC.ViewDimension">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_rtv_dimension">D3D11_RTV_DIMENSION</a></b> The resource type (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_rtv_dimension">D3D11_RTV_DIMENSION</a>), which specifies how the render-target resource will be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_render_target_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION">
            <summary>Identifies the type of resource being used. (D3D11_RESOURCE_DIMENSION)</summary>
            <remarks>This enumeration is used in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11resource-gettype">ID3D11Resource::GetType</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION.D3D11_RESOURCE_DIMENSION_UNKNOWN">
            <summary>Resource is of unknown type.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION.D3D11_RESOURCE_DIMENSION_BUFFER">
            <summary>Resource is a buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION.D3D11_RESOURCE_DIMENSION_TEXTURE1D">
            <summary>Resource is a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION.D3D11_RESOURCE_DIMENSION_TEXTURE2D">
            <summary>Resource is a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION.D3D11_RESOURCE_DIMENSION_TEXTURE3D">
            <summary>Resource is a 3D texture.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG">
            <summary>Identifies options for resources.</summary>
            <remarks>
            <para>This enumeration is used in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a>. These flags can be combined by bitwise OR. The <b>D3D11_RESOURCE_MISC_FLAG</b> cannot be used when creating resources with <b>D3D11_CPU_ACCESS</b> flags.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_GENERATE_MIPS">
            <summary>Enables MIP map generation by using <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-generatemips">ID3D11DeviceContext::GenerateMips</a> on a texture resource. The resource must be created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">bind flags</a> that specify that the resource is a render target and a shader resource.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_SHARED">
            <summary>
            <para>Enables resource data sharing between two or more Direct3D devices. The only resources that can be shared are 2D non-mipmapped textures.</para>
            <para><b>D3D11_RESOURCE_MISC_SHARED</b> and <b>D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX</b> are mutually exclusive.</para>
            <para><b>WARP</b> and <b>REF</b> devices do not support shared resources. If you try to create a resource with this flag on either a <b>WARP</b> or <b>REF</b> device, the create method will return an <b>E_OUTOFMEMORY</b> error code.</para>
            <para><div class="alert"><b>Note</b>Â Â Starting with WindowsÂ 8, <b>WARP</b> devices fully support shared resources. </div> <div>Â </div> <div class="alert"><b>Note</b>Â Â Starting with WindowsÂ 8, we recommend that you enable resource data sharing between two or more Direct3D devices by using a combination of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_SHARED_NTHANDLE</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX</a> flags instead. </div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_TEXTURECUBE">
            <summary>Sets a resource to be a cube texture created from a <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2darray">Texture2DArray</a> that contains 6 textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS">
            <summary>Enables instancing of GPU-generated content.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS">
            <summary>Enables a resource as a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">byte address buffer</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_BUFFER_STRUCTURED">
            <summary>Enables a resource as a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">structured buffer</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_RESOURCE_CLAMP">
            <summary>Enables a resource with MIP map clamping for use with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-setresourceminlod">ID3D11DeviceContext::SetResourceMinLOD</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX">
            <summary>
            <para>Enables the resource  to be synchronized by using the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgikeyedmutex-acquiresync">IDXGIKeyedMutex::AcquireSync</a>  and <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgikeyedmutex-releasesync">IDXGIKeyedMutex::ReleaseSync</a> APIs. The following Direct3DÂ 11 resource creation  APIs, that take <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_FLAG</a> parameters, have been extended to support the new flag. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_GDI_COMPATIBLE">
            <summary>
            <para>Enables a resource compatible with GDI. You must set the <b>D3D11_RESOURCE_MISC_GDI_COMPATIBLE</b> flag  on surfaces that you use with GDI. Setting the <b>D3D11_RESOURCE_MISC_GDI_COMPATIBLE</b> flag allows GDI rendering on the surface via <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgisurface1-getdc">IDXGISurface1::GetDC</a>.</para>
            <para>Consider the following programming tips for using D3D11_RESOURCE_MISC_GDI_COMPATIBLE when you create a texture or use that texture in a swap chain: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_SHARED_NTHANDLE">
            <summary>
            <para>Set this flag to enable the use of NT HANDLE values when you create a shared resource.  By enabling this flag, you deprecate the use of existing HANDLE values. The value specifies a new shared resource type that directs the runtime to use NT HANDLE values for the shared resource. The runtime then must confirm that the shared resource  works on all hardware at the specified <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a>.</para>
            <para>Without this flag set, the runtime does not strictly validate shared resource parameters (that is, formats, flags, usage, and so on). When the runtime does not validate shared resource parameters, behavior of much of the Direct3D   API might be undefined and might vary from driver to driver. <b>Direct3D 11 and earlier:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_RESTRICTED_CONTENT">
            <summary>
            <para>Set this flag to indicate that the resource might contain protected content; therefore, the operating system should  use the resource only when the driver and hardware support content protection.  If the driver and hardware do not support content protection and you try to create a resource with this flag, the resource creation fails. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE">
            <summary>
            <para>Set this flag to indicate that the operating system  restricts access to the shared surface. You can use this flag together with the D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER flag and only when you create a shared surface. The process that creates the shared resource can always open the shared resource. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER">
            <summary>
            <para>Set this flag to indicate that the driver  restricts access to the shared surface. You can use this flag in conjunction with the D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE flag and only when you create a shared surface. The process that creates the shared resource can always open the shared resource. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_GUARDED">
            <summary>
            <para>Set this flag to indicate that the resource is guarded. Such a resource is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/dcomp/nf-dcomp-idcompositionsurface-begindraw">IDCompositionSurface::BeginDraw</a> (DirectComposition) and <a href="https://docs.microsoft.com/windows/desktop/api/windows.ui.xaml.media.dxinterop/nf-windows-ui-xaml-media-dxinterop-isurfaceimagesourcenative-begindraw">ISurfaceImageSourceNative::BeginDraw</a> (Windows Runtime) APIs.  For these APIs, you provide a region of interest (ROI) on a surface to update. This surface isn't compatible with multiple render targets (MRT). A guarded resource automatically restricts all writes to the region that is related to one of the preceding APIs. Additionally, the resource enforces access to the ROI with these restrictions: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_TILE_POOL">
            <summary>
            <para>Set this flag to indicate that the resource is a tile pool. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.2.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_TILED">
            <summary>
            <para>Set this flag to indicate that the resource is a tiled resource. <b>Direct3D 11:Â Â </b>This value is not supported until Direct3D 11.2.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_HW_PROTECTED">
            <summary>
            <para>Set this flag to indicate that the resource should be created such that it will be protected by the hardware.  Resource creation will fail if hardware content protection is not supported. This flag has the following restrictions: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE">
            <summary>Enables the resource to work with the [displayable surfaces](/windows/win32/direct3d11/displayable-surfaces) feature. You must use **D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE** in combination with both **D3D11_RESOURCE_MISC_SHARED** and **D3D11_RESOURCE_MISC_SHARED_NTHANDLE**.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG.D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER">
            <summary>TBD</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION">
            <summary>These flags identify the type of resource that will be viewed as a render target.</summary>
            <remarks>This enumeration is used in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a> to create a render-target view.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_UNKNOWN">
            <summary>Do not use this value, as it will cause <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createrendertargetview">ID3D11Device::CreateRenderTargetView</a> to fail.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_BUFFER">
            <summary>The resource will be accessed as a buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_TEXTURE1D">
            <summary>The resource will be accessed as a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_TEXTURE1DARRAY">
            <summary>The resource will be accessed as an array of 1D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_TEXTURE2D">
            <summary>The resource will be accessed as a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_TEXTURE2DARRAY">
            <summary>The resource will be accessed as an array of 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_TEXTURE2DMS">
            <summary>The resource will be accessed as a 2D texture with multisampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY">
            <summary>The resource will be accessed as an array of 2D textures with multisampling.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION.D3D11_RTV_DIMENSION_TEXTURE3D">
            <summary>The resource will be accessed as a 3D texture.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC">
            <summary>Describes a sampler state. (D3D11_SAMPLER_DESC)</summary>
            <remarks>
            <para>These are the default values for sampler state. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.Filter">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_filter">D3D11_FILTER</a></b> Filtering method to use when sampling a texture (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_filter">D3D11_FILTER</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.AddressU">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_texture_address_mode">D3D11_TEXTURE_ADDRESS_MODE</a></b> Method to use for resolving a u texture coordinate that is outside the 0 to 1 range (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_texture_address_mode">D3D11_TEXTURE_ADDRESS_MODE</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.AddressV">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_texture_address_mode">D3D11_TEXTURE_ADDRESS_MODE</a></b> Method to use for resolving a v texture coordinate that is outside the 0 to 1 range.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.AddressW">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_texture_address_mode">D3D11_TEXTURE_ADDRESS_MODE</a></b> Method to use for resolving a w texture coordinate that is outside the 0 to 1 range.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.MipLODBias">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.MaxAnisotropy">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is specified in Filter. Valid values are between 1 and 16.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.ComparisonFunc">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_comparison_func">D3D11_COMPARISON_FUNC</a></b> A function that compares sampled data against existing sampled data. The function options are listed in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_comparison_func">D3D11_COMPARISON_FUNC</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.BorderColor">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>[4]</b> Border color to use if D3D11_TEXTURE_ADDRESS_BORDER is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.MinLOD">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC.MaxLOD">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D11_FLOAT32_MAX.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_sampler_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC">
            <summary>Describes a shader-resource view. (D3D11_SHADER_RESOURCE_VIEW_DESC)</summary>
            <remarks>
            <para>A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read. When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you cannot create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a DXGI_FORMAT_R32G32B32_TYPELESS resource can be viewed with one of these typed formats: DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32_UINT, and DXGI_FORMAT_R32G32B32_SINT, since these typed formats are compatible with the typeless resource. Create a shader-resource-view description by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. To view a shader-resource-view description, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11shaderresourceview-getdesc">ID3D11ShaderResourceView::GetDesc</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> specifying the viewing format. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC.ViewDimension">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476217(v=vs.85)">D3D11_SRV_DIMENSION</a></b> The resource type of the view. See <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476217(v=vs.85)">D3D11_SRV_DIMENSION</a>. You must set *ViewDimension* to the same resource type as that of the underlying resource. This parameter also determines which _SRV to use in the union below.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY">
            <summary>Description of a vertex element in a vertex buffer in an output slot. (D3D11_SO_DECLARATION_ENTRY)</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_so_declaration_entry">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY.Stream">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Zero-based, stream number.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_so_declaration_entry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY.SemanticName">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b> Type of output element; possible values include: <b>"POSITION"</b>, <b>"NORMAL"</b>, or <b>"TEXCOORD0"</b>. Note that if <i>SemanticName</i> is <b>NULL</b> then <i>ComponentCount</i> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_so_declaration_entry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY.SemanticIndex">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Output element's zero-based index. Should be used if, for example, you have more than one texture coordinate stored in each vertex.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_so_declaration_entry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY.StartComponent">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a></b> Which component of the entry to begin writing out to. Valid values are 0 to 3. For example, if you only wish to output to the y and z components of a position, then StartComponent should be 1 and ComponentCount should be 2.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_so_declaration_entry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY.ComponentCount">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a></b> The number of components of the entry to write out to. Valid values are 1 to 4. For example, if you only wish to output to the y and z components of a position, then StartComponent should be 1 and ComponentCount should be 2.  Note that if <i>SemanticName</i> is <b>NULL</b> then <i>ComponentCount</i> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_so_declaration_entry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY.OutputSlot">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a></b> The associated stream output buffer that is bound to the pipeline (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-sosettargets">ID3D11DeviceContext::SOSetTargets</a>). The valid range for <i>OutputSlot</i> is 0 to 3.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_so_declaration_entry#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP">
            <summary>The stencil operations that can be performed during depth-stencil testing. (D3D11_STENCIL_OP)</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_stencil_op">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_KEEP">
            <summary>Keep the existing stencil data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_ZERO">
            <summary>Set the stencil data to 0.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_REPLACE">
            <summary>Set the stencil data to the reference value set by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omsetdepthstencilstate">ID3D11DeviceContext::OMSetDepthStencilState</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_INCR_SAT">
            <summary>Increment the stencil value by 1, and clamp the result.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_DECR_SAT">
            <summary>Decrement the stencil value by 1, and clamp the result.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_INVERT">
            <summary>Invert the stencil data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_INCR">
            <summary>Increment the stencil value by 1, and wrap the result if necessary.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP.D3D11_STENCIL_OP_DECR">
            <summary>Decrement the stencil value by 1, and wrap the result if necessary.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA">
            <summary>Specifies data for initializing a subresource. (D3D11_SUBRESOURCE_DATA)</summary>
            <remarks>
            <para>This structure is used in calls to create buffers (<a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createbuffer">ID3D11Device::CreateBuffer</a>) and textures (<a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture1d">ID3D11Device::CreateTexture1D</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture2d">ID3D11Device::CreateTexture2D</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture3d">ID3D11Device::CreateTexture3D</a>). If the resource you create does not require a system-memory pitch or a system-memory-slice pitch, you can use those members to pass size information, which might help you when you debug a problem with creating a resource. A subresource is a single mipmap-level surface. You can pass an array of subresources to one of the preceding methods to create the resource. A subresource can be 1D, 2D, or 3D. How you set the members of <b>D3D11_SUBRESOURCE_DATA</b> depend on whether the subresource is 1D, 2D, or 3D.</para>
            <para>The x, y, and d values are 0-based indices and <b>BytesPerPixel</b> depends on the pixel format. For mipmapped 3D surfaces, the number of depth slices in each level is half the number of the previous level (minimum 1) and rounded down if dividing by two results in a non-whole number. <div class="alert"><b>Note</b>Â Â An application must not rely on <b>SysMemPitch</b> being exactly equal to the number of texels in a line times the size of a texel. In some cases, <b>SysMemPitch</b> will include padding to skip past additional data in a line.  This could be padding for alignment or the texture could be a subsection of a larger texture.  For example, the <b>D3D11_SUBRESOURCE_DATA</b> structure could represent a 32 by 32 subsection of a 128 by 128 texture. The value for <b>SysMemSlicePitch</b> will reflect any padding included in <b>SysMemPitch</b>.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_subresource_data#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA.pSysMem">
            <summary>
            <para>Type: <b>const void*</b> Pointer to the initialization data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_subresource_data#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA.SysMemPitch">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The distance (in bytes) from the beginning of one line of a texture to the next line. System-memory pitch is used only for 2D and 3D texture data as it is has no meaning for the other resource types. Specify the distance from the first pixel of one 2D slice of a 3D texture to the first pixel of the next 2D slice in that texture in the <b>SysMemSlicePitch</b> member.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_subresource_data#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA.SysMemSlicePitch">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The distance (in bytes) from the beginning of one depth level to the next. System-memory-slice pitch is only used for 3D texture data as it has no meaning for the other resource types.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_subresource_data#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_DSV">
            <summary>Specifies the subresources from an array of 1D textures to use in a depth-stencil view.</summary>
            <remarks>This structure is one member of a depth-stencil-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_DSV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first mipmap level to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_DSV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_DSV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_RTV">
            <summary>Specifies the subresources from an array of 1D textures to use in a render-target view.</summary>
            <remarks>This structure is one member of a render-target-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_RTV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the mipmap level to use mip slice.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_RTV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_RTV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_SRV">
            <summary>Specifies the subresources from an array of 1D textures to use in a shader-resource view.</summary>
            <remarks>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_SRV.MostDetailedMip">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture1D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates a view) -1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_SRV.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_SRV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_SRV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_UAV">
            <summary>Describes an array of unordered-access 1D texture resources. (D3D11_TEX1D_ARRAY_UAV)</summary>
            <remarks>This structure is used by a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_UAV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The mipmap slice index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_UAV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The zero-based index of the first array slice to be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_UAV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of slices in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_array_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_DSV">
            <summary>Specifies the subresource from a 1D texture that is accessible to a depth-stencil view. (D3D11_TEX1D_DSV)</summary>
            <remarks>This structure is one member of a depth-stencil-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_DSV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first mipmap level to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_RTV">
            <summary>Specifies the subresource from a 1D texture to use in a render-target view. (D3D11_TEX1D_RTV)</summary>
            <remarks>This structure is one member of a render-target-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_RTV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the mipmap level to use mip slice.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_SRV">
            <summary>Specifies the subresource from a 1D texture to use in a shader-resource view. (D3D11_TEX1D_SRV)</summary>
            <remarks>
            <para>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>). As an example, assuming <b>MostDetailedMip</b> = 6 and <b>MipLevels</b> = 2, the view will have access to 2 mipmap levels, 6 and 7, of the original texture for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates the view. In this situation, <b>MostDetailedMip</b> is greater than the <b>MipLevels</b> in the view. However, <b>MostDetailedMip</b> is not greater than the <b>MipLevels</b> in the original resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_srv#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_SRV.MostDetailedMip">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture1D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates a view) -1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_SRV.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels for the view  of the texture. See the remarks. Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_UAV">
            <summary>Describes a unordered-access 1D texture resource. (D3D11_TEX1D_UAV)</summary>
            <remarks>This structure is used by a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_UAV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The mipmap slice index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex1d_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_DSV">
            <summary>Specifies the subresources from an array of multisampled 2D textures for a depth-stencil view.</summary>
            <remarks>This structure is one member of a depth-stencil-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_DSV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_DSV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_RTV">
            <summary>Specifies the subresources from a an array of multisampled 2D textures to use in a render-target view.</summary>
            <remarks>This structure is one member of a render-target-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_RTV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_RTV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_SRV">
            <summary>Specifies the subresources from an array of multisampled 2D textures to use in a shader-resource view.</summary>
            <remarks>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_SRV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_SRV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_DSV">
            <summary>Specifies the subresource from a multisampled 2D texture that is accessible to a depth-stencil view. (D3D11_TEX2DMS_DSV)</summary>
            <remarks>Because a multisampled 2D texture contains a single subtexture, there is nothing to specify; this unused member is included so that this structure will compile in C.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_DSV.UnusedField_NothingToDefine">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Unused.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_RTV">
            <summary>Specifies the subresource from a multisampled 2D texture to use in a render-target view. (D3D11_TEX2DMS_RTV)</summary>
            <remarks>Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in D3D11_TEX2DMS_RTV. Consequently, <b>UnusedField_NothingToDefine</b> is included so that this structure will compile in C.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_RTV.UnusedField_NothingToDefine">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Integer of any value. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_SRV">
            <summary>Specifies the subresources from a multisampled 2D texture to use in a shader-resource view.</summary>
            <remarks>Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in D3D11_TEX2DMS_RTV. Consequently, <b>UnusedField_NothingToDefine</b> is included so that this structure will compile in C.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_SRV.UnusedField_NothingToDefine">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Integer of any value. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2dms_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_DSV">
            <summary>Specifies the subresources from an array 2D textures that are accessible to a depth-stencil view.</summary>
            <remarks>This structure is one member of a depth-stencil-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_DSV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first mipmap level to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_DSV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_DSV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV">
            <summary>Specifies the subresources from an array of 2D textures to use in a render-target view.</summary>
            <remarks>This structure is one member of a render-target-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the mipmap level to use mip slice.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures in the array to use in the render target view, starting from <b>FirstArraySlice</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV">
            <summary>Specifies the subresources from an array of 2D textures to use in a shader-resource view.</summary>
            <remarks>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV.MostDetailedMip">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture2D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates a view) -1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first texture to use in an array of textures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV">
            <summary>Describes an array of unordered-access 2D texture resources. (D3D11_TEX2D_ARRAY_UAV)</summary>
            <remarks>This structure is used by a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The mipmap slice index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV.FirstArraySlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The zero-based index of the first array slice to be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of slices in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_array_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_DSV">
            <summary>Specifies the subresource from a 2D texture that is accessible to a depth-stencil view. (D3D11_TEX2D_DSV)</summary>
            <remarks>This structure is one member of a depth-stencil-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_DSV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the first mipmap level to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_dsv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_RTV">
            <summary>Specifies the subresource from a 2D texture to use in a render-target view. (D3D11_TEX2D_RTV)</summary>
            <remarks>This structure is one member of a render-target-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_RTV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the mipmap level to use mip slice.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_SRV">
            <summary>Specifies the subresource from a 2D texture to use in a shader-resource view. (D3D11_TEX2D_SRV)</summary>
            <remarks>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_SRV.MostDetailedMip">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture2D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates a view) -1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_SRV.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_UAV">
            <summary>Describes a unordered-access 2D texture resource. (D3D11_TEX2D_UAV)</summary>
            <remarks>This structure is used by a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_UAV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The mipmap slice index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex2d_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_RTV">
            <summary>Specifies the subresources from a 3D texture to use in a render-target view.</summary>
            <remarks>This structure is one member of a render target view. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_RTV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the mipmap level to use mip slice.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_RTV.FirstWSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> First depth level to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_RTV.WSize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of depth levels to use in the render-target view, starting from <b>FirstWSlice</b>. A value of -1 indicates all of the slices along the w axis, starting from <b>FirstWSlice</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_rtv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_SRV">
            <summary>Specifies the subresources from a 3D texture to use in a shader-resource view.</summary>
            <remarks>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_SRV.MostDetailedMip">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture3D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates a view) -1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_SRV.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_UAV">
            <summary>Describes a unordered-access 3D texture resource. (D3D11_TEX3D_UAV)</summary>
            <remarks>This structure is used by a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_UAV.MipSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The mipmap slice index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_UAV.FirstWSlice">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The zero-based index of the first depth slice to be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_UAV.WSize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of depth slices.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_tex3d_uav#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_ARRAY_SRV">
            <summary>Specifies the subresources from an array of cube textures to use in a shader-resource view.</summary>
            <remarks>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_ARRAY_SRV.MostDetailedMip">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original TextureCube for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates a view) -1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texcube_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_ARRAY_SRV.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texcube_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_ARRAY_SRV.First2DArrayFace">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the first 2D texture to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texcube_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_ARRAY_SRV.NumCubes">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of cube textures in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texcube_array_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_SRV">
            <summary>Specifies the subresource from a cube texture to use in a shader-resource view. (D3D11_TEXCUBE_SRV)</summary>
            <remarks>This structure is one member of a shader-resource-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_SRV.MostDetailedMip">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original TextureCube for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a> creates a view) -1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texcube_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_SRV.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texcube_srv#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC">
            <summary>Describes a 1D texture. (D3D11_TEXTURE1D_DESC)</summary>
            <remarks>
            <para>This structure is used in a call to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture1d">ID3D11Device::CreateTexture1D</a>. In addition to this structure, you can also use the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/jj151694(v=vs.85)">CD3D11_TEXTURE1D_DESC</a> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description. The texture size range is determined by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3DÂ 10 hardware at feature level 10 (<a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL_10_0</a>) and call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdevice">D3D11CreateDevice</a> to create an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE1D_U_DIMENSION (8192) when you create your 1D texture.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture1d_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC.Width">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE1D_U_DIMENSION (16384). However, the range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture1d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels in the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture1d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures in the array. The  range is from 1 to D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION (2048). However, the range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture1d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> Texture format (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture1d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC.Usage">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a></b> Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE_DEFAULT; see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a> for all possible values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture1d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC">
            <summary>Describes a 2D texture. (D3D11_TEXTURE2D_DESC)</summary>
            <remarks>
            <para>This structure is used in a call to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture2d">ID3D11Device::CreateTexture2D</a>. In addition to this structure, you can also use the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/jj151700(v=vs.85)">CD3D11_TEXTURE2D_DESC</a> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description. The device places some size restrictions (must be multiples of a minimum size) for a subsampled, block compressed, or bit-format resource. The texture size range is determined by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3DÂ 10 hardware at feature level 10 (<a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL_10_0</a>) and call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdevice">D3D11CreateDevice</a> to create an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION (8192) when you create your 2D texture.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC.Width">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION (16384). For a texture cube-map, the  range is from 1 to D3D11_REQ_TEXTURECUBE_DIMENSION (16384). However, the range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC.Height">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Texture height (in texels). The  range is from 1 to D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION (16384). For a texture cube-map, the  range is from 1 to D3D11_REQ_TEXTURECUBE_DIMENSION (16384). However, the range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels in the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC.ArraySize">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of textures in the texture array. The  range is from 1 to D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION (2048). For a texture cube-map, this value is a multiple of 6 (that is, 6 times the value in the <b>NumCubes</b> member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texcube_array_srv">D3D11_TEXCUBE_ARRAY_SRV</a>), and the  range is from 6 to 2046. The range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> Texture format (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC.SampleDesc">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a></b> Structure that specifies multisampling parameters for the texture. See <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC.Usage">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a></b> Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE_DEFAULT; see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a> for all possible values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture2d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC">
            <summary>Describes a 3D texture. (D3D11_TEXTURE3D_DESC)</summary>
            <remarks>
            <para>This structure is used in a call to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createtexture3d">ID3D11Device::CreateTexture3D</a>. In addition to this structure, you can also use the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/jj151706(v=vs.85)">CD3D11_TEXTURE3D_DESC</a> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description. The device restricts the size of subsampled, block compressed, and bit format resources to be multiples of sizes specific to each format. The texture size range is determined by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3DÂ 10 hardware at feature level 10 (<a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL_10_0</a>) and call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdevice">D3D11CreateDevice</a> to create an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048) when you create your 3D texture.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture3d_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC.Width">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). However, the range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture3d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC.Height">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Texture height (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). However, the range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture3d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC.Depth">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Texture depth (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). However, the range is actually constrained by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> at which you create the rendering device. For more information about restrictions, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture3d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC.MipLevels">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The maximum number of mipmap levels in the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_tex1d_srv">D3D11_TEX1D_SRV</a>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture3d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> Texture format (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture3d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC.Usage">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a></b> Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE_DEFAULT; see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a> for all possible values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_texture3d_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE">
            <summary>Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture. (D3D11_TEXTURE_ADDRESS_MODE)</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_texture_address_mode">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_WRAP">
            <summary>Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_MIRROR">
            <summary>Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_CLAMP">
            <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_BORDER">
            <summary>Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a> or HLSL code.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE.D3D11_TEXTURE_ADDRESS_MIRROR_ONCE">
            <summary>Similar to D3D11_TEXTURE_ADDRESS_MIRROR and D3D11_TEXTURE_ADDRESS_CLAMP. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION">
            <summary>Unordered-access view options.</summary>
            <remarks>This enumeration is used by a unordered access-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>).</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION.D3D11_UAV_DIMENSION_UNKNOWN">
            <summary>The view type is unknown.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION.D3D11_UAV_DIMENSION_BUFFER">
            <summary>View the resource as a buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION.D3D11_UAV_DIMENSION_TEXTURE1D">
            <summary>View the resource as a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION.D3D11_UAV_DIMENSION_TEXTURE1DARRAY">
            <summary>View the resource as a 1D texture array.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION.D3D11_UAV_DIMENSION_TEXTURE2D">
            <summary>View the resource as a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION.D3D11_UAV_DIMENSION_TEXTURE2DARRAY">
            <summary>View the resource as a 2D texture array.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION.D3D11_UAV_DIMENSION_TEXTURE3D">
            <summary>View the resource as a 3D texture array.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC">
            <summary>Specifies the subresources from a resource that are accessible using an unordered-access view.</summary>
            <remarks>An unordered-access-view description is passed into <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createunorderedaccessview">ID3D11Device::CreateUnorderedAccessView</a> to create a view.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> The data format (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC.ViewDimension">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_uav_dimension">D3D11_UAV_DIMENSION</a></b> The resource type (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_uav_dimension">D3D11_UAV_DIMENSION</a>), which specifies how the resource will be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_USAGE">
            <summary>Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the graphics processing unit (GPU).</summary>
            <remarks>
            <para>An application identifies the way a resource is intended to be used (its usage) in a resource description. There are several structures for creating resources including: <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a>. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_usage#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_USAGE.D3D11_USAGE_DEFAULT">
            <summary>A resource that requires read and write access by the GPU. This is likely to be the most common usage choice.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_USAGE.D3D11_USAGE_IMMUTABLE">
            <summary>A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. This type of resource must be initialized when it is created, since it cannot be changed after creation.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_USAGE.D3D11_USAGE_DYNAMIC">
            <summary>
            <para>A resource that is accessible by both the GPU (read only) and the CPU (write only). A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame. To update a dynamic resource, use a <b>Map</b> method. For info about how to use dynamic resources, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/how-to--use-dynamic-resources">How to: Use dynamic resources</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_usage#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_USAGE.D3D11_USAGE_STAGING">
            <summary>A resource that supports data transfer (copy) from the GPU to the CPU.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT">
            <summary>Defines the dimensions of a viewport. (D3D11_VIEWPORT)</summary>
            <remarks>
            <para>In all cases, <b>Width</b> and <b>Height</b> must be &gt;= 0 and <b>TopLeftX</b> + <b>Width</b> and <b>TopLeftY</b> + <b>Height</b> must be &lt;= D3D11_VIEWPORT_BOUNDS_MAX. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_viewport#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT.TopLeftX">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> X position of the left hand side of the viewport. Ranges between D3D11_VIEWPORT_BOUNDS_MIN and D3D11_VIEWPORT_BOUNDS_MAX.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_viewport#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT.TopLeftY">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Y position of the top of the viewport. Ranges between D3D11_VIEWPORT_BOUNDS_MIN and D3D11_VIEWPORT_BOUNDS_MAX.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_viewport#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT.Width">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Width of the viewport.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_viewport#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT.Height">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Height of the viewport.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_viewport#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT.MinDepth">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Minimum depth of the viewport. Ranges between 0 and 1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_viewport#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT.MaxDepth">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Maximum depth of the viewport. Ranges between 0 and 1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/ns-d3d11-d3d11_viewport#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous.GetDataSize">
            <summary>Get the size of the data (in bytes) that is output when calling ID3D11DeviceContext::GetData.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Size of the data (in bytes) that is output when calling GetData.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11asynchronous-getdatasize">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11BlendState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC*)">
            <summary>Gets the description for blending state that you used to create the blend-state object. (ID3D11BlendState.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">D3D11_BLEND_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">D3D11_BLEND_DESC</a> structure that receives a description of the blend state.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11blendstate-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>You use the description for blending state in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createblendstate">ID3D11Device::CreateBlendState</a> method to create the blend-state object.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Buffer.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*)">
            <summary>Get the properties of a buffer resource. (ID3D11Buffer.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a>*</b> Pointer to a resource description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a>) filled in by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11buffer-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11buffer-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.GetClassLinkage(Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage@)">
            <summary>Gets the ID3D11ClassLinkage object associated with the current HLSL class.</summary>
            <param name="ppLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>**</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a> interface pointer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-getclasslinkage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For more information about using the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a> interface, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/overviews-direct3d-11-hlsl-dynamic-linking">Dynamic Linking</a>.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-getclasslinkage#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC*)">
            <summary>Gets a description of the current HLSL class.</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_class_instance_desc">D3D11_CLASS_INSTANCE_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_class_instance_desc">D3D11_CLASS_INSTANCE_DESC</a> structure that describes the current HLSL class.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For more information about using the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a> interface, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/overviews-direct3d-11-hlsl-dynamic-linking">Dynamic Linking</a>.</para>
            <para>An instance is not restricted to being used for a single type in a single shader. An instance is flexible and can be used for any shader that used the same type name or instance name when the instance was generated.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-getdesc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.GetInstanceName(Windows.Win32.Foundation.PSTR,System.UIntPtr@)">
            <summary>Gets the instance name of the current HLSL class.</summary>
            <param name="pInstanceName">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b> The instance name of the current HLSL class.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-getinstancename#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pBufferLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a>*</b> The length of the <i>pInstanceName</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-getinstancename#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>GetInstanceName will return a valid name only for instances acquired using <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11classlinkage-getclassinstance">ID3D11ClassLinkage::GetClassInstance</a>.</para>
            <para>For more information about using the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a> interface, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/overviews-direct3d-11-hlsl-dynamic-linking">Dynamic Linking</a>.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-getinstancename#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.GetTypeName(Windows.Win32.Foundation.PSTR,System.UIntPtr@)">
            <summary>Gets the type of the current HLSL class.</summary>
            <param name="pTypeName">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b> Type of the current HLSL class.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-gettypename#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pBufferLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a>*</b> The length of the <i>pTypeName</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-gettypename#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>GetTypeName will return a valid name only for instances acquired using <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11classlinkage-getclassinstance">ID3D11ClassLinkage::GetClassInstance</a>.</para>
            <para>For more information about using the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a> interface, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/overviews-direct3d-11-hlsl-dynamic-linking">Dynamic Linking</a>.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classinstance-gettypename#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage.GetClassInstance(Windows.Win32.Foundation.PCSTR,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance@)">
            <summary>Gets the class-instance object that represents the specified HLSL class.</summary>
            <param name="pClassInstanceName">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b> The name of a class for which to get the class instance.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-getclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="InstanceIndex">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the class instance.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-getclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppInstance">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> The address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a> interface to initialize.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-getclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>For more information about using the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a> interface, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/overviews-direct3d-11-hlsl-dynamic-linking">Dynamic Linking</a>.</para>
            <para>A class instance must have at least 1 data member in order to be available for the runtime to use with <b>ID3D11ClassLinkage::GetClassInstance</b>. Any instance with no members will be optimized out of a compiled shader blob as a zero-sized object. If you have a class with no data members, use <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance">ID3D11ClassLinkage::CreateClassInstance</a> instead.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-getclassinstance#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage.CreateClassInstance(Windows.Win32.Foundation.PCSTR,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance@)">
            <summary>Initializes a class-instance object that represents an HLSL class instance.</summary>
            <param name="pClassTypeName">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b> The type name of a class to initialize.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ConstantBufferOffset">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Identifies the constant buffer that contains the class data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ConstantVectorOffset">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The four-component vector offset from the start of the constant buffer where the class data will begin. Consequently, this is not a byte offset.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="TextureOffset">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The texture slot for the first texture; there may be multiple textures following the offset.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SamplerOffset">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The sampler slot for the first sampler; there may be multiple samplers following the offset.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppInstance">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> The address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a> interface to initialize.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>Instances can be created (or gotten) before or after a shader is created. Use the same shader linkage object to acquire a class instance and create the shader the instance is going to be used in. For more information about using the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a> interface, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/overviews-direct3d-11-hlsl-dynamic-linking">Dynamic Linking</a>.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11classlinkage-createclassinstance#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11CommandList.GetContextFlags">
            <summary>Gets the initialization flags associated with the deferred context that created the command list.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The context flag is reserved for future use and is always 0.</para>
            </returns>
            <remarks>The GetContextFlags method gets the flags that were supplied to the <i>ContextFlags</i> parameter of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createdeferredcontext">ID3D11Device::CreateDeferredContext</a>; however, the context flag is reserved for future use.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Counter.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*)">
            <summary>Get a counter description. (ID3D11Counter.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>*</b> Pointer to a counter description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11counter-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11counter-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*)">
            <summary>Gets the description for depth-stencil state that you used to create the depth-stencil-state object.</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a> structure that receives a description of the depth-stencil state.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11depthstencilstate-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>You use the description for depth-stencil state in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createdepthstencilstate">ID3D11Device::CreateDepthStencilState</a> method to create the depth-stencil-state object.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC*)">
            <summary>Get the depth-stencil view. (ID3D11DepthStencilView.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>*</b> Pointer to a depth-stencil-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11depthstencilview-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11depthstencilview-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateBuffer(Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer@)">
            <summary>Creates a buffer (vertex buffer, index buffer, or shader-constant buffer).</summary>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> structure that describes the buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pInitialData">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structure that describes  the initialization data; use <b>NULL</b> to allocate space only (with the exception that it cannot be <b>NULL</b> if the usage flag is <b>D3D11_USAGE_IMMUTABLE</b>).</para>
            <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the buffer is undefined. In this case, you need to write the buffer content some other way before the resource is read.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppBuffer">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> Address of a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> interface for the buffer object created. Set this parameter to <b>NULL</b> to validate the other input parameters (<b>S_FALSE</b> indicates a pass).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the buffer. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            </returns>
            <remarks>
            <para>For example code, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-vertex-how-to">How to: Create a Vertex Buffer</a>, <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-index-how-to">How to: Create an Index Buffer</a> or <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-constant-how-to">How to: Create a Constant Buffer</a>.</para>
            <para>For a constant buffer (<b>BindFlags</b> of  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> set to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_CONSTANT_BUFFER</a>), you must set the <b>ByteWidth</b> value of  <b>D3D11_BUFFER_DESC</b> in multiples of 16, and less than or equal to <b>D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT</b>.</para>
            <para>The Direct3D 11.1 runtime, which is available on WindowsÂ 8 and later operating systems, provides the following new functionality for <b>CreateBuffer</b>:</para>
            <para>You can create a constant buffer that is larger than the maximum constant buffer size that a shader can access (4096 32-bit*4-component constants â 64KB). When you bind the constant buffer to the pipeline (for example, via <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers">PSSetConstantBuffers</a> or <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-pssetconstantbuffers1">PSSetConstantBuffers1</a>), you can define a range of the buffer that the shader can access that fits within the 4096 constant limit. The Direct3D 11.1 runtime (available in Windows 8 and later operating systems) emulates this feature for [feature level](/windows/win32/direct3d11/overviews-direct3d-11-devices-downlevel-intro) 9.1, 9.2, and 9.3; therefore, this feature is supported for feature level 9.1, 9.2, and 9.3. This feature is always available on new drivers for feature level 10 and higher. On runtimes older than Direct3D 11.1, a call to **CreateBuffer** to request a constant buffer that is larger than 4096 fails.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createbuffer#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateTexture1D(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D@)">
            <summary>Creates an array of 1D textures.</summary>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a> structure that describes a 1D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pInitialData">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b> A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures that describe subresources for the 1D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created. If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read. You can determine the size of this array from values in the <b>MipLevels</b> and <b>ArraySize</b> members of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a> structure to which <i>pDesc</i> points by using the following calculation: MipLevels * ArraySize For more information about this array size, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppTexture1D">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture1d">ID3D11Texture1D</a>**</b> A pointer to a buffer that receives a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture1d">ID3D11Texture1D</a> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            </returns>
            <remarks>
            <para><b>CreateTexture1D</b> creates a 1D texture resource, which can contain a number of 1D subresources. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more subresources. To load data into the texture, applications can supply the data initially as an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures pointed to by <i>pInitialData</i>, or they can use one of the D3DX texture functions such as <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3dx11createtexturefromfile">D3DX11CreateTextureFromFile</a>. For a 32 width texture with a full mipmap chain, the <i>pInitialData</i> array has the following 6 elements:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture1d#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateTexture2D(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D@)">
            <summary>Create an array of 2D textures.</summary>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a> structure that describes a 2D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pInitialData">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b> A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures that describe subresources for the 2D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created. If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read. You can determine the size of this array from values in the <b>MipLevels</b> and <b>ArraySize</b> members of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a> structure to which <i>pDesc</i> points by using the following calculation: MipLevels * ArraySize For more information about this array size, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppTexture2D">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture2d">ID3D11Texture2D</a>**</b> A pointer to a buffer that receives a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture2d">ID3D11Texture2D</a> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            </returns>
            <remarks>
            <para><b>CreateTexture2D</b> creates a 2D texture resource, which can contain a number of 2D subresources. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more subresources. To load data into the texture, applications can supply the data initially as an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures pointed to by <i>pInitialData</i>, or it may use one of the D3DX texture functions such as <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3dx11createtexturefromfile">D3DX11CreateTextureFromFile</a>. For a 32 x 32 texture with a full mipmap chain, the <i>pInitialData</i> array has the following 6 elements:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture2d#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateTexture3D(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D@)">
            <summary>Create a single 3D texture.</summary>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a> structure that describes a 3D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pInitialData">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b> A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures that describe subresources for the 3D texture resource. Applications cannot specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created. If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read. You can determine the size of this array from the value in the <b>MipLevels</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a> structure to which <i>pDesc</i> points. Arrays of 3D volume textures are not supported. For more information about this array size, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppTexture3D">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture3d">ID3D11Texture3D</a>**</b> A pointer to a buffer that receives a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture3d">ID3D11Texture3D</a> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            </returns>
            <remarks>
            <para><b>CreateTexture3D</b> creates a 3D texture resource, which can contain a number of 3D subresources. The number of textures is specified in the texture description. All textures in a resource must have the same format, size, and number of mipmap levels. All resources are made up of one or more subresources. To load data into the texture, applications can supply the data initially as an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures pointed to by <i>pInitialData</i>, or they can use one of the D3DX texture functions such as <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3dx11createtexturefromfile">D3DX11CreateTextureFromFile</a>. Each element of <i>pInitialData</i> provides all of the slices that are defined for a given miplevel. For example, for a 32 x 32 x 4 volume texture with a full mipmap chain, the array has the following 6 elements: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createtexture3d#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateShaderResourceView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView@)">
            <summary>Create a shader-resource view for accessing data in a resource. (ID3D11Device.CreateShaderResourceView)</summary>
            <param name="pResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> Pointer to the resource that will serve as input to a shader. This resource must have been created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_SHADER_RESOURCE </a> flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>*</b> Pointer to a shader-resource view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>). Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSRView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b> Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>A resource is made up of one or more subresources; a view identifies which subresources to allow the pipeline to access. In addition, each resource is bound to the pipeline using a view. A shader-resource view is designed to bind any buffer or texture resource to the shader stages using the following API methods: <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources">ID3D11DeviceContext::VSSetShaderResources</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources">ID3D11DeviceContext::GSSetShaderResources</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources">ID3D11DeviceContext::PSSetShaderResources</a>.</para>
            <para>Because a view is fully typed, this means that typeless resources become fully typed when bound to the pipeline. <div class="alert"><b>Note</b>Â Â To successfully create a shader-resource view from a typeless buffer (for example, <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_R32G32B32A32_TYPELESS</a>), you must set the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS</a> flag when you create the buffer. </div> <div>Â </div> The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, allows you to use <b>CreateShaderResourceView</b> for the following new purpose.</para>
            <para>You can create shader-resource views of video resources so that Direct3D shaders can process those shader-resource views. These video resources are either <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2d">Texture2D</a> or <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2darray">Texture2DArray</a>. The value in the <b>ViewDimension</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a> structure for a created shader-resource view must match the type of video resource, D3D11_SRV_DIMENSION_TEXTURE2D          for Texture2D and D3D11_SRV_DIMENSION_TEXTURE2DARRAY for Texture2DArray. Additionally, the format of the underlying video resource restricts the formats that the view can use. The video resource format values on the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> reference page specify the format values that views are restricted to.</para>
            <para>The runtime read+write conflict prevention logic (which stops a resource from being bound as an SRV and RTV or UAV at the same time) treats views of different parts of the same video surface as conflicting for simplicity.  Therefore, the runtime does not allow an application to read from luma while the application simultaneously renders to chroma in the same surface even though the hardware might allow these simultaneous operations. <b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateUnorderedAccessView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView@)">
            <summary>Creates a view for accessing an unordered access resource. (ID3D11Device.CreateUnorderedAccessView)</summary>
            <param name="pResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> Pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> that represents a resources that will serve as an input to a shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>*</b> Pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a> that represents a shader-resource view description. Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppUAView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b> Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> that represents an unordered-access view. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, allows you to use <b>CreateUnorderedAccessView</b> for the following new purpose. You can create unordered-access views of video resources so that Direct3D shaders can process those unordered-access views. These video resources are either <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2d">Texture2D</a> or <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2darray">Texture2DArray</a>. The value in the <b>ViewDimension</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a> structure for a created unordered-access view must match the type of video resource, D3D11_UAV_DIMENSION_TEXTURE2D          for Texture2D and D3D11_UAV_DIMENSION_TEXTURE2DARRAY for Texture2DArray. Additionally, the format of the underlying video resource restricts the formats that the view can use. The video resource format values on the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> reference page specify the format values that views are restricted to. The runtime read+write conflict prevention logic (which stops a resource from being bound as an SRV and RTV or UAV at the same time) treats views of different parts of the same video surface as conflicting for simplicity.  Therefore, the runtime does not allow an application to read from luma while the application simultaneously renders to chroma in the same surface even though the hardware might allow these simultaneous operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createunorderedaccessview#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateRenderTargetView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView@)">
            <summary>Creates a render-target view for accessing resource data. (ID3D11Device.CreateRenderTargetView)</summary>
            <param name="pResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> that represents a render target. This resource must have been created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_RENDER_TARGET</a> flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a> that represents a render-target view description. Set this parameter to <b>NULL</b> to create a view that accesses all of the subresources in mipmap level 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppRTView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>**</b> Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>A render-target view can be bound to the output-merger stage by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets">ID3D11DeviceContext::OMSetRenderTargets</a>. The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, allows you to use <b>CreateRenderTargetView</b> for the following new purpose. You can create render-target views of video resources so that Direct3D shaders can process those render-target views. These video resources are either <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2d">Texture2D</a> or <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2darray">Texture2DArray</a>. The value in the <b>ViewDimension</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a> structure for a created render-target view must match the type of video resource, D3D11_RTV_DIMENSION_TEXTURE2D          for Texture2D and D3D11_RTV_DIMENSION_TEXTURE2DARRAY for Texture2DArray. Additionally, the format of the underlying video resource restricts the formats that the view can use. The video resource format values on the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> reference page specify the format values that views are restricted to. The runtime read+write conflict prevention logic (which stops a resource from being bound as an SRV and RTV or UAV at the same time) treats views of different parts of the same video surface as conflicting for simplicity.  Therefore, the runtime does not allow an application to read from luma while the application simultaneously renders to chroma in the same surface even though the hardware might allow these simultaneous operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createrendertargetview#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateDepthStencilView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@)">
            <summary>Create a depth-stencil view for accessing resource data. (ID3D11Device.CreateDepthStencilView)</summary>
            <param name="pResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> Pointer to the resource that will serve as the depth-stencil surface. This resource must have been created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_DEPTH_STENCIL</a> flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>*</b> Pointer to a depth-stencil-view description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>). Set this parameter to <b>NULL</b> to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDepthStencilView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>**</b> Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>A depth-stencil view can be bound to the output-merger stage by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets">ID3D11DeviceContext::OMSetRenderTargets</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateInputLayout(Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC*,System.UInt32,System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout@)">
            <summary>Create an input-layout object to describe the input-buffer data for the input-assembler stage. (ID3D11Device.CreateInputLayout)</summary>
            <param name="pInputElementDescs">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_input_element_desc">D3D11_INPUT_ELEMENT_DESC</a>*</b> An array of the input-assembler stage input data types; each type is described by an element description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_input_element_desc">D3D11_INPUT_ELEMENT_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumElements">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of input-data types in the array of input-elements.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pShaderBytecodeWithInputSignature">
            <para>Type: <b>const void*</b> A pointer to the compiled shader.  The compiled shader code contains a input signature which is validated against the array of elements. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppInputLayout">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>**</b> A pointer to the input-layout object created (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>). To validate the other input parameters, set this pointer to be <b>NULL</b> and verify that the method returns S_FALSE.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            </returns>
            <remarks>
            <para>After creating an input layout object, it must be bound to the input-assembler stage before calling a draw API. Once an input-layout object is created from a shader signature, the input-layout object can be reused with any other shader that has an identical input signature (semantics included). This can simplify the creation of input-layout objects when you are working with many shaders with identical inputs. If a data type in the input-layout declaration does not match the data type in a shader-input signature, CreateInputLayout will generate a warning during compilation. The warning is simply to call attention to the fact that the data may be reinterpreted when read from a register. You may either disregard this warning (if reinterpretation is intentional) or make the data types match in both declarations to eliminate the warning.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createinputlayout#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateVertexShader(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader@)">
            <summary>Create a vertex-shader object from a compiled shader. (ID3D11Device.CreateVertexShader)</summary>
            <param name="pShaderBytecode">
            <para>Type: <b>const void*</b> A pointer to the compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled vertex shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClassLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b> A pointer to a class linkage interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppVertexShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>**</b> Address of a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return <b>S_FALSE</b> instead of <b>S_OK</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, provides the following new functionality for <b>CreateVertexShader</b>. The following shader model 5.0 instructions are available to just pixel shaders and compute shaders in the Direct3D 11.0 runtime. For the Direct3D 11.1 runtime, because unordered access views (UAV) are available at all shader stages, you can use these instructions in all shader stages. Therefore, if you use the following shader model 5.0 instructions in a vertex shader, you can successfully pass the compiled vertex shader to <i>pShaderBytecode</i>. That is, the call to <b>CreateVertexShader</b> succeeds. If you pass a compiled shader to <i>pShaderBytecode</i> that uses any of the following instructions on a device that doesnât support UAVs at every shader stage (including existing drivers that are not implemented to support UAVs at every shader stage), <b>CreateVertexShader</b> fails.  <b>CreateVertexShader</b> also fails if the shader tries to use a UAV slot beyond the set of UAV slots that the hardware supports. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createvertexshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateGeometryShader(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader@)">
            <summary>Create a geometry shader. (ID3D11Device.CreateGeometryShader)</summary>
            <param name="pShaderBytecode">
            <para>Type: <b>const void*</b> A pointer to the compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled geometry shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClassLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b> A pointer to a class linkage interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppGeometryShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>**</b> Address of a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>After it is created, the shader can be set to the device by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshader">ID3D11DeviceContext::GSSetShader</a>. The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, provides the following new functionality for <b>CreateGeometryShader</b>. The following shader model 5.0 instructions are available to just pixel shaders and compute shaders in the Direct3D 11.0 runtime. For the Direct3D 11.1 runtime, because unordered access views (UAV) are available at all shader stages, you can use these instructions in all shader stages. Therefore, if you use the following shader model 5.0 instructions in a geometry shader, you can successfully pass the compiled geometry shader to <i>pShaderBytecode</i>. That is, the call to <b>CreateGeometryShader</b> succeeds. If you pass a compiled shader to <i>pShaderBytecode</i> that uses any of the following instructions on a device that doesnât support UAVs at every shader stage (including existing drivers that are not implemented to support UAVs at every shader stage), <b>CreateGeometryShader</b> fails.  <b>CreateGeometryShader</b> also fails if the shader tries to use a UAV slot beyond the set of UAV slots that the hardware supports. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateGeometryShaderWithStreamOutput(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY*,System.UInt32,System.UInt32*,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader@)">
            <summary>Creates a geometry shader that can write to streaming output buffers. (ID3D11Device.CreateGeometryShaderWithStreamOutput)</summary>
            <param name="pShaderBytecode">
            <para>Type: <b>const void*</b> A pointer to the compiled geometry shader for a standard geometry shader plus stream output. For info on how to get this pointer, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>. To create the stream output without using a geometry shader, pass a pointer to the output signature for the prior stage. To obtain this output signature, call the <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3dgetoutputsignatureblob">D3DGetOutputSignatureBlob</a> compiler function. You can also pass a pointer to the compiled shader for the prior stage (for example, the <a href="https://docs.microsoft.com/previous-versions/bb205146(v=vs.85)">vertex-shader stage</a> or <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">domain-shader stage</a>). This compiled shader provides the output signature for the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled geometry shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSODeclaration">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_so_declaration_entry">D3D11_SO_DECLARATION_ENTRY</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_so_declaration_entry">D3D11_SO_DECLARATION_ENTRY</a> array. Cannot be <b>NULL</b> if NumEntries &gt; 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumEntries">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of entries in the stream output declaration ( ranges from 0 to D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT ).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pBufferStrides">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> An array of buffer strides; each stride is the size of an element for that buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumStrides">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of strides (or buffers) in <i>pBufferStrides</i> (ranges from 0 to D3D11_SO_BUFFER_SLOT_COUNT).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RasterizedStream">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index number of the stream to be sent to the rasterizer stage (ranges from 0 to D3D11_SO_STREAM_COUNT - 1). Set to D3D11_SO_NO_RASTERIZED_STREAM if no stream is to be rasterized.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClassLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b> A pointer to a class linkage interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppGeometryShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>**</b> Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a> interface, representing the geometry shader that was created. Set this to <b>NULL</b> to validate the other parameters; if validation passes, the method will return S_FALSE instead of S_OK.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>For more info about using <b>CreateGeometryShaderWithStreamOutput</b>, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-stream-stage-getting-started">Create a Geometry-Shader Object with Stream Output</a>.</para>
            <para>The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, provides the following new functionality for <b>CreateGeometryShaderWithStreamOutput</b>.</para>
            <para>The following shader model 5.0 instructions are available to just pixel shaders and compute shaders in the Direct3D 11.0 runtime. For the Direct3D 11.1 runtime, because unordered access views (UAV) are available at all shader stages, you can use these instructions in all shader stages. Therefore, if you use the following shader model 5.0 instructions in a geometry shader, you can successfully pass the compiled geometry shader to <i>pShaderBytecode</i>. That is, the call to <b>CreateGeometryShaderWithStreamOutput</b> succeeds.</para>
            <para>If you pass a compiled shader to <i>pShaderBytecode</i> that uses any of the following instructions on a device that doesnât support UAVs at every shader stage (including existing drivers that are not implemented to support UAVs at every shader stage), <b>CreateGeometryShaderWithStreamOutput</b> fails.  <b>CreateGeometryShaderWithStreamOutput</b> also fails if the shader tries to use a UAV slot beyond the set of UAV slots that the hardware supports.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreatePixelShader(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader@)">
            <summary>Create a pixel shader. (ID3D11Device.CreatePixelShader)</summary>
            <param name="pShaderBytecode">
            <para>Type: <b>const void*</b> A pointer to the compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled pixel shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClassLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b> A pointer to a class linkage interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppPixelShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>**</b> Address of a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>After creating the pixel shader, you can set it to the device using <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshader">ID3D11DeviceContext::PSSetShader</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateHullShader(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11HullShader@)">
            <summary>Create a hull shader.</summary>
            <param name="pShaderBytecode">
            <para>Type: <b>const void*</b> A pointer to a compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClassLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b> A pointer to a class linkage interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppHullShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>**</b> Address of a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a> interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, provides the following new functionality for <b>CreateHullShader</b>. The following shader model 5.0 instructions are available to just pixel shaders and compute shaders in the Direct3D 11.0 runtime. For the Direct3D 11.1 runtime, because unordered access views (UAV) are available at all shader stages, you can use these instructions in all shader stages. Therefore, if you use the following shader model 5.0 instructions in a hull shader, you can successfully pass the compiled hull shader to <i>pShaderBytecode</i>. That is, the call to <b>CreateHullShader</b> succeeds. If you pass a compiled shader to <i>pShaderBytecode</i> that uses any of the following instructions on a device that doesnât support UAVs at every shader stage (including existing drivers that are not implemented to support UAVs at every shader stage), <b>CreateHullShader</b> fails.  <b>CreateHullShader</b> also fails if the shader tries to use a UAV slot beyond the set of UAV slots that the hardware supports. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createhullshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateDomainShader(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader@)">
            <summary>Create a domain shader.</summary>
            <param name="pShaderBytecode">
            <para>Type: <b>const void*</b> A pointer to a compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClassLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b> A pointer to a class linkage interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDomainShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>**</b> Address of a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return <b>S_FALSE</b> instead of <b>S_OK</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, provides the following new functionality for <b>CreateDomainShader</b>. The following shader model 5.0 instructions are available to just pixel shaders and compute shaders in the Direct3D 11.0 runtime. For the Direct3D 11.1 runtime, because unordered access views (UAV) are available at all shader stages, you can use these instructions in all shader stages. Therefore, if you use the following shader model 5.0 instructions in a domain shader, you can successfully pass the compiled domain shader to <i>pShaderBytecode</i>. That is, the call to <b>CreateDomainShader</b> succeeds. If you pass a compiled shader to <i>pShaderBytecode</i> that uses any of the following instructions on a device that doesnât support UAVs at every shader stage (including existing drivers that are not implemented to support UAVs at every shader stage), <b>CreateDomainShader</b> fails.  <b>CreateDomainShader</b> also fails if the shader tries to use a UAV slot beyond the set of UAV slots that the hardware supports. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdomainshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateComputeShader(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader@)">
            <summary>Create a compute shader.</summary>
            <param name="pShaderBytecode">
            <para>Type: <b>const void*</b> A pointer to a compiled shader.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytecodeLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> Size of the compiled shader in <i>pShaderBytecode</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClassLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>, which represents  class linkage interface; the value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppComputeShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>**</b> Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated; if validation passes, CreateComputeShader returns S_FALSE instead of S_OK.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            </returns>
            <remarks>For an example, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-compute-create">How To: Create a Compute Shader</a> and <a href="https://msdn.microsoft.com/library/Ee416569(v=VS.85).aspx">HDRToneMappingCS11 Sample</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateClassLinkage(Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage@)">
            <summary>Creates class linkage libraries to enable dynamic shader linkage.</summary>
            <param name="ppLinkage">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>**</b> A pointer to a class-linkage interface pointer (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createclasslinkage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>The <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a> interface returned in <i>ppLinkage</i> is associated with a shader by passing it as a parameter to one of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a> create shader methods such as <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createpixelshader">ID3D11Device::CreatePixelShader</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateBlendState(Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11BlendState@)">
            <summary>Create a blend-state object that encapsulates blend state for the output-merger stage. (ID3D11Device.CreateBlendState)</summary>
            <param name="pBlendStateDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">D3D11_BLEND_DESC</a>*</b> Pointer to a blend-state description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">D3D11_BLEND_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppBlendState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>**</b> Address of a pointer to the blend-state object created (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns E_OUTOFMEMORY if there is insufficient memory to create the blend-state object. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            </returns>
            <remarks>
            <para>An application can create up to 4096 unique blend-state objects. For each object created, the runtime checks to see if a previous object has the same state. If such a previous object exists, the runtime will return a pointer to previous instance instead of creating a duplicate object.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createblendstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateDepthStencilState(Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState@)">
            <summary>Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage. (ID3D11Device.CreateDepthStencilState)</summary>
            <param name="pDepthStencilDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>*</b> Pointer to a depth-stencil state description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDepthStencilState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>**</b> Address of a pointer to the depth-stencil state object created (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>4096 unique depth-stencil state objects can be created on a device at a time. If an application attempts to create a depth-stencil-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique depth-stencil state objects will stay the same.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdepthstencilstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateRasterizerState(Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState@)">
            <summary>Create a rasterizer state object that tells the rasterizer stage how to behave. (ID3D11Device.CreateRasterizerState)</summary>
            <param name="pRasterizerDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>*</b> Pointer to a rasterizer state description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createrasterizerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppRasterizerState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>**</b> Address of a pointer to the rasterizer state object created (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createrasterizerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader.  See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            </returns>
            <remarks>
            <para>4096 unique rasterizer state objects can be created on a device at a time. If an application attempts to create a rasterizer-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique rasterizer state objects will stay the same.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createrasterizerstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateSamplerState(Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState@)">
            <summary>Create a sampler-state object that encapsulates sampling information for a texture. (ID3D11Device.CreateSamplerState)</summary>
            <param name="pSamplerDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a>*</b> Pointer to a sampler state description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createsamplerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplerState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b> Address of a pointer to the sampler state object created (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createsamplerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>4096 unique sampler state objects can be created on a device at a time. If an application attempts to create a sampler-state interface with the same state as an existing interface, the same interface will be returned and the total number of unique sampler state objects will stay the same.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createsamplerstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateQuery(Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11Query@)">
            <summary>This interface encapsulates methods for querying information from the GPU. (ID3D11Device.CreateQuery)</summary>
            <param name="pQueryDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>*</b> Pointer to a query description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createquery#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppQuery">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11query">ID3D11Query</a>**</b> Address of a pointer to the query object created (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11query">ID3D11Query</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createquery#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns E_OUTOFMEMORY if there is insufficient memory to create the query object. See <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createquery">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreatePredicate(Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11Predicate@)">
            <summary>Creates a predicate. (ID3D11Device.CreatePredicate)</summary>
            <param name="pPredicateDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>*</b> Pointer to a query description where the type of query must be a D3D11_QUERY_SO_OVERFLOW_PREDICATE or D3D11_QUERY_OCCLUSION_PREDICATE (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createpredicate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppPredicate">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>**</b> Address of a pointer to a predicate (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createpredicate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createpredicate">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateCounter(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11Counter@)">
            <summary>Create a counter object for measuring GPU performance. (ID3D11Device.CreateCounter)</summary>
            <param name="pCounterDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>*</b> Pointer to a counter description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppCounter">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11counter">ID3D11Counter</a>**</b> Address of a pointer to a counter (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11counter">ID3D11Counter</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If this function succeeds, it will return S_OK. If it fails, possible return values are: S_FALSE, E_OUTOFMEMORY, DXGI_ERROR_UNSUPPORTED, DXGI_ERROR_NONEXCLUSIVE, or E_INVALIDARG. DXGI_ERROR_UNSUPPORTED is returned whenever the application requests to create a well-known counter, but the current device does not support it. DXGI_ERROR_NONEXCLUSIVE indicates that another device object is currently using the counters, so they cannot be used by this device at the moment. E_INVALIDARG is returned whenever an out-of-range well-known or device-dependent counter is requested, or when the simulataneously active counters have been exhausted.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createcounter">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateDeferredContext(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext@)">
            <summary>Creates a deferred context, which can record command lists. (ID3D11Device.CreateDeferredContext)</summary>
            <param name="ContextFlags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Reserved for future use. Pass 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdeferredcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDeferredContext">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>**</b> Upon completion of the method, the passed pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> interface pointer is initialized.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdeferredcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the following:</para>
            <para></para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>A deferred context is a thread-safe context that you can use to record graphics commands on a thread other than the main rendering thread. Using a deferred context, you can record graphics commands into a command list that is encapsulated by the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a> interface. After all scene items are recorded, you can then submit them to the main render thread for final rendering. In this manner, you can perform rendering tasks concurrently across multiple threads and potentially improve performance in multi-core CPU scenarios.</para>
            <para>You can create multiple deferred contexts.</para>
            <para><div class="alert"><b>Note</b>Â Â If you use the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_SINGLETHREADED</a> value to create the device that is represented by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>, the <b>CreateDeferredContext</b> method will fail, and you will not be able to create a deferred context. </div> <div>Â </div> For more information about deferred contexts, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-render-multi-thread-render">Immediate and Deferred Rendering</a>.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-createdeferredcontext#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.OpenSharedResource(Windows.Win32.Foundation.HANDLE,System.Guid*,System.Object@)">
            <summary>Give a device access to a shared resource created on a different device.</summary>
            <param name="hResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HANDLE</a></b> A resource handle. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ReturnedInterface">
            <para>Type: <b>REFIID</b> The globally unique identifier (GUID) for the resource interface. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppResource">
            <para>Type: <b>void**</b> Address of a pointer to the resource we are gaining access to.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The REFIID, or GUID, of the interface to the resource can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D11Buffer) will get the GUID of the interface to a buffer resource. The unique handle of the resource is obtained differently depending on the type of device that originally created the resource. To share a resource between two Direct3D 11 devices the resource must have been created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_SHARED</a> flag, if it was created using the ID3D11Device interface. If it was created using a DXGI device interface, then the resource is always shared. The REFIID, or GUID, of the interface to the resource can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D11Buffer) will get the GUID of the interface to a buffer resource. When sharing a resource between two Direct3D 10/11 devices the unique handle of the resource can be obtained by querying the resource for the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiresource">IDXGIResource</a> interface and then calling <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiresource-getsharedhandle">GetSharedHandle</a>.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-opensharedresource#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CheckFormatSupport(Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT,System.UInt32@)">
            <summary>Get the support of a given format on the installed video device. (ID3D11Device.CheckFormatSupport)</summary>
            <param name="Format">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumeration that describes a format for which to check for support.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkformatsupport#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pFormatSupport">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> A bitfield of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_format_support">D3D11_FORMAT_SUPPORT</a> enumeration values describing how the specified format is supported on the installed device. The values are ORed together.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkformatsupport#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns E_INVALIDARG if the <i>Format</i> parameter is <b>NULL</b>, or returns E_FAIL if the described format does not exist.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkformatsupport">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CheckMultisampleQualityLevels(Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT,System.UInt32,System.UInt32@)">
            <summary>Get the number of quality levels available during multisampling. (ID3D11Device.CheckMultisampleQualityLevels)</summary>
            <param name="Format">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> The texture format. See <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SampleCount">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">UINT</a></b> The number of samples during multisampling.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumQualityLevels">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">UINT</a>*</b> Number of quality levels supported by the adapter. See **Remarks**.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/win32/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>When multisampling a texture, the number of quality levels available for an adapter is dependent on the texture format used and the number of samples requested. The maximum number of quality levels is defined by **D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT** in `D3D11.h`. If this method returns 0 (S_OK), and the output parameter `pNumQualityLevels` receives a positive value, then the format and sample count combination is supported for the device. When the combination is not supported, this method returns a failure **HRESULT** code (that is, a negative integer), or sets `pNumQualityLevels` output parameter to zero, or both. Furthermore, the definition of a quality level is left to each hardware vendor to define; however no facility is provided by Direct3D to help discover this information. Note that FEATURE_LEVEL_10_1 devices are required to support 4x MSAA for all render targets except R32G32B32A32 and R32G32B32. FEATURE_LEVEL_11_0 devices are required to support 4x MSAA for all render target formats, and 8x MSAA for all render target formats except R32G32B32A32 formats.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CheckCounterInfo(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO*)">
            <summary>Get a counter's information. (ID3D11Device.CheckCounterInfo)</summary>
            <param name="pCounterInfo">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_info">D3D11_COUNTER_INFO</a>*</b> Pointer to counter information (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_info">D3D11_COUNTER_INFO</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounterinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounterinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CheckCounter(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE*,System.UInt32@,Windows.Win32.Foundation.PSTR,System.UInt32*,Windows.Win32.Foundation.PSTR,System.UInt32*,Windows.Win32.Foundation.PSTR,System.UInt32*)">
            <summary>Get the type, name, units of measure, and a description of an existing counter. (ID3D11Device.CheckCounter)</summary>
            <param name="pDesc">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>*</b> Pointer to a counter description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>). Specifies which counter information is to be retrieved about.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pType">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter_type">D3D11_COUNTER_TYPE</a>*</b> Pointer to the data type of a counter (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter_type">D3D11_COUNTER_TYPE</a>). Specifies the data type of the counter being retrieved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pActiveCounters">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Pointer to the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="szName">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b> String to be filled with a brief name for the counter. May be <b>NULL</b> if the application is not interested in the name of the counter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNameLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Length of the string returned to szName. Can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="szUnits">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b> Name of the units a counter measures, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pUnitsLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Length of the string returned to szUnits. Can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="szDescription">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b> A description of the counter, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDescriptionLength">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Length of the string returned to szDescription. Can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>Length parameters can be <b>NULL</b>, which indicates the application is not interested in the length nor the corresponding string value. When a length parameter is non-<b>NULL</b> and the corresponding string is <b>NULL</b>, the input value of the length parameter is ignored, and the length of the corresponding string (including terminating <b>NULL</b>) will be returned through the length parameter. When length and the corresponding parameter are both non-<b>NULL</b>, the input value of length is checked to ensure there is enough room, and then the length of the string (including terminating <b>NULL</b> character) is passed out through the length parameter.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkcounter#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CheckFeatureSupport(Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE,System.Void*,System.UInt32)">
            <summary>Gets information about the features that are supported by the current graphics driver. (ID3D11Device.CheckFeatureSupport)</summary>
            <param name="Feature">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_feature">D3D11_FEATURE</a></b> A member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_feature">D3D11_FEATURE</a> enumerated type that describes which feature to query for support.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pFeatureSupportData">
            <para>Type: <b>void*</b> Upon completion of the method, the passed structure is filled with data that describes the feature support.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="FeatureSupportDataSize">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The size of the structure passed to the <i>pFeatureSupportData</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns E_INVALIDARG if an unsupported data type is passed to the <i>pFeatureSupportData</i> parameter or a size mismatch is detected for the <i>FeatureSupportDataSize</i> parameter.</para>
            </returns>
            <remarks>
            <para>To query for multi-threading support, pass the <b>D3D11_FEATURE_THREADING</b> value to the <i>Feature</i> parameter, pass the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_threading">D3D11_FEATURE_DATA_THREADING</a> structure to the  <i>pFeatureSupportData</i> parameter, and pass the size of the <b>D3D11_FEATURE_DATA_THREADING</b> structure to the <i>FeatureSupportDataSize</i> parameter. Calling CheckFeatureSupport with <i>Feature</i> set to D3D11_FEATURE_FORMAT_SUPPORT causes the method to return the same information that would be returned by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-checkformatsupport">ID3D11Device::CheckFormatSupport</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-checkfeaturesupport#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)">
            <summary>Get application-defined data from a device.</summary>
            <param name="guid">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> Guid associated with the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDataSize">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> A pointer to a variable that on input contains the size, in bytes, of the buffer that <i>pData</i> points to, and on output contains the size, in bytes, of the amount of data that <b>GetPrivateData</b> retrieved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>void*</b> A pointer to a buffer that <b>GetPrivateData</b>  fills with data from the device if <i>pDataSize</i> points to a value that specifies a buffer large enough to hold the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the codes described in the topic <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>If the data returned is a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>, or one of its derivative classes, which was previously set by SetPrivateDataInterface, that interface will have its reference count incremented before the private data is returned.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.SetPrivateData(System.Guid*,System.UInt32,System.Void*)">
            <summary>Set data to a device and associate that data with a guid. (ID3D11Device.SetPrivateData)</summary>
            <param name="guid">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> Guid associated with the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DataSize">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Size of the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>const void*</b> Pointer to the data to be stored with this device. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the guid will be destroyed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The data stored in the device with this method can be retrieved with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-getprivatedata">ID3D11Device::GetPrivateData</a>. The data and guid set with this method will typically be application-defined. The <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> reports memory leaks by outputting a list of object interface pointers along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface pointer caused the leak. To set the friendly name, use the <b>SetPrivateData</b> method and the <b>WKPDID_D3DDebugObjectName</b> GUID that is in D3Dcommon.h. For example, to give pContext a friendly name of <i>My name</i>, use the following code:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setprivatedata#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.SetPrivateDataInterface(System.Guid*,System.Object)">
            <summary>Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid. (ID3D11Device.SetPrivateDataInterface)</summary>
            <param name="guid">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> Guid associated with the interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>const IUnknown*</b> Pointer to an IUnknown-derived interface to be associated with the device child.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setprivatedatainterface">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.GetFeatureLevel">
            <summary>Gets the feature level of the hardware device. (ID3D11Device.GetFeatureLevel)</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a></b> A member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a> enumerated type that describes the feature level of the hardware device.</para>
            </returns>
            <remarks><a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">Feature levels</a> determine the capabilities of your device.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.GetCreationFlags">
            <summary>Get the flags used during the call to create the device with D3D11CreateDevice.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A bitfield containing the flags used to create the device. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_FLAG</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-getcreationflags">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.GetDeviceRemovedReason">
            <summary>Get the reason why the device was removed. (ID3D11Device.GetDeviceRemovedReason)</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Possible return values include:</para>
            <para></para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-getdeviceremovedreason">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.GetImmediateContext(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext@)">
            <summary>Gets an immediate context, which can play back command lists. (ID3D11Device.GetImmediateContext)</summary>
            <param name="ppImmediateContext">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>**</b> Upon completion of the method, the passed pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> interface pointer is initialized.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-getimmediatecontext#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The <b>GetImmediateContext</b> method returns an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> object that represents an immediate context which is used to perform rendering that you want immediately submitted to a device. For most applications, an immediate context is the primary object that is used to draw your scene. The <b>GetImmediateContext</b> method increments the reference count of the immediate context by one. Therefore, you must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> on the returned interface pointer when you are done with it to avoid a memory leak.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-getimmediatecontext#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.SetExceptionMode(System.UInt32)">
            <summary>Get the exception-mode flags. (ID3D11Device.SetExceptionMode)</summary>
            <param name="RaiseFlags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_raise_flag">D3D11_RAISE_FLAG</a>. A default value of 0 means there are no flags.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setexceptionmode#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>Set an exception-mode flag to elevate an error condition to a non-continuable exception. Whenever an error occurs, a Direct3D device enters the DEVICEREMOVED state and if the appropriate exception flag has been set, an exception is raised. A raised exception is designed to terminate an application. Before termination, the last chance an application has to persist data is by using an UnhandledExceptionFilter (see <a href="https://docs.microsoft.com/windows/desktop/Debug/structured-exception-handling">Structured Exception Handling</a>). In general, UnhandledExceptionFilters are leveraged to try to persist data when an application is crashing (to disk, for example). Any code that executes during an UnhandledExceptionFilter is not guaranteed to reliably execute (due to possible process corruption). Any data that the UnhandledExceptionFilter manages to persist, before the UnhandledExceptionFilter crashes again, should be treated as suspect, and therefore inspected by a new, non-corrupted process to see if it is usable.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11device-setexceptionmode#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.GetExceptionMode">
            <summary>Get the exception-mode flags. (ID3D11Device.GetExceptionMode)</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_raise_flag">D3D11_RAISE_FLAG</a>. A default value of 0 means there are no flags.</para>
            </returns>
            <remarks>An exception-mode flag is used to elevate an error condition to a non-continuable exception.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild.GetDevice(Windows.Win32.Graphics.Direct3D11.ID3D11Device@)">
            <summary>Get a pointer to the device that created this interface. (ID3D11DeviceChild.GetDevice)</summary>
            <param name="ppDevice">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>**</b> Address of a pointer to a device (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-getdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one, so be sure to call ::release() on the returned pointer(s) before they are freed or else you will have a memory leak.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)">
            <summary>Get application-defined data from a device child. (ID3D11DeviceChild.GetPrivateData)</summary>
            <param name="guid">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> Guid associated with the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDataSize">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> A pointer to a variable that on input contains the size, in bytes, of the buffer that <i>pData</i> points to, and on output contains the size, in bytes, of the amount of data that <b>GetPrivateData</b> retrieved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>void*</b> A pointer to a buffer that <b>GetPrivateData</b> fills with data from the device child if <i>pDataSize</i> points to a value that specifies a buffer large enough to hold the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The data stored in the device child is set by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedata">ID3D11DeviceChild::SetPrivateData</a>. If the data returned is a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>, or one of its derivative classes, which was previously set by SetPrivateDataInterface, that interface will have its reference count incremented before the private data is returned. <b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-getprivatedata#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild.SetPrivateData(System.Guid*,System.UInt32,System.Void*)">
            <summary>Set application-defined data to a device child and associate that data with an application-defined guid. (ID3D11DeviceChild.SetPrivateData)</summary>
            <param name="guid">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> Guid associated with the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DataSize">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Size of the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>const void*</b> Pointer to the data to be stored with this device child. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the specified guid will be destroyed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>
            <para>The data stored in the device child with this method can be retrieved with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicechild-getprivatedata">ID3D11DeviceChild::GetPrivateData</a>. The <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> reports memory leaks by outputting a list of object interface pointers along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface pointer caused the leak. To set the friendly name, use the <b>SetPrivateData</b> method and the <b>WKPDID_D3DDebugObjectName</b> GUID that is in D3Dcommon.h. For example, to give pContext a friendly name of <i>My name</i>, use the following code:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedata#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild.SetPrivateDataInterface(System.Guid*,System.Object)">
            <summary>Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid. (ID3D11DeviceChild.SetPrivateDataInterface)</summary>
            <param name="guid">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> Guid associated with the interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>const IUnknown*</b> Pointer to an IUnknown-derived interface to be associated with the device child.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            </returns>
            <remarks>When this method is called ::addref() will be called on the IUnknown-derived interface, and when the device child is destroyed ::release() will be called on the IUnknown-derived interface.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Sets the constant buffers used by the vertex shader pipeline stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> Array of constant buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para>The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, can bind a larger number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants â 4\*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4\*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            <para>If the application wants the shader to access other parts of the buffer, it must call the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-vssetconstantbuffers1">VSSetConstantBuffers1</a> method instead.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Bind an array of shader resources to the pixel shader stage. (ID3D11DeviceContext.PSSetShaderResources)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with <b>NULL</b>. For information about creating shader-resource views, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)">
            <summary>Sets a pixel shader to the device. (ID3D11DeviceContext.PSSetShader)</summary>
            <param name="pPixelShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>*</b> Pointer to a pixel shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b> A pointer to an array of class-instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of class-instance interfaces in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para>The maximum number of instances a shader can have is 256. Set ppClassInstances to <b>NULL</b> if no interfaces are used in the shader. If it is not <b>NULL</b>, the number of class instances must match the number of interfaces used in the shader. Furthermore, each interface pointer must have a corresponding class instance or the assigned shader will be disabled.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Set an array of sampler states to the pixel shader pipeline stage. (ID3D11DeviceContext.PSSetSamplers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)">
            <summary>Set a vertex shader to the device. (ID3D11DeviceContext.VSSetShader)</summary>
            <param name="pVertexShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>*</b> Pointer to a vertex shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b> A pointer to an array of class-instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of class-instance interfaces in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. The maximum number of instances a shader can have is 256.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DrawIndexed(System.UInt32,System.UInt32,System.Int32)">
            <summary>Draw indexed, non-instanced primitives. (ID3D11DeviceContext.DrawIndexed)</summary>
            <param name="IndexCount">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of indices to draw.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="StartIndexLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The location of the first index read by the GPU from the index buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BaseVertexLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b> A value added to each index before reading a vertex from the vertex buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>A draw API submits work to the rendering pipeline. If the sum of both indices is negative, the result of the function call is undefined.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexed#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.Draw(System.UInt32,System.UInt32)">
            <summary>Draw non-indexed, non-instanced primitives. (ID3D11DeviceContext.Draw)</summary>
            <param name="VertexCount">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of vertices to draw.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="StartVertexLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the first vertex, which is usually an offset in a vertex buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><b>Draw</b> submits work to the rendering pipeline. The vertex data for a draw call normally comes from a vertex buffer that is bound to the pipeline. Even without any vertex buffer bound to the pipeline, you can generate your own vertex data in your vertex shader by using the <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">SV_VertexID</a> system-value semantic to determine the current vertex that the runtime is processing.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-draw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.Map(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_MAP,System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE*)" -->
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.Unmap(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32)">
            <summary>Invalidate the pointer to a resource and reenable the GPU's access to that resource.</summary>
            <param name="pResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-unmap#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Subresource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A subresource to be unmapped.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-unmap#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For info about how to use <b>Unmap</b>, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/how-to--use-dynamic-resources">How to: Use dynamic resources</a>.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-unmap#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Sets the constant buffers used by the pixel shader pipeline stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> Array of constant buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para>The Direct3D 11.1 runtime, which is available on WindowsÂ 8 and later operating systems, can bind a larger number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants â 4*32-bit components each). When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            <para>To enable the shader to access other parts of the buffer, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-pssetconstantbuffers1">PSSetConstantBuffers1</a> instead of <b>PSSetConstantBuffers</b>. <b>PSSetConstantBuffers1</b> has additional parameters <i>pFirstConstant</i> and <i>pNumConstants</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IASetInputLayout(Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout)">
            <summary>Bind an input-layout object to the input-assembler stage. (ID3D11DeviceContext.IASetInputLayout)</summary>
            <param name="pInputLayout">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>*</b> A pointer to the input-layout object (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>), which describes the input buffers that will be read by the IA stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Input-layout objects describe how vertex buffer data is streamed into the IA pipeline stage. To create an input-layout object, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createinputlayout">ID3D11Device::CreateInputLayout</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetinputlayout#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IASetVertexBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.UInt32*,System.UInt32*)">
            <summary>Bind an array of vertex buffers to the input-assembler stage. (ID3D11DeviceContext.IASetVertexBuffers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The first input slot for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. The maximum of 16 or 32 input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of vertex buffers in the array. The number of buffers (plus the starting slot) can't exceed the total number of IA-stage input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppVertexBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> A pointer to an array of vertex buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>). The vertex buffers must have been created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_VERTEX_BUFFER</a> flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pStrides">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Pointer to an array of stride values; one stride value for each buffer in the vertex-buffer array. Each stride is the size (in bytes) of the elements that are to be used from that vertex buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pOffsets">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Pointer to an array of offset values; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For info about creating vertex buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-vertex-how-to">How to: Create a Vertex Buffer</a>.</para>
            <para>Calling this method using a buffer that is currently bound for writing (that is, bound to the stream output pipeline stage) will effectively bind <b>NULL</b> instead because a buffer can't be bound as both an input and an output at the same time.</para>
            <para>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IASetIndexBuffer(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT,System.UInt32)">
            <summary>Bind an index buffer to the input-assembler stage. (ID3D11DeviceContext.IASetIndexBuffer)</summary>
            <param name="pIndexBuffer">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> object, that contains indices. The index buffer must have been created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_INDEX_BUFFER</a> flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Format">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> that specifies the format of the data in the index buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Offset">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Offset (in bytes) from the start of the index buffer to the first index to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For information about creating index buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-index-how-to">How to: Create an Index Buffer</a>.</para>
            <para>Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind <b>NULL</b> instead because a buffer cannot be bound as both an input and an output at the same time.</para>
            <para>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</para>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DrawIndexedInstanced(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>Draw indexed, instanced primitives. (ID3D11DeviceContext.DrawIndexedInstanced)</summary>
            <param name="IndexCountPerInstance">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b> Number of indices read from the index buffer for each instance.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="InstanceCount">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b> Number of instances to draw.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="StartIndexLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b> The location of the first index read by the GPU from the index buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BaseVertexLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">INT</a></b> A value added to each index before reading a vertex from the vertex buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="StartInstanceLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b> A value added to each index before reading per-instance data from a vertex buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>A draw API submits work to the rendering pipeline. Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. Instancing requires multiple vertex buffers: at least one for per-vertex data and a second buffer for per-instance data. The second buffer is needed only if the input layout that you use has elements that use [D3D11_INPUT_PER_INSTANCE_DATA](./ne-d3d11-d3d11_input_classification.md) as the input element classification buffer for per-instance data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DrawInstanced(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Draw non-indexed, instanced primitives. (ID3D11DeviceContext.DrawInstanced)</summary>
            <param name="VertexCountPerInstance">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of vertices to draw.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="InstanceCount">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of instances to draw.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="StartVertexLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the first vertex.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="StartInstanceLocation">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value added to each index before reading per-instance data from a vertex buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>A draw API submits work to the rendering pipeline. Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. The vertex data for an instanced draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has instanced data identified with a system-value semantic (SV_InstanceID).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Sets the constant buffers used by the geometry shader pipeline stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> Array of constant buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. You can't use the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11shaderreflectionconstantbuffer">ID3D11ShaderReflectionConstantBuffer</a> interface to get information about what is currently bound to the pipeline in the device context. But you can use <b>ID3D11ShaderReflectionConstantBuffer</b> to get information from a compiled shader. For example, you can use <b>ID3D11ShaderReflectionConstantBuffer</b> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11shaderreflectionvariable">ID3D11ShaderReflectionVariable</a> to determine the slot in which a geometry shader expects a constant buffer. You can then pass this slot number to <b>GSSetConstantBuffers</b> to set the constant buffer. You can call the <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3d11reflect">D3D11Reflect</a> function to retrieve the address of a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11shaderreflection">ID3D11ShaderReflection</a> interface and then call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11shader/nf-d3d11shader-id3d11shaderreflection-getconstantbufferbyname">ID3D11ShaderReflection::GetConstantBufferByName</a> to get a pointer to <b>ID3D11ShaderReflectionConstantBuffer</b>. The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, can bind a larger number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants â 4*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer. If the application wants the shader to access other parts of the buffer, it must call the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-gssetconstantbuffers1">GSSetConstantBuffers1</a> method instead.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)">
            <summary>Set a geometry shader to the device. (ID3D11DeviceContext.GSSetShader)</summary>
            <param name="pShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>*</b> Pointer to a geometry shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b> A pointer to an array of class-instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of class-instance interfaces in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. The maximum number of instances a shader can have is 256.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IASetPrimitiveTopology(Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY)">
            <summary>Bind information about the primitive type, and data order that describes input data for the input assembler stage. (ID3D11DeviceContext.IASetPrimitiveTopology)</summary>
            <param name="Topology">
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a></b> The type of primitive and ordering of the primitive data (see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetprimitivetopology#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iasetprimitivetopology#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Bind an array of shader resources to the vertex-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting shader resources to (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with <b>NULL</b>. For information about creating shader-resource views, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. In order to unbind resource slots, you must pass an array containing null values. For example, to clear the first 4 slots, use: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Set an array of sampler states to the vertex shader pipeline stage. (ID3D11DeviceContext.VSSetSamplers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.Begin(Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous)">
            <summary>Mark the beginning of a series of commands.</summary>
            <param name="pAsync">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a> interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-begin#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Use <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a> to mark the ending of the series of commands.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.End(Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous)">
            <summary>Mark the end of a series of commands.</summary>
            <param name="pAsync">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a> interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-end#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Use <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> to mark the beginning of the series of commands.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GetData(Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous,System.Void*,System.UInt32,System.UInt32)">
            <summary>Get data from the graphics processing unit (GPU) asynchronously.</summary>
            <param name="pAsync">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a> interface for the object about which <b>GetData</b> retrieves data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>void*</b> Address of memory that will receive the data. If <b>NULL</b>, <b>GetData</b> will be used only to check status. The type of data output depends on the type of asynchronous interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DataSize">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Size of the data to retrieve or 0. Must be 0 when <i>pData</i> is <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="GetDataFlags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Optional flags. Can be 0 or any combination of the flags enumerated by <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_async_getdata_flag">D3D11_ASYNC_GETDATA_FLAG</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>. A return value of S_OK indicates that the data at <i>pData</i> is available for the calling application to access. A return value of S_FALSE indicates that the data is not yet available. If the data is not yet available, the application must call <b>GetData</b> until the data is available.</para>
            </returns>
            <remarks>
            <para>Queries in a deferred context are limited to predicated drawing. That is, you cannot call <b>ID3D11DeviceContext::GetData</b> on a deferred context to get data about a query; you can only call <b>GetData</b> on the immediate context to get data about a query. For predicated drawing, the results of a predication-type query are used by the GPU and not returned to an application. For more information about predication and predicated drawing, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-setpredication">D3D11DeviceContext::SetPredication</a>. <b>GetData</b> retrieves the data that the runtime collected between calls to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>.  Certain queries only require a call to <b>ID3D11DeviceContext::End</b> in which case the data returned by <b>GetData</b> is accurate up to the last call to <b>ID3D11DeviceContext::End</b>. For information about the queries that only require a call to <b>ID3D11DeviceContext::End</b> and about the type of data that <b>GetData</b> retrieves for each query, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_query">D3D11_QUERY</a>. If <i>DataSize</i> is 0, <b>GetData</b> is only used to check status. An application gathers counter data by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a>, issuing some graphics commands, calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a>, and then calling <b>ID3D11DeviceContext::GetData</b> to get data about what happened in between the <b>Begin</b> and <b>End</b> calls. For information about performance counter types, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter">D3D11_COUNTER</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getdata#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SetPredication(Windows.Win32.Graphics.Direct3D11.ID3D11Predicate,Windows.Win32.Foundation.BOOL)">
            <summary>Set a rendering predicate. (ID3D11DeviceContext.SetPredication)</summary>
            <param name="pPredicate">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a> interface that represents the rendering predicate. A <b>NULL</b> value indicates "no" predication; in this case, the value of <i>PredicateValue</i> is irrelevant but will be preserved for <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getpredication">ID3D11DeviceContext::GetPredication</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="PredicateValue">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If <b>TRUE</b>, rendering will be affected by when the predicate's conditions are met. If <b>FALSE</b>, rendering will be affected when the conditions are not met.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The predicate must be in the "issued" or "signaled" state to be used for predication. While the predicate is set for predication, calls to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a> are invalid. Use this method to denote that subsequent rendering and resource manipulation commands are not actually performed if the resulting predicate data of the predicate is equal to the <i>PredicateValue</i>. However, some predicates are only hints, so they may not actually prevent operations from being performed. The primary usefulness of predication is to allow an application to issue rendering and resource manipulation commands without taking the performance hit of spinning, waiting for <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> to return. So, predication can occur while <b>ID3D11DeviceContext::GetData</b> returns <b>S_FALSE</b>. Another way to think of it: an application can also use predication as a fallback, if it is possible that <b>ID3D11DeviceContext::GetData</b> returns <b>S_FALSE</b>. If <b>ID3D11DeviceContext::GetData</b> returns <b>S_OK</b>, the application can skip calling the rendering and resource manipulation commands manually with its own application logic. Rendering and resource manipulation commands for Direct3DÂ 11 include these Draw, Dispatch, Copy, Update, Clear, Generate, and Resolve operations. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-setpredication#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Bind an array of shader resources to the geometry shader stage. (ID3D11DeviceContext.GSSetShaderResources)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>. For information about creating shader-resource views, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Set an array of sampler states to the geometry shader pipeline stage. (ID3D11DeviceContext.GSSetSamplers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMSetRenderTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView)">
            <summary>Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage.</summary>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">UINT</a></b> Number of render targets to bind (ranges between 0 and <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which <i>ppRenderTargetViews</i> points must equal the number in this parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppRenderTargetViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>*</b> Pointer to an array of <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a> that represent the render targets to bind to the device. If this parameter is <b>NULL</b> and <i>NumViews</i> is 0, no render targets are bound.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDepthStencilView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a> that represents the depth-stencil view to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil view is not bound.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The maximum number of active render targets a device can have active at any given time is set by a #define in D3D11.h called <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>. It is invalid to try to set the same subresource to multiple render target slots. Any render targets not defined by this call are set to <b>NULL</b>. If any subresources are also currently bound for reading in a different stage or writing (perhaps in a different part of the pipeline), those bind points will be set to <b>NULL</b>, in order to prevent the same subresource from being read and written simultaneously in a single rendering operation. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. If the render-target views were created from an array resource type, all of the render-target views must have the same array size. This restriction also applies to the depth-stencil view, its array size must match that of the render-target views being bound. The pixel shader must be able to simultaneously render to at least eight separate render targets. All of these render targets must access the same type of resource: <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/sm5-object-buffer">Buffer</a>, <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/sm5-object-texture1d">Texture1D</a>, <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/sm5-object-texture1darray">Texture1DArray</a>, <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/sm5-object-texture2d">Texture2D</a>, <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/sm5-object-texture2darray">Texture2DArray</a>, <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/sm5-object-texture3d">Texture3D</a>, or <a href="https://docs.microsoft.com/windows/win32/direct3dhlsl/dx-graphics-hlsl-to-type">TextureCube</a>. All render targets must have the same size in all dimensions (width and height, and depth for 3D or array size for *Array types). If render targets use multisample anti-aliasing, all bound render targets and depth buffer must be the same form of multisample resource (that is, the sample counts must be the same). Each render target can have a different data format. These render target formats are not required to have identical bit-per-element counts. Any combination of the eight slots for render targets can have a render target set or not set. The same resource view cannot be bound to multiple render target slots simultaneously. However, you can set multiple non-overlapping resource views of a single resource as simultaneous multiple render targets. Note that unlike some other resource methods in Direct3D, all currently bound render targets will be unbound by calling `OMSetRenderTargets(0, nullptr, nullptr);`.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMSetRenderTargetsAndUnorderedAccessViews(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[],System.UInt32*)">
            <summary>Binds resources to the output-merger stage.</summary>
            <param name="NumRTVs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of render targets to bind (ranges between 0 and <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which <i>ppRenderTargetViews</i> points must equal the number in this parameter. If you set <i>NumRTVs</i> to D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL (0xffffffff), this method does not modify the currently bound render-target views (RTVs) and also does not modify depth-stencil view (DSV).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppRenderTargetViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>*</b> Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>s that represent the render targets to bind to the device. If this parameter is <b>NULL</b> and <i>NumRTVs</i> is 0, no render targets are bound.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDepthStencilView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a> that represents the depth-stencil view to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil view is not bound.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="UAVStartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin setting unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). For the Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, this value can range from 0 to D3D11_1_UAV_SLOT_COUNT - 1. D3D11_1_UAV_SLOT_COUNT is defined as 64.</para>
            <para>For pixel shaders, <i>UAVStartSlot</i> should be equal to the number of render-target views being bound.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumUAVs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of unordered-access views (UAVs) in <i>ppUnorderedAccessViews</i>. If you set <i>NumUAVs</i> to D3D11_KEEP_UNORDERED_ACCESS_VIEWS (0xffffffff), this method does not modify the currently bound unordered-access views.</para>
            <para>For the Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, this value can range from 0 to D3D11_1_UAV_SLOT_COUNT - <i>UAVStartSlot</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppUnorderedAccessViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b> Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>s that represent the unordered-access views to bind to the device. If this parameter is <b>NULL</b> and <i>NumUAVs</i> is 0, no unordered-access views are bound.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pUAVInitialCounts">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. Any other values set the hidden counter for that appendable and consumable UAV. <i>pUAVInitialCounts</i> is  relevant only for UAVs that were created with either <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_buffer_uav_flag">D3D11_BUFFER_UAV_FLAG_APPEND</a> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created; otherwise, the argument is ignored.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For pixel shaders, the render targets and unordered-access views share the same resource slots when being written out. This means that UAVs must be given an offset so that they are placed in the slots after the render target views that are being bound.</para>
            <para><div class="alert"><b>Note</b>Â Â RTVs, DSV, and UAVs cannot be set independently; they all need to be set at the same time.</div> <div>Â </div> Two RTVs conflict if they share a subresource (and therefore share the same resource). Two UAVs conflict if they share a subresource (and therefore share the same resource). An RTV conflicts with a UAV if they share a subresource or share a bind point. <b>OMSetRenderTargetsAndUnorderedAccessViews</b> operates properly in the following situations:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMSetBlendState(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState,System.Single*,System.UInt32)">
            <summary>Set the blend state of the output-merger stage. (ID3D11DeviceContext.OMSetBlendState)</summary>
            <param name="pBlendState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>*</b> Pointer to a blend-state interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>). Pass <b>NULL</b> for a default blend state. For more info about default blend state, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BlendFactor">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>[4]</b> Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both. If you created  the blend-state object with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND_BLEND_FACTOR</a> or <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND_INV_BLEND_FACTOR</a>, the blending stage uses the non-NULL array of blend factors. If you didn't create the blend-state object with <b>D3D11_BLEND_BLEND_FACTOR</b> or <b>D3D11_BLEND_INV_BLEND_FACTOR</b>, the blending stage does not use the non-NULL array of blend factors; the runtime stores the blend factors, and you can later call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate">ID3D11DeviceContext::OMGetBlendState</a> to retrieve the blend factors. If you pass <b>NULL</b>, the runtime uses or stores a blend factor equal to { 1, 1, 1, 1 }.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SampleMask">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> 32-bit sample coverage. The default value is 0xffffffff. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Blend state is used by the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a> to determine how to blend together two RGB pixel values and two alpha values. The two RGB pixel values and two alpha values are the RGB pixel value and alpha value that the pixel shader outputs and the RGB pixel value and alpha value already in the output render target. The <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">blend option</a> controls the data source that the blending stage uses to modulate values for the pixel shader, render target, or both. The <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend_op">blend operation</a> controls how the blending stage mathematically combines these modulated values. To create a blend-state interface, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createblendstate">ID3D11Device::CreateBlendState</a>. Passing in <b>NULL</b> for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMSetDepthStencilState(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState,System.UInt32)">
            <summary>Sets the depth-stencil state of the output-merger stage. (ID3D11DeviceContext.OMSetDepthStencilState)</summary>
            <param name="pDepthStencilState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>*</b> Pointer to a depth-stencil state interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>) to bind to the device. Set this to <b>NULL</b> to use the default state listed in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="StencilRef">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Reference value to perform against when doing a depth-stencil test. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>To create a depth-stencil state interface, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createdepthstencilstate">ID3D11Device::CreateDepthStencilState</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omsetdepthstencilstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SOSetTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.UInt32*)">
            <summary>Set the target output buffers for the stream-output stage of the pipeline.</summary>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/winprog/windows-data-types">UINT</a></b> The number of buffer to bind to the device. A maximum of four output buffers can be set. If less than four are defined by the call, the remaining buffer slots are set to <b>NULL</b>. See Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSOTargets">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> The array of output buffers (see <a href="https://docs.microsoft.com/windows/win32/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to bind to the device. The buffers must have been created with the <a href="https://docs.microsoft.com/windows/win32/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_STREAM_OUTPUT</a> flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pOffsets">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/win32/winprog/windows-data-types">UINT</a>*</b> Array of offsets to the output buffers from <i>ppSOTargets</i>, one offset for each buffer. The offset values must be in bytes.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>An offset of -1 will cause the stream output buffer to be appended, continuing after the last location written to the buffer in a previous stream output pass. Calling this method using a buffer that is currently bound for writing will effectively bind <b>NULL</b> instead because a buffer cannot be bound as both an input and an output at the same time.</para>
            <para>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. Note that unlike some other resource methods in Direct3D, all currently bound targets will be unbound by calling `SOSetTargets(0, nullptr, nullptr);`. <b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-sosettargets#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DrawAuto">
            <summary>Draw geometry of an unknown size.</summary>
            <remarks>
            <para>A draw API submits work to the rendering pipeline. This API submits work of an unknown size that was processed by the input assembler, vertex shader, and stream-output stages;  the work may or may not have gone through the geometry-shader stage. After data has been streamed out to stream-output stage buffers, those buffers can be again bound to the Input Assembler stage at input slot 0 and DrawAuto will draw them without the application needing to know the amount of data that was written to the buffers. A measurement of the amount of data written to the SO stage buffers is maintained internally when the data is streamed out. This means that the CPU does not need to fetch the measurement before re-binding the data that was streamed as input data. Although this amount is tracked internally, it is still the responsibility of applications to use input layouts to describe the format of the data in the SO stage buffers so that the layouts are available when the buffers are again bound to the input assembler. The following diagram shows the DrawAuto process. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawauto#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DrawIndexedInstancedIndirect(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,System.UInt32)">
            <summary>Draw indexed, instanced, GPU-generated primitives.</summary>
            <param name="pBufferForArgs">
            <para>Type: **[ID3D11Buffer](/windows/win32/api/d3d11/nn-d3d11-id3d11buffer)\*** A pointer to an [ID3D11Buffer](/windows/win32/api/d3d11/nn-d3d11-id3d11buffer), which is a buffer containing the GPU-generated primitives.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="AlignedByteOffsetForArgs">
            <para>Type: **[UINT](/windows/win32/winprog/windows-data-types)** A DWORD-aligned byte offset in <i>pBufferForArgs</i> to the start of the GPU generated primitives.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>When an application creates a buffer that is associated with the [ID3D11Buffer](/windows/win32/api/d3d11/nn-d3d11-id3d11buffer) interface that *pBufferForArgs* points to, your application must set the [D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS](/windows/win32/api/d3d11/ne-d3d11-d3d11_resource_misc_flag) flag in the *MiscFlags* member of the [D3D11_BUFFER_DESC](/windows/win32/api/d3d11/ns-d3d11-d3d11_buffer_desc) structure that describes the buffer. To create the buffer, your application should call the [ID3D11Device::CreateBuffer](/windows/win32/api/d3d11/nf-d3d11-id3d11device-createbuffer) method, and pass a pointer to a **D3D11_BUFFER_DESC** in the *pDesc* parameter. **WindowsÂ PhoneÂ 8:** This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstancedindirect#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DrawInstancedIndirect(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,System.UInt32)">
            <summary>Draw instanced, GPU-generated primitives.</summary>
            <param name="pBufferForArgs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>, which is a buffer containing the GPU generated primitives.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="AlignedByteOffsetForArgs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Offset in <i>pBufferForArgs</i> to the start of the GPU generated primitives.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-drawinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>When an application creates a buffer that is associated with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> interface that  <i>pBufferForArgs</i> points to, the application must set the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</a> flag in the <b>MiscFlags</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> structure that describes the buffer. To create the buffer, the application calls the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createbuffer">ID3D11Device::CreateBuffer</a> method and in this call passes a pointer to <b>D3D11_BUFFER_DESC</b> in the <i>pDesc</i> parameter.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.Dispatch(System.UInt32,System.UInt32,System.UInt32)">
            <summary>Execute a command list from a thread group.</summary>
            <param name="ThreadGroupCountX">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of groups dispatched in the x direction. <i>ThreadGroupCountX</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ThreadGroupCountY">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of groups dispatched in the y direction. <i>ThreadGroupCountY</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ThreadGroupCountZ">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of groups dispatched in the z direction.  <i>ThreadGroupCountZ</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535). In feature level 10 the value for <i>ThreadGroupCountZ</i> must be 1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>You call the <b>Dispatch</b> method to execute commands in a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-compute-shader">compute shader</a>. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z). In the following illustration, assume a thread group with 50 threads where the size of the group is given by (5,5,2). A single thread is identified from a thread group with 50 threads in it, using the vector (4,1,1). </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dispatch#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DispatchIndirect(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,System.UInt32)">
            <summary>Execute a command list over one or more thread groups.</summary>
            <param name="pBufferForArgs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>, which must be loaded with data that matches the argument list for <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-dispatch">ID3D11DeviceContext::Dispatch</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dispatchindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="AlignedByteOffsetForArgs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A byte-aligned offset between the start of the buffer and the arguments.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dispatchindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>You call the <b>DispatchIndirect</b> method to execute commands in a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-compute-shader">compute shader</a>. When an application creates a buffer that is associated with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> interface that  <i>pBufferForArgs</i> points to, the application must set the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</a> flag in the <b>MiscFlags</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> structure that describes the buffer. To create the buffer, the application calls the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createbuffer">ID3D11Device::CreateBuffer</a> method and in this call passes a pointer to <b>D3D11_BUFFER_DESC</b> in the <i>pDesc</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dispatchindirect#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSSetState(Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState)">
            <summary>Set the rasterizer state for the rasterizer stage of the pipeline. (ID3D11DeviceContext.RSSetState)</summary>
            <param name="pRasterizerState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>*</b> Pointer to a rasterizer-state interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>) to bind to the pipeline.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>To create a rasterizer state interface, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createrasterizerstate">ID3D11Device::CreateRasterizerState</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSSetViewports(System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT*)">
            <summary>Bind an array of viewports to the rasterizer stage of the pipeline. (ID3D11DeviceContext.RSSetViewports)</summary>
            <param name="NumViewports">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of viewports to bind.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pViewports">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a>*</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a> structures to bind to the device. See the structure page for details about how the viewport size is dependent on the device feature level which has changed between Direct3D 11 and Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled. Which viewport to use is determined by the <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">SV_ViewportArrayIndex</a> semantic output by a geometry shader; if a geometry shader does not specify the semantic, Direct3D will use the first viewport in the array. <div class="alert"><b>Note</b>Â Â Even though you specify float values to the members of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a> structure for the <i>pViewports</i> array in a call to  <b>ID3D11DeviceContext::RSSetViewports</b> for <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature levels</a> 9_x, <b>RSSetViewports</b> uses DWORDs internally. Because of this behavior, when you use a negative top left corner for the viewport, the call to  <b>RSSetViewports</b> for feature levels 9_x fails. This failure occurs because <b>RSSetViewports</b> for 9_x casts the floating point values into unsigned integers without validation, which results in integer overflow. </div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetviewports#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSSetScissorRects(System.UInt32,Windows.Win32.Foundation.RECT*)">
            <summary>Bind an array of scissor rectangles to the rasterizer stage. (ID3D11DeviceContext.RSSetScissorRects)</summary>
            <param name="NumRects">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of scissor rectangles to bind.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pRects">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>*</b> An array of scissor rectangles (see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>All scissor rects must be set atomically as one operation. Any scissor rects not defined by the call are disabled. The scissor rectangles will only be used if ScissorEnable is set to true in the rasterizer state (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>).</para>
            <para>Which scissor rectangle to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see shader semantic syntax). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first scissor rectangle in the array. Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-rssetviewports">ID3D11DeviceContext::RSSetViewports</a>).</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rssetscissorrects#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CopySubresourceRegion(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_BOX*)">
            <summary>Copy a region from a source resource to a destination resource. (ID3D11DeviceContext.CopySubresourceRegion)</summary>
            <param name="pDstResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to the destination resource (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DstSubresource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Destination subresource index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DstX">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The x-coordinate of the upper left corner of the destination region.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DstY">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DstZ">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSrcResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to the source resource (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SrcSubresource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Source subresource index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSrcBox">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>*</b> A pointer to a 3D box (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>) that defines the source subresource that can be copied. If <b>NULL</b>, the entire source subresource is copied. The box must fit within the source resource. An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>CopySubresourceRegion</b> doesn't perform a copy operation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The source box must be within the size of the source resource. The destination offsets, (x, y, and z), allow the source box to be offset when writing into the destination resource; however, the dimensions of the source box and the offsets must be within the size of the resource. If you try and copy outside the destination resource or specify a source box that is larger than the source resource, the behavior of <b>CopySubresourceRegion</b> is undefined. If you created a device that supports the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a>, the debug output reports an error on this invalid <b>CopySubresourceRegion</b> call. Invalid parameters to <b>CopySubresourceRegion</b> cause undefined behavior and might result in incorrect rendering, clipping, no copy, or even the removal of the rendering device. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels. <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11calcsubresource">D3D11CalcSubresource</a> is a helper function for calculating subresource indexes. <b>CopySubresourceRegion</b> performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CopyResource(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.ID3D11Resource)">
            <summary>Copy the entire contents of the source resource to the destination resource using the GPU. (ID3D11DeviceContext.CopyResource)</summary>
            <param name="pDstResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> interface that represents the destination resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSrcResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> interface that represents the source resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>This method is unusual in that it causes the GPU to perform the copy operation (similar to a memcpy by the CPU). As a result, it has a few restrictions designed for improving performance. For instance, the source and destination resources: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copyresource#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.UpdateSubresource(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_BOX*,System.Void*,System.UInt32,System.UInt32)">
            <summary>The CPU copies data from memory to a subresource created in non-mappable memory. (ID3D11DeviceContext.UpdateSubresource)</summary>
            <param name="pDstResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to the destination resource (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DstSubresource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A zero-based index, that identifies the destination subresource. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11calcsubresource">D3D11CalcSubresource</a> for more details.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDstBox">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>*</b> A pointer to a box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If <b>NULL</b>, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>). An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>UpdateSubresource</b> doesn't perform an update operation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSrcData">
            <para>Type: <b>const void*</b> A pointer to the source data in memory.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SrcRowPitch">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The size of one row of the source data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SrcDepthPitch">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The size of one depth slice of source data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For a shader-constant buffer; set <i>pDstBox</i> to <b>NULL</b>. It is not possible to use this method to partially update a shader-constant buffer. A resource cannot be used as a destination if: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CopyStructureCount(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView)">
            <summary>Copies data from a buffer holding variable length data.</summary>
            <param name="pDstBuffer">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> Pointer to <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>.  This can be any buffer resource that other copy commands, such as <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-copyresource">ID3D11DeviceContext::CopyResource</a> or <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion">ID3D11DeviceContext::CopySubresourceRegion</a>, are able to write to.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copystructurecount#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DstAlignedByteOffset">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Offset from the start of <i>pDstBuffer</i> to write 32-bit UINT structure (vertex) count from <i>pSrcView</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copystructurecount#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSrcView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b> Pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> of a Structured Buffer resource created with either <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_buffer_uav_flag">D3D11_BUFFER_UAV_FLAG_APPEND</a> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created.   These types of resources have hidden counters tracking "how many" records have been written.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copystructurecount#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-copystructurecount">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.ClearRenderTargetView(Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView,System.Single[])">
            <summary>Set all the elements in a render target to one value. (ID3D11DeviceContext.ClearRenderTargetView)</summary>
            <param name="pRenderTargetView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>*</b> Pointer to the render target.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ColorRGBA">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>[4]</b> A 4-component array that represents the color to fill the render target with.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Applications that wish to clear a render target to a specific integer value bit pattern should render a screen-aligned quad instead of using this method.  The reason for this is because this method accepts as input a floating point value, which may not have the same bit pattern as the original integer. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearrendertargetview#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.ClearUnorderedAccessViewUint(Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView,System.UInt32[])">
            <summary>Clears an unordered access resource with bit-precise values.</summary>
            <param name="pUnorderedAccessView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b> The <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> to clear.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Values">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>[4]</b> Values to copy to corresponding channels, see remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>This API copies the lower n<sub>i</sub> bits from each array element i to the corresponding channel, where n<sub>i</sub> is the number of bits in the ith channel of the resource format (for example, R8G8B8_FLOAT has 8 bits for the first 3 channels). This works on any UAV with no format conversion. For a raw or structured buffer view, only the first array element value is used.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewuint#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.ClearUnorderedAccessViewFloat(Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView,System.Single[])">
            <summary>Clears an unordered access resource with a float value.</summary>
            <param name="pUnorderedAccessView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b> The <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> to clear.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Values">
            <para>Type: <b>const FLOAT[4]</b> Values to copy to corresponding channels, see remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>This API works on FLOAT, UNORM, and SNORM unordered access views (UAVs), with format conversion from FLOAT to *NORM where appropriate. On other UAVs, the operation is invalid and the call will not reach the driver.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.ClearDepthStencilView(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,System.UInt32,System.Single,System.Byte)">
            <summary>Clears the depth-stencil resource. (ID3D11DeviceContext.ClearDepthStencilView)</summary>
            <param name="pDepthStencilView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>*</b> Pointer to the depth stencil to be cleared.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ClearFlags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Identify the type of data to clear (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_clear_flag">D3D11_CLEAR_FLAG</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Depth">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b> Clear the depth buffer with this value. This value will be clamped between 0 and 1.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Stencil">
            <para>Type: <b>UINT8</b> Clear the stencil buffer with this value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GenerateMips(Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView)">
            <summary>Generates mipmaps for the given shader resource. (ID3D11DeviceContext.GenerateMips)</summary>
            <param name="pShaderResourceView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a> interface that represents the shader resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-generatemips#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>You can call <b>GenerateMips</b> on any shader-resource view to generate the lower mipmap levels for the shader resource. <b>GenerateMips</b> uses the largest mipmap level of the view to recursively generate the lower levels of the mip and stops with the smallest level that is specified by the view. If the base resource wasn't created with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_RENDER_TARGET</a>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_SHADER_RESOURCE</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_GENERATE_MIPS</a>, the call to <b>GenerateMips</b> has no effect. <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">Feature levels</a> 9.1, 9.2, and 9.3 can't support automatic generation of mipmaps for 3D (volume) textures. Video adapters that support <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9.1 and higher support generating mipmaps if you use any of these formats:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-generatemips#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SetResourceMinLOD(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Single)">
            <summary>Sets the minimum level-of-detail (LOD) for a resource.</summary>
            <param name="pResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> that represents the resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-setresourceminlod#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="MinLOD">
            <para>Type: <b>FLOAT</b> The level-of-detail, which ranges between 0 and the maximum number of mipmap levels of the resource. For example, the maximum number of mipmap levels of a 1D texture is specified in the  <b>MipLevels</b> member of the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-setresourceminlod#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>To use a resource with <b>SetResourceMinLOD</b>, you must set the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_RESOURCE_CLAMP</a> flag when you create that resource. For Direct3D 10 and Direct3D 10.1, when sampling from a texture resource in a shader, the sampler can define a minimum LOD clamp to force sampling from less detailed mip levels.  For Direct3D 11, this functionality is extended from the sampler to the entire resource. Therefore, the application can specify the highest-resolution mip level of a resource that is available for access. This restricts the set of mip levels that are required to be resident in GPU memory, thereby saving memory. The set of mip levels resident per-resource in GPU memory can be specified by the user. Minimum LOD affects all of the resident mip levels. Therefore, only the resident mip levels can be updated and read from. All methods that access texture resources must adhere to minimum LOD clamps. Empty-set accesses are handled as out-of-bounds cases.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-setresourceminlod#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GetResourceMinLOD(Windows.Win32.Graphics.Direct3D11.ID3D11Resource)">
            <summary>Gets the minimum level-of-detail (LOD).</summary>
            <param name="pResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> which represents the resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getresourceminlod#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>FLOAT</b> Returns the minimum LOD.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getresourceminlod">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.ResolveSubresource(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT)">
            <summary>Copy a multisampled resource into a non-multisampled resource.</summary>
            <param name="pDstResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> Destination resource. Must be a created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE_DEFAULT</a> flag and be single-sampled. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DstSubresource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A zero-based index, that identifies the destination subresource. Use <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11calcsubresource">D3D11CalcSubresource</a> to calculate the index.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSrcResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b> Source resource. Must be multisampled.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SrcSubresource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The source subresource of the source resource.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Format">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass. The source and destination resources must be the same resource type and have the same dimensions. In addition, they must have compatible formats. There are three scenarios for this: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.ExecuteCommandList(Windows.Win32.Graphics.Direct3D11.ID3D11CommandList,Windows.Win32.Foundation.BOOL)">
            <summary>Queues commands from a command list onto a device.</summary>
            <param name="pCommandList">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a> interface that encapsulates a command list.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-executecommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RestoreContextState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> A Boolean flag that determines whether the target context state is saved prior to and restored after the execution of a command list. Use <b>TRUE</b> to indicate that the runtime needs to save and restore the state. Use <b>FALSE</b> to indicate that no state shall be saved or restored, which causes the target context to  return to its default state after the command list executes. Applications should typically use <b>FALSE</b> unless they will restore the state to be nearly equivalent to the state that the runtime would restore if <b>TRUE</b> were passed. When applications use <b>FALSE</b>, they can avoid unnecessary and inefficient state transitions.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-executecommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Use this method to play back a command list that was recorded by a deferred context on any thread. A call to <b>ExecuteCommandList</b> of a command list from a deferred context onto the immediate context is required for the recorded commands to be executed on the graphics processing unit (GPU). A call to <b>ExecuteCommandList</b> of a command list from a deferred context onto another deferred context can be used to merge recorded lists. But to run the commands from the merged deferred command list on the GPU, you need to execute them on the immediate context.</para>
            <para>This method performs some runtime validation related to queries. Queries that are begun in a device context cannot be manipulated indirectly by executing a command list (that is, Begin or End was invoked against the same query by the deferred context which generated the command list). If such a condition occurs, the ExecuteCommandList method does not execute the command list. However, the state of the device context is still maintained, as would be expected (<a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a> is performed, unless the application indicates to preserve the device context state).</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-executecommandlist#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Bind an array of shader resources to the hull-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>. For information about creating shader-resource views, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11HullShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)">
            <summary>Set a hull shader to the device.</summary>
            <param name="pHullShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>*</b> Pointer to a hull shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b> A pointer to an array of class-instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of class-instance interfaces in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. The maximum number of instances a shader can have is 256.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Set an array of sampler states to the hull-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Set the constant buffers used by the hull-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> Array of constant buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, can bind a larger number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants â 4*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer. If the application wants the shader to access other parts of the buffer, it must call the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-hssetconstantbuffers1">HSSetConstantBuffers1</a> method instead.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Bind an array of shader resources to the domain-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>. For information about creating shader-resource views, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)">
            <summary>Set a domain shader to the device.</summary>
            <param name="pDomainShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>*</b> Pointer to a domain shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b> A pointer to an array of class-instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of class-instance interfaces in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para>The maximum number of instances a shader can have is 256. <b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Set an array of sampler states to the domain-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Sets the constant buffers used by the domain-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> Array of constant buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para>The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, can bind a larger number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants â 4*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            <para>If the application wants the shader to access other parts of the buffer, it must call the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-dssetconstantbuffers1">DSSetConstantBuffers1</a> method instead.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Bind an array of shader resources to the compute-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>. For information about creating shader-resource views, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetUnorderedAccessViews(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[],System.UInt32*)">
            <summary>Sets an array of views for an unordered resource.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the first element in the zero-based array to begin setting  (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - 1). D3D11_1_UAV_SLOT_COUNT is defined as 64.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumUAVs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of views to set (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - <i>StartSlot</i>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppUnorderedAccessViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b> A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> pointers to be set by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pUAVInitialCounts">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. Any other values set the hidden counter for that appendable and consumable UAV. <i>pUAVInitialCounts</i> is only relevant for UAVs that were created with either <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_buffer_uav_flag">D3D11_BUFFER_UAV_FLAG_APPEND</a> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created; otherwise, the argument is ignored.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)">
            <summary>Set a compute shader to the device.</summary>
            <param name="pComputeShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>*</b> Pointer to a compute shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b> A pointer to an array of class-instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of class-instance interfaces in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. The maximum number of instances a shader can have is 256.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Set an array of sampler states to the compute-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Sets the constant buffers used by the compute-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b> Array of constant buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10. The Direct3D 11.1 runtime, which is available starting with WindowsÂ 8, can bind a larger number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants â 4\*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4\*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer. If the application wants the shader to access other parts of the buffer, it must call the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-cssetconstantbuffers1">CSSetConstantBuffers1</a> method instead.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Get the constant buffers used by the vertex shader pipeline stage. (ID3D11DeviceContext.VSGetConstantBuffers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> Array of constant buffer interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Get the pixel shader resources. (ID3D11DeviceContext.PSGetShaderResources)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSGetShader(Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader@,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32*)">
            <summary>Get the pixel shader currently set on the device. (ID3D11DeviceContext.PSGetShader)</summary>
            <param name="ppPixelShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>**</b> Address of a pointer to a pixel shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> Pointer to an array of class instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> The number of class-instance elements in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed, to avoid memory leaks.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetshader#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Get an array of sampler states from the pixel shader pipeline stage. (ID3D11DeviceContext.PSGetSamplers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b> Array of sampler-state interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>) to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSGetShader(Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader@,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32*)">
            <summary>Get the vertex shader currently set on the device. (ID3D11DeviceContext.VSGetShader)</summary>
            <param name="ppVertexShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>**</b> Address of a pointer to a vertex shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> Pointer to an array of class instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> The number of class-instance elements in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Get the constant buffers used by the pixel shader pipeline stage. (ID3D11DeviceContext.PSGetConstantBuffers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> Array of constant buffer interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IAGetInputLayout(Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout@)">
            <summary>Get a pointer to the input-layout object that is bound to the input-assembler stage. (ID3D11DeviceContext.IAGetInputLayout)</summary>
            <param name="ppInputLayout">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>**</b> A pointer to the input-layout object (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>), which describes the input buffers that will be read by the IA stage.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>For information about creating an input-layout object, see Creating the Input-Layout Object. Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetinputlayout#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IAGetVertexBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.UInt32*,System.UInt32*)">
            <summary>Get the vertex buffers bound to the input-assembler stage. (ID3D11DeviceContext.IAGetVertexBuffers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The input slot of the first vertex buffer to get. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. The maximum of 16 or 32 input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of vertex buffers to get starting at the offset. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppVertexBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> A pointer to an array of vertex buffers returned by the method (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pStrides">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Pointer to an array of stride values returned by the method; one stride value for each buffer in the vertex-buffer array. Each stride value is the size (in bytes) of the elements that are to be used from that vertex buffer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pOffsets">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Pointer to an array of offset values returned by the method; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IAGetIndexBuffer(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer@,Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT*,System.UInt32*)">
            <summary>Get a pointer to the index buffer that is bound to the input-assembler stage. (ID3D11DeviceContext.IAGetIndexBuffer)</summary>
            <param name="pIndexBuffer">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> A pointer to an index buffer returned by the method (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Format">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>*</b> Specifies format of the data in the index buffer (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>). These formats provide the size and type of the data in the buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Offset">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Offset (in bytes) from the start of the index buffer, to the first index to use.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Get the constant buffers used by the geometry shader pipeline stage. (ID3D11DeviceContext.GSGetConstantBuffers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> Array of constant buffer interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSGetShader(Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader@,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32*)">
            <summary>Get the geometry shader currently set on the device. (ID3D11DeviceContext.GSGetShader)</summary>
            <param name="ppGeometryShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>**</b> Address of a pointer to a geometry shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> Pointer to an array of class instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> The number of class-instance elements in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IAGetPrimitiveTopology(Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY*)">
            <summary>Get information about the primitive type, and data order that describes input data for the input assembler stage. (ID3D11DeviceContext.IAGetPrimitiveTopology)</summary>
            <param name="pTopology">
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>*</b> A pointer to the type of primitive, and ordering of the primitive data (see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetprimitivetopology#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-iagetprimitivetopology">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Get the vertex shader resources. (ID3D11DeviceContext.VSGetShaderResources)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Get an array of sampler states from the vertex shader pipeline stage. (ID3D11DeviceContext.VSGetSamplers)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b> Array of sampler-state interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>) to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GetPredication(Windows.Win32.Graphics.Direct3D11.ID3D11Predicate@,Windows.Win32.Foundation.BOOL*)">
            <summary>Get the rendering predicate state. (ID3D11DeviceContext.GetPredication)</summary>
            <param name="ppPredicate">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>**</b> Address of a pointer to a predicate (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>). Value stored here will be <b>NULL</b> upon device creation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pPredicateValue">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a>*</b> Address of a boolean to fill with the predicate comparison value. <b>FALSE</b> upon device creation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-getpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Get the geometry shader resources. (ID3D11DeviceContext.GSGetShaderResources)</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Get an array of sampler state interfaces from the geometry shader pipeline stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMGetRenderTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@)">
            <summary>Get pointers to the resources bound to the output-merger stage. (ID3D11DeviceContext.OMGetRenderTargets)</summary>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of render targets to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppRenderTargetViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>**</b> Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>s which represent render target views. Specify <b>NULL</b> for this parameter when retrieval of a render target is not needed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDepthStencilView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>**</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>, which represents a depth-stencil view. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not needed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMGetRenderTargetsAndUnorderedAccessViews(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[])">
            <summary>Get pointers to the resources bound to the output-merger stage. (ID3D11DeviceContext.OMGetRenderTargetsAndUnorderedAccessViews)</summary>
            <param name="NumRTVs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of render-target views to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppRenderTargetViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>**</b> Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>s, which represent render-target views. Specify <b>NULL</b> for this parameter when retrieval of render-target views is not required.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDepthStencilView">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>**</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>, which represents a depth-stencil view. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not required.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="UAVStartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin retrieving unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). For pixel shaders <i>UAVStartSlot</i> should be equal to the number of render-target views that are bound.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumUAVs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of unordered-access views to return in <i>ppUnorderedAccessViews</i>. This number ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - <i>UAVStartSlot</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppUnorderedAccessViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b> Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>s, which represent unordered-access views that are retrieved. Specify <b>NULL</b> for this parameter when retrieval of unordered-access views is not required.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMGetBlendState(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState@,System.Single*,System.UInt32*)">
            <summary>Get the blend state of the output-merger stage. (ID3D11DeviceContext.OMGetBlendState)</summary>
            <param name="ppBlendState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>**</b> Address of a pointer to a blend-state interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BlendFactor">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>[4]</b> Array of blend factors, one for each RGBA component.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pSampleMask">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate">sample mask</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>The reference count of the returned interface will be incremented by one when the blend state is retrieved. Applications must release returned pointer(s) when they are no longer needed, or else there will be a memory leak. <b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMGetDepthStencilState(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState@,System.UInt32*)">
            <summary>Gets the depth-stencil state of the output-merger stage. (ID3D11DeviceContext.OMGetDepthStencilState)</summary>
            <param name="ppDepthStencilState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>**</b> Address of a pointer to a depth-stencil state interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>) to be filled with information from the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pStencilRef">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Pointer to the stencil reference value used in the depth-stencil test.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. <b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-omgetdepthstencilstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SOGetTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Get the target output buffers for the stream-output stage of the pipeline.</summary>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to get.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-sogettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSOTargets">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> An array of output buffers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be retrieved from the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-sogettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para>A maximum of four output buffers can be retrieved. The offsets to the output buffers pointed to in the returned <i>ppSOTargets</i> array may be assumed to be -1 (append), as defined for use in <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-sosettargets">ID3D11DeviceContext::SOSetTargets</a>.</para>
            <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. <b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-sogettargets#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSGetState(Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState@)">
            <summary>Get the rasterizer state from the rasterizer stage of the pipeline. (ID3D11DeviceContext.RSGetState)</summary>
            <param name="ppRasterizerState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>**</b> Address of a pointer to a rasterizer-state interface (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>) to fill with information from the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rsgetstate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSGetViewports(System.UInt32@,Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT*)">
            <summary>Gets the array of viewports bound to the rasterizer stage.</summary>
            <param name="pNumViewports">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> A pointer to a variable that, on input, specifies the number of viewports (ranges from 0 to <b>D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE</b>) in the <i>pViewports</i> array; on output, the variable contains the actual number of viewports that are bound to the rasterizer stage. If <i>pViewports</i> is <b>NULL</b>, <b>RSGetViewports</b> fills the variable with the number of viewports currently bound. <div class="alert"><b>Note</b>Â Â In some versions of the Windows SDK, a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug device</a> will raise an exception if the input value in the variable to which <i>pNumViewports</i> points is greater than <b>D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE</b> even if <i>pViewports</i> is <b>NULL</b>.  The regular runtime ignores the value in the variable to which <i>pNumViewports</i> points when <i>pViewports</i> is <b>NULL</b>.  This behavior of a debug device might be corrected in a future release of the Windows SDK. </div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rsgetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pViewports">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a>*</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a> structures for the viewports that are bound to the rasterizer stage. If the number of viewports (in the variable to which <i>pNumViewports</i> points) is greater than the actual number of viewports currently bound, unused elements of the array contain 0. For info about how the viewport size depends on the device <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a>, which has changed between Direct3D 11 and Direct3D 10, see <b>D3D11_VIEWPORT</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rsgetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rsgetviewports#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSGetScissorRects(System.UInt32@,Windows.Win32.Foundation.RECT*)">
            <summary>Get the array of scissor rectangles bound to the rasterizer stage. (ID3D11DeviceContext.RSGetScissorRects)</summary>
            <param name="pNumRects">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> The number of scissor rectangles (ranges between 0 and D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE) bound; set <i>pRects</i> to <b>NULL</b> to use <i>pNumRects</i> to see how many rectangles would be returned.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rsgetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pRects">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>*</b> An array of scissor rectangles (see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>). If NumRects is greater than the number of scissor rects currently bound, then unused members of the array will contain 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rsgetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-rsgetscissorrects">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Get the hull-shader resources.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSGetShader(Windows.Win32.Graphics.Direct3D11.ID3D11HullShader@,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32*)">
            <summary>Get the hull shader currently set on the device.</summary>
            <param name="ppHullShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>**</b> Address of a pointer to a hull shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> Pointer to an array of class instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> The number of class-instance elements in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Get an array of sampler state interfaces from the hull-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Get the constant buffers used by the hull-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> Array of constant buffer interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-hsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Get the domain-shader resources.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSGetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader@,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32*)">
            <summary>Get the domain shader currently set on the device.</summary>
            <param name="ppDomainShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>**</b> Address of a pointer to a domain shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> Pointer to an array of class instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> The number of class-instance elements in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Get an array of sampler state interfaces from the domain-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Get the constant buffers used by the domain-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> Array of constant buffer interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-dsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <summary>Get the compute-shader resources.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppShaderResourceViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b> Array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetUnorderedAccessViews(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[])">
            <summary>Gets an array of views for an unordered resource.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index of the first element in the zero-based array to return (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumUAVs">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of views to get (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppUnorderedAccessViews">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b> A pointer to an array of interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>) to get.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call <b>IUnknown::Release</b> on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetShader(Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader@,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32*)">
            <summary>Get the compute shader currently set on the device.</summary>
            <param name="ppComputeShader">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>**</b> Address of a pointer to a Compute shader (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b> Pointer to an array of class instance interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumClassInstances">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> The number of class-instance elements in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <summary>Get an array of sampler state interfaces from the compute-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppSamplers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b> Pointer to an array of sampler-state interfaces (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <summary>Get the constant buffers used by the compute-shader stage.</summary>
            <param name="StartSlot">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="NumBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppConstantBuffers">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b> Array of constant buffer interface pointers (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-csgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.ClearState">
            <summary>Restore all default settings.</summary>
            <remarks>
            <para>This method resets any device context to the default settings. This sets all input/output resource slots, shaders, input layouts, predications, scissor rectangles, depth-stencil state, rasterizer state, blend state, sampler state, and viewports to <b>NULL</b>. The primitive topology is set to UNDEFINED. For a scenario where you would like to clear a list of commands recorded so far, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist">ID3D11DeviceContext::FinishCommandList</a> and throw away the resulting <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.Flush">
            <summary>Sends queued-up commands in the command buffer to the graphics processing unit (GPU).</summary>
            <remarks>
            <para>Most applications don't need to call this method. If an application calls this method when not necessary, it incurs a performance penalty. Each call to <b>Flush</b> incurs a significant amount of overhead. When Microsoft Direct3D state-setting, present, or draw commands are called by an application, those commands are queued into an internal command buffer. <b>Flush</b> sends those commands to the GPU for processing. Typically, the Direct3D runtime sends these commands to the GPU automatically whenever the runtime determines that they need to be sent, such as when the command buffer is full or when an application maps a resource. <b>Flush</b> sends the commands manually. We recommend that you use <b>Flush</b> when the CPU waits for an arbitrary amount of time (such as when you call the <a href="https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-sleep">Sleep</a> function). Because <b>Flush</b> operates asynchronously,  it can return either before or after the GPU finishes executing the queued graphics commands. However, the graphics commands eventually always complete. You can call the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createquery">ID3D11Device::CreateQuery</a> method with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_query">D3D11_QUERY_EVENT</a> value to create an event query; you can then use that event query in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> method to determine when the GPU is finished processing the graphics commands.</para>
            <para>Microsoft Direct3DÂ 11 defers the destruction of objects. Therefore, an application can't rely upon objects immediately being destroyed. By calling <b>Flush</b>, you destroy any objects whose destruction was deferred.  If an application requires synchronous destruction of an object, we recommend that the application release all its references, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a>, and then call <b>Flush</b>. <h3><a id="Defer_Issues_with_Flip"></a><a id="defer_issues_with_flip"></a><a id="DEFER_ISSUES_WITH_FLIP"></a>Deferred Destruction Issues with Flip Presentation Swap Chains</h3> Direct3DÂ 11 defers the destruction of objects like views and resources until it can efficiently destroy them. This deferred destruction can cause problems with flip presentation model swap chains. Flip presentation model swap chains have the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_swap_effect">DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</a> flag set. When you create a flip presentation model swap chain, you can associate only one swap chain at a time with an <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a>, <b>IWindow</b>, or composition surface. If an application attempts to destroy a flip presentation model swap chain and replace it with another swap chain, the original swap chain is not destroyed when the application immediately frees all of the original swap chain's references. Most applications typically use the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiswapchain-resizebuffers">IDXGISwapChain::ResizeBuffers</a> method for the majority of scenarios where they replace new swap chain buffers for old swap chain buffers. However, if an application must actually destroy an old swap chain and create a new swap chain, the application must force the destruction of all objects that the application freed. To force the destruction, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a> (or otherwise ensure no views are bound to pipeline state), and then call <b>Flush</b> on the immediate context. You must force destruction before you call <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforhwnd">IDXGIFactory2::CreateSwapChainForHwnd</a>, <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcorewindow">IDXGIFactory2::CreateSwapChainForCoreWindow</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition">IDXGIFactory2::CreateSwapChainForComposition</a> again to create a new swap chain.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-flush#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GetType">
            <summary>Gets the type of device context.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_device_context_type">D3D11_DEVICE_CONTEXT_TYPE</a></b> A member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_device_context_type">D3D11_DEVICE_CONTEXT_TYPE</a> that indicates the type of device context.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-gettype">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GetContextFlags">
            <summary>Gets the initialization flags associated with the current deferred context.</summary>
            <remarks>The GetContextFlags method gets the flags that were supplied to the <i>ContextFlags</i> parameter of <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createdeferredcontext">ID3D11Device::CreateDeferredContext</a>; however, the context flag is reserved for future use.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.FinishCommandList(Windows.Win32.Foundation.BOOL,Windows.Win32.Graphics.Direct3D11.ID3D11CommandList@)">
            <summary>Create a command list and record graphics commands into it.</summary>
            <param name="RestoreDeferredContextState">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> A Boolean flag that determines whether the runtime saves deferred context state before it executes  <b>FinishCommandList</b> and restores it afterwards. Use <b>TRUE</b> to indicate that the runtime needs to save and restore the state. Use <b>FALSE</b> to indicate that the runtime will not save or restore any state. In this case, the deferred context will  return to its default state after the call to  <b>FinishCommandList</b> completes. For information about default state, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a>. Typically, use <b>FALSE</b> unless you restore the state to be nearly equivalent to the state that the runtime would restore if you passed <b>TRUE</b>. When you use <b>FALSE</b>, you can avoid unnecessary and inefficient state transitions.</para>
            <para><div class="alert"><b>Note</b>Â Â This parameter does not affect the command list that the current call to <b>FinishCommandList</b> returns. However, this parameter affects the command list of the next call to <b>FinishCommandList</b> on the same deferred context. </div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppCommandList">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a>**</b> Upon completion of the method, the passed pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a> interface pointer is initialized with the recorded command list information. The resulting <b>ID3D11CommandList</b> object is immutable and can only be used with <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-executecommandlist">ID3D11DeviceContext::ExecuteCommandList</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the following: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Create a command list from a deferred context and record commands into it by calling <b>FinishCommandList</b>. Play back a command list with an immediate context by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-executecommandlist">ID3D11DeviceContext::ExecuteCommandList</a>.</para>
            <para>Immediate context state is cleared before and after a command list is executed. A command list has no concept of inheritance. Each call to <b>FinishCommandList</b> will record only the state set since any previous call to  <b>FinishCommandList</b>.</para>
            <para>For example, the state of a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device context</a> is its render state or pipeline state. To retrieve device context state, an application can call  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> or  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getpredication">ID3D11DeviceContext::GetPredication</a>.</para>
            <para>For more information about how to use <b>FinishCommandList</b>, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-render-multi-thread-command-list-record">How to: Record a Command List</a>.</para>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Query.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC*)">
            <summary>Get a query description. (ID3D11Query.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>*</b> Pointer to a query description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11query-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11query-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*)">
            <summary>Gets the description for rasterizer state that you used to create the rasterizer-state object. (ID3D11RasterizerState.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a> structure that receives a description of the rasterizer state.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11rasterizerstate-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>You use the description for rasterizer state in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createrasterizerstate">ID3D11Device::CreateRasterizerState</a> method to create the rasterizer-state object.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC*)">
            <summary>Get the properties of a render target view. (ID3D11RenderTargetView.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>*</b> Pointer to the description of a render target view (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11rendertargetview-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11rendertargetview-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Resource.GetType(Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION*)">
            <summary>Get the type of the resource. (ID3D11Resource.GetType)</summary>
            <param name="pResourceDimension">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_dimension">D3D11_RESOURCE_DIMENSION</a>*</b> Pointer to the resource type (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_dimension">D3D11_RESOURCE_DIMENSION</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11resource-gettype#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><b>WindowsÂ PhoneÂ 8: </b> This API is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11resource-gettype#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Resource.SetEvictionPriority(System.UInt32)">
            <summary>Set the eviction priority of a resource. (ID3D11Resource.SetEvictionPriority)</summary>
            <param name="EvictionPriority">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></param>
            <remarks>
            <para>Resource priorities determine which resource to evict from video memory when the system has run out of video memory. The resource will not be lost; it will be removed from video memory and placed into system memory, or possibly placed onto the hard drive. The resource will be loaded back into video memory when it is required. A resource that is set to the maximum priority, DXGI_RESOURCE_PRIORITY_MAXIMUM, is only evicted if there is no other way of resolving the incoming memory request. The Windows Display Driver Model (WDDM) tries to split an incoming memory request to its minimum size and evict lower-priority resources before evicting a resource with maximum priority. Changing the priorities of resources should be done carefully. The wrong eviction priorities could be a detriment to performance rather than an improvement.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11resource-setevictionpriority#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Resource.GetEvictionPriority">
            <summary>Get the eviction priority of a resource. (ID3D11Resource.GetEvictionPriority)</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> One of the following values, which specifies the eviction priority for the resource: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11resource-getevictionpriority">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*)">
            <summary>Gets the description for sampler state that you used to create the sampler-state object.</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a> structure that receives a description of the sampler state.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11samplerstate-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>You use the description for sampler state in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createsamplerstate">ID3D11Device::CreateSamplerState</a> method to create the sampler-state object.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC*)">
            <summary>Get the shader resource view's description. (ID3D11ShaderResourceView.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a> structure to be filled with data about the shader resource view.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11shaderresourceview-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11shaderresourceview-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*)">
            <summary>Get the properties of the texture resource. (ID3D11Texture1D.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a>*</b> Pointer to a resource description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11texture1d-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11texture1d-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*)">
            <summary>Get the properties of the texture resource. (ID3D11Texture2D.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a>*</b> Pointer to a resource description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11texture2d-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11texture2d-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*)">
            <summary>Get the properties of the texture resource. (ID3D11Texture3D.GetDesc)</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a>*</b> Pointer to a resource description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11texture3d-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11texture3d-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC*)">
            <summary>Get a description of the resource.</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>*</b> Pointer to a resource description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>.)</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11unorderedaccessview-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11unorderedaccessview-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Direct3D11.ID3D11View.GetResource(Windows.Win32.Graphics.Direct3D11.ID3D11Resource@)">
            <summary>Get the resource that is accessed through this view. (ID3D11View.GetResource)</summary>
            <param name="ppResource">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>**</b> Address of a pointer to the resource that is accessed through this view. (See <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>.)</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-id3d11view-getresource#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <remarks>This function increments the reference count of the resource by one, so it is necessary to call <b>Release</b> on the returned pointer when the application is done with it. Destroying (or losing) the returned pointer before <b>Release</b> is called will result in a memory leak.</remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE">
            <summary>Driver type options.</summary>
            <remarks>The driver type is required when calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdevice">D3D11CreateDevice</a> or <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdeviceandswapchain">D3D11CreateDeviceAndSwapChain</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE.D3D_DRIVER_TYPE_UNKNOWN">
            <summary>The driver type is unknown.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE.D3D_DRIVER_TYPE_HARDWARE">
            <summary>A hardware driver, which implements Direct3D features in hardware. This is the primary driver that you should use in your Direct3D applications because it provides the best performance. A hardware driver uses hardware acceleration (on supported hardware) but can also use software for parts of the pipeline that are not supported in hardware. This driver type is often referred to as a hardware abstraction layer or HAL.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE.D3D_DRIVER_TYPE_REFERENCE">
            <summary>
            <para>A reference driver, which is a software implementation that supports every Direct3D feature. A reference driver is designed for accuracy rather than speed and as a result is slow but accurate. The rasterizer portion of the driver does make use of special CPU instructions whenever it can, but it is not intended for retail applications; use it only for feature testing, demonstration of functionality, debugging, or verifying bugs in other drivers. The reference device for this driver is installed by the Windows SDK 8.0 or later and is intended only as a debug aid for development purposes. This driver may be referred to as a REF driver, a reference driver, or a reference rasterizer. <div class="alert"><b>Note</b>Â Â When you use the REF driver in Windows Store apps,  the REF driver renders correctly but doesn't display any output on the screen. To verify bugs in hardware drivers for Windows Store apps, use <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE_WARP</a> for the WARP driver instead.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3dcommon/ne-d3dcommon-d3d_driver_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE.D3D_DRIVER_TYPE_NULL">
            <summary>A NULL driver, which is a reference driver without render capability. This driver is commonly used for debugging non-rendering API calls, it is not appropriate for retail applications. This driver is installed by the DirectX SDK.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE.D3D_DRIVER_TYPE_SOFTWARE">
            <summary>A software driver, which is a driver implemented completely in software. The software implementation is not intended for a high-performance application due to its very slow performance.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE.D3D_DRIVER_TYPE_WARP">
            <summary>
            <para>A WARP driver, which is a high-performance software rasterizer. The rasterizer supports <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">feature levels</a> 9_1 through level 10_1 with a high performance software implementation. For information about limitations creating a WARP device on certain feature levels, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-limitations">Limitations Creating WARP and Reference Devices</a>. For more information about using a WARP driver, see <a href="https://docs.microsoft.com/windows/desktop/direct3darticles/directx-warp">Windows Advanced Rasterization Platform (WARP) In-Depth Guide</a>. <div class="alert"><b>Note</b>Â Â The WARP driver that WindowsÂ 8 includes supports <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature levels</a> 9_1 through level 11_1.</div> <div>Â </div> <div class="alert"><b>Note</b>Â Â The WARP driver that WindowsÂ 8.1 includes fully supports <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 11_1, including tiled resources, <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_3/nf-dxgi1_3-idxgidevice3-trim">IDXGIDevice3::Trim</a>, shared BCn surfaces, minblend, and map default. </div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3dcommon/ne-d3dcommon-d3d_driver_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL">
            <summary>Describes the set of features targeted by a Direct3D device.</summary>
            <remarks>
            <para>For an overview of the capabilities of each feature level, see [Direct3D feature levels](/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro). For information about limitations creating non-hardware-type devices on certain feature levels, see [Limitations creating WARP and reference devices](/windows/desktop/direct3d11/overviews-direct3d-11-devices-limitations).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3dcommon/ne-d3dcommon-d3d_feature_level#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_1_0_CORE">
            <summary>Allows Microsoft Compute Driver Model (MCDM) devices to be used, or more feature-rich devices (such as traditional GPUs) that support a superset of the functionality. MCDM is the overall driver model for compute-only; it's a scaled-down peer of the larger scoped Windows Device Driver Model (WDDM).</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_9_1">
            <summary>Targets features supported by [feature level](/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro) 9.1, including shader model 2.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_9_2">
            <summary>Targets features supported by [feature level](/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro) 9.2, including shader model 2.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_9_3">
            <summary>Targets features supported by [feature level](/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro) 9.3, including shader model 2.0b.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_10_0">
            <summary>Targets features supported by Direct3D 10.0, including shader model 4.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_10_1">
            <summary>Targets features supported by Direct3D 10.1, including shader model 4.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_11_0">
            <summary>Targets features supported by Direct3D 11.0, including shader model 5.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_11_1">
            <summary>Targets features supported by Direct3D 11.1, including shader model 5 and logical blend operations. This feature level requires a display driver that is at least implemented to WDDM for WindowsÂ 8 (WDDM 1.2).</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_12_0">
            <summary>Targets features supported by Direct3D 12.0, including shader model 5.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_12_1">
            <summary>Targets features supported by Direct3D 12.1, including shader model 5.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_12_2">
            <summary>Targets features supported by Direct3D 12.2, including shader model 6.5. For more information about feature level 12_2, see its [specification page](https://microsoft.github.io/DirectX-Specs/d3d/D3D12_FeatureLevel12_2.html). Feature level 12_2 is available in Windows SDK builds 20170 and later.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY">
            <summary>Values that indicate how the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen.</summary>
            <remarks>
            <para>Use the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-iasetprimitivetopology">ID3D11DeviceContext::IASetPrimitiveTopology</a> method and a value from <b>D3D_PRIMITIVE_TOPOLOGY</b> to bind a primitive topology to the input-assembler stage. Use the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-iagetprimitivetopology">ID3D11DeviceContext::IAGetPrimitiveTopology</a> method to retrieve the primitive topology for the input-assembler stage. The following diagram shows the various primitive types for a geometry shader object. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3dcommon/ne-d3dcommon-d3d_primitive_topology#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_UNDEFINED">
            <summary>The IA stage has not been initialized with a primitive topology. The IA stage will not function properly unless a primitive topology is defined.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_POINTLIST">
            <summary>Interpret the vertex data as a list of points.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_LINELIST">
            <summary>Interpret the vertex data as a list of lines.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_LINESTRIP">
            <summary>Interpret the vertex data as a line strip.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST">
            <summary>Interpret the vertex data as a list of triangles.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP">
            <summary>Interpret the vertex data as a triangle strip.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ">
            <summary>Interpret the vertex data as a list of lines with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ">
            <summary>Interpret the vertex data as a line strip with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ">
            <summary>Interpret the vertex data as a list of triangles with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ">
            <summary>Interpret the vertex data as a triangle strip with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED">
            <summary>The IA stage has not been initialized with a primitive topology. The IA stage will not function properly unless a primitive topology is defined.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_POINTLIST">
            <summary>Interpret the vertex data as a list of points.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_LINELIST">
            <summary>Interpret the vertex data as a list of lines.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP">
            <summary>Interpret the vertex data as a line strip.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST">
            <summary>Interpret the vertex data as a list of triangles.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP">
            <summary>Interpret the vertex data as a triangle strip.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ">
            <summary>Interpret the vertex data as a list of lines with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ">
            <summary>Interpret the vertex data as a line strip with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ">
            <summary>Interpret the vertex data as a list of triangles with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ">
            <summary>Interpret the vertex data as a triangle strip with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED">
            <summary>The IA stage has not been initialized with a primitive topology. The IA stage will not function properly unless a primitive topology is defined.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_POINTLIST">
            <summary>Interpret the vertex data as a list of points.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_LINELIST">
            <summary>Interpret the vertex data as a list of lines.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP">
            <summary>Interpret the vertex data as a line strip.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST">
            <summary>Interpret the vertex data as a list of triangles.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP">
            <summary>Interpret the vertex data as a triangle strip.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ">
            <summary>Interpret the vertex data as a list of lines with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ">
            <summary>Interpret the vertex data as a line strip with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ">
            <summary>Interpret the vertex data as a list of triangles with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ">
            <summary>Interpret the vertex data as a triangle strip with adjacency data.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY.D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST">
            <summary>Interpret the vertex data as a patch list.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION">
            <summary>Values that identify the type of resource to be viewed as a shader resource.</summary>
            <remarks>A <b>D3D_SRV_DIMENSION</b>-typed value is specified in the <b>ViewDimension</b> member of the <a href="https://docs.microsoft.com/windows/win32/api/d3d11shader/ns-d3d11shader-d3d11_shader_input_bind_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a> structure or the  <b>Dimension</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11shader/ns-d3d11shader-d3d11_shader_input_bind_desc">D3D11_SHADER_INPUT_BIND_DESC</a> structure.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_UNKNOWN">
            <summary>The type is unknown.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_BUFFER">
            <summary>The resource is a buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURE1D">
            <summary>The resource is a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURE1DARRAY">
            <summary>The resource is an array of 1D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURE2D">
            <summary>The resource is a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURE2DARRAY">
            <summary>The resource is an array of 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURE2DMS">
            <summary>The resource is a multisampling 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURE2DMSARRAY">
            <summary>The resource is an array of multisampling 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURE3D">
            <summary>The resource is a 3D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURECUBE">
            <summary>The resource is a cube texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_TEXTURECUBEARRAY">
            <summary>The resource is an array of cube textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D_SRV_DIMENSION_BUFFEREX">
            <summary>The resource is a raw buffer. For more info about raw viewing of buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-intro">Raw Views of Buffers</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_UNKNOWN">
            <summary>The type is unknown.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_BUFFER">
            <summary>The resource is a buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURE1D">
            <summary>The resource is a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURE1DARRAY">
            <summary>The resource is an array of 1D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURE2D">
            <summary>The resource is a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURE2DARRAY">
            <summary>The resource is an array of 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURE2DMS">
            <summary>The resource is a multisampling 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY">
            <summary>The resource is an array of multisampling 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURE3D">
            <summary>The resource is a 3D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_SRV_DIMENSION_TEXTURECUBE">
            <summary>The resource is a cube texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_UNKNOWN">
            <summary>The type is unknown.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_BUFFER">
            <summary>The resource is a buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURE1D">
            <summary>The resource is a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY">
            <summary>The resource is an array of 1D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURE2D">
            <summary>The resource is a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY">
            <summary>The resource is an array of 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURE2DMS">
            <summary>The resource is a multisampling 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY">
            <summary>The resource is an array of multisampling 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURE3D">
            <summary>The resource is a 3D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURECUBE">
            <summary>The resource is a cube texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY">
            <summary>The resource is an array of cube textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_UNKNOWN">
            <summary>The type is unknown.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_BUFFER">
            <summary>The resource is a buffer.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURE1D">
            <summary>The resource is a 1D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURE1DARRAY">
            <summary>The resource is an array of 1D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURE2D">
            <summary>The resource is a 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURE2DARRAY">
            <summary>The resource is an array of 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURE2DMS">
            <summary>The resource is a multisampling 2D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY">
            <summary>The resource is an array of multisampling 2D textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURE3D">
            <summary>The resource is a 3D texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURECUBE">
            <summary>The resource is a cube texture.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_TEXTURECUBEARRAY">
            <summary>The resource is an array of cube textures.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION.D3D11_SRV_DIMENSION_BUFFEREX">
            <summary>The resource is a raw buffer. For more info about raw viewing of buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-intro">Raw Views of Buffers</a>.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC">
            <summary>Describes an adapter (or video card) by using DXGI 1.0.</summary>
            <remarks>The <b>DXGI_ADAPTER_DESC</b> structure provides a description of an adapter.  This structure is initialized by using the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiadapter-getdesc">IDXGIAdapter::GetDesc</a> method.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.Description">
            <summary>
            <para>Type: <b>WCHAR[128]</b> A string that contains the adapter description. On <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiadapter-getdesc">GetDesc</a> returns âSoftware Adapterâ for the description string.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.VendorId">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The PCI ID of the hardware vendor. On <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiadapter-getdesc">GetDesc</a> returns zeros for the PCI ID of the hardware vendor.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.DeviceId">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The PCI ID of the hardware device. On <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiadapter-getdesc">GetDesc</a> returns zeros for the PCI ID of the hardware device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.SubSysId">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The PCI ID of the sub system. On <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiadapter-getdesc">GetDesc</a> returns zeros for the PCI ID of the sub system.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.Revision">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The PCI ID of the revision number of the adapter. On <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiadapter-getdesc">GetDesc</a> returns zeros for the PCI ID of the revision number of the adapter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.DedicatedVideoMemory">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> The number of bytes of dedicated video memory that are not shared with the CPU.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.DedicatedSystemMemory">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.SharedSystemMemory">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b> The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC.AdapterLuid">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/hardware/drivers/ff549708(v=vs.85)">LUID</a></b> A unique value that identifies the adapter. See <a href="https://docs.microsoft.com/previous-versions/windows/hardware/drivers/ff549708(v=vs.85)">LUID</a> for a definition of the structure. <b>LUID</b> is defined in dxgi.h.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_adapter_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT">
            <summary>Resource data formats, including fully-typed and typeless formats. A list of modifiers at the bottom of the page more fully describes each format type.</summary>
            <remarks>
            <para><h3><a id="Byte_Order__LSB_MSB_"></a><a id="byte_order__lsb_msb_"></a><a id="BYTE_ORDER__LSB_MSB_"></a>Byte Order (LSB/MSB)</h3> Most formats have byte-aligned components, and the components are in C-array order (the least address comes first). For those formats that don't have power-of-2-aligned components, the first named component is in the least-significant bits.</para>
            <para><h3><a id="Portable_Coding_for_Endian-Independence"></a><a id="portable_coding_for_endian-independence"></a><a id="PORTABLE_CODING_FOR_ENDIAN-INDEPENDENCE"></a>Portable Coding for Endian-Independence</h3> Rather than adjusting for whether a system uses big-endian or little-endian byte ordering, you should write portable code, as follows.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_UNKNOWN">
            <summary>The format is not known.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32A32_TYPELESS">
            <summary>A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. Â¹</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32A32_FLOAT">
            <summary>A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. <sup>1,5,8</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32A32_UINT">
            <summary>A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. Â¹</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32A32_SINT">
            <summary>A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. Â¹</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32_TYPELESS">
            <summary>A three-component, 96-bit typeless format that supports 32 bits per color channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32_FLOAT">
            <summary>A three-component, 96-bit floating-point format that supports 32 bits per color channel.<sup>5,8</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32_UINT">
            <summary>A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32B32_SINT">
            <summary>A three-component, 96-bit signed-integer format that supports 32 bits per color channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16B16A16_TYPELESS">
            <summary>A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16B16A16_FLOAT">
            <summary>A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.<sup>5,7</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16B16A16_UNORM">
            <summary>A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16B16A16_UINT">
            <summary>A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16B16A16_SNORM">
            <summary>A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16B16A16_SINT">
            <summary>A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32_TYPELESS">
            <summary>A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32_FLOAT">
            <summary>A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.<sup>5,8</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32_UINT">
            <summary>A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G32_SINT">
            <summary>A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32G8X24_TYPELESS">
            <summary>A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_D32_FLOAT_S8X24_UINT">
            <summary>A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.âµ</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS">
            <summary>A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.âµ</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_X32_TYPELESS_G8X24_UINT">
            <summary>A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R10G10B10A2_TYPELESS">
            <summary>A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R10G10B10A2_UNORM">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R10G10B10A2_UINT">
            <summary>A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R11G11B10_FLOAT">
            <summary>
            <para>Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa  for R and G, and a 5-bit mantissa for B, as shown in the following illustration.<sup>5,7</sup> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_TYPELESS">
            <summary>A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UNORM">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UNORM_SRGB">
            <summary>A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UINT">
            <summary>A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_SNORM">
            <summary>A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_SINT">
            <summary>A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16_TYPELESS">
            <summary>A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16_FLOAT">
            <summary>A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.<sup>5,7</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16_UNORM">
            <summary>A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16_UINT">
            <summary>A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16_SNORM">
            <summary>A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16G16_SINT">
            <summary>A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32_TYPELESS">
            <summary>A single-component, 32-bit typeless format that supports 32 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_D32_FLOAT">
            <summary>A single-component, 32-bit floating-point format that supports 32 bits for depth.<sup>5,8</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32_FLOAT">
            <summary>A single-component, 32-bit floating-point format that supports 32 bits for the red channel.<sup>5,8</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32_UINT">
            <summary>A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R32_SINT">
            <summary>A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R24G8_TYPELESS">
            <summary>A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_D24_UNORM_S8_UINT">
            <summary>A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R24_UNORM_X8_TYPELESS">
            <summary>A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_X24_TYPELESS_G8_UINT">
            <summary>A 32-bit format, that contains a 24 bit, single-component, typeless format,  with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8_TYPELESS">
            <summary>A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8_UNORM">
            <summary>A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8_UINT">
            <summary>A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8_SNORM">
            <summary>A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8_SINT">
            <summary>A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16_TYPELESS">
            <summary>A single-component, 16-bit typeless format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16_FLOAT">
            <summary>A single-component, 16-bit floating-point format that supports 16 bits for the red channel.<sup>5,7</sup></summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_D16_UNORM">
            <summary>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16_UNORM">
            <summary>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16_UINT">
            <summary>A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16_SNORM">
            <summary>A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R16_SINT">
            <summary>A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8_TYPELESS">
            <summary>A single-component, 8-bit typeless format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8_UNORM">
            <summary>A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8_UINT">
            <summary>A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8_SNORM">
            <summary>A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8_SINT">
            <summary>A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_A8_UNORM">
            <summary>A single-component, 8-bit unsigned-normalized-integer format for alpha only.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R1_UNORM">
            <summary>A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. Â².</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R9G9B9E5_SHAREDEXP">
            <summary>
            <para>Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as shown in the following illustration. <sup>6,7</sup>. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R8G8_B8G8_UNORM">
            <summary>
            <para>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. Â³ Width must be even.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_G8R8_G8B8_UNORM">
            <summary>
            <para>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. Â³ Width must be even.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS">
            <summary>Four-component typeless block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM">
            <summary>Four-component block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB">
            <summary>Four-component block-compression format for sRGB data. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS">
            <summary>Four-component typeless block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM">
            <summary>Four-component block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB">
            <summary>Four-component block-compression format for sRGB data. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS">
            <summary>Four-component typeless block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM">
            <summary>Four-component block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB">
            <summary>Four-component block-compression format for sRGB data. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC4_TYPELESS">
            <summary>One-component typeless block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC4_UNORM">
            <summary>One-component block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC4_SNORM">
            <summary>One-component block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC5_TYPELESS">
            <summary>Two-component typeless block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC5_UNORM">
            <summary>Two-component block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC5_SNORM">
            <summary>Two-component block-compression format. For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B5G6R5_UNORM">
            <summary>
            <para>A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red. <b>Direct3D 10 through Direct3D 11:Â Â </b>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B5G5R5A1_UNORM">
            <summary>
            <para>A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha. <b>Direct3D 10 through Direct3D 11:Â Â </b>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B8G8R8A8_UNORM">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B8G8R8X8_UNORM">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM">
            <summary>A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B8G8R8A8_TYPELESS">
            <summary>A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. â´</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B8G8R8A8_UNORM_SRGB">
            <summary>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. â´</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B8G8R8X8_TYPELESS">
            <summary>A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. â´</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B8G8R8X8_UNORM_SRGB">
            <summary>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. â´</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC6H_TYPELESS">
            <summary>A typeless block-compression format. â´ For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC6H_UF16">
            <summary>A block-compression format. â´ For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.âµ</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC6H_SF16">
            <summary>A block-compression format. â´ For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.âµ</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC7_TYPELESS">
            <summary>A typeless block-compression format. â´ For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC7_UNORM">
            <summary>A block-compression format. â´ For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_BC7_UNORM_SRGB">
            <summary>A block-compression format. â´ For information about block-compression formats, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/texture-block-compression-in-direct3d-11">Texture Block Compression in Direct3D 11</a>.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_AYUV">
            <summary>
            <para>Most common YUV 4:4:4 video resource format. Valid view formats for this video resource format are DXGI_FORMAT_R8G8B8A8_UNORM and DXGI_FORMAT_R8G8B8A8_UINT. For UAVs, an additional valid view format is DXGI_FORMAT_R32_UINT. By using DXGI_FORMAT_R32_UINT for UAVs, you can both read and write as opposed to just write for DXGI_FORMAT_R8G8B8A8_UNORM and DXGI_FORMAT_R8G8B8A8_UINT. Supported view types are SRV, RTV, and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is V-&gt;R8, U-&gt;G8, Y-&gt;B8, and A-&gt;A8. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_Y410">
            <summary>
            <para>10-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are DXGI_FORMAT_R10G10B10A2_UNORM and DXGI_FORMAT_R10G10B10A2_UINT. For UAVs, an additional valid view format is DXGI_FORMAT_R32_UINT. By using DXGI_FORMAT_R32_UINT for UAVs, you can both read and write as opposed to just write for DXGI_FORMAT_R10G10B10A2_UNORM and DXGI_FORMAT_R10G10B10A2_UINT. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R10, Y-&gt;G10, V-&gt;B10, and A-&gt;A2. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_Y416">
            <summary>
            <para>16-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are DXGI_FORMAT_R16G16B16A16_UNORM and DXGI_FORMAT_R16G16B16A16_UINT. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R16, Y-&gt;G16, V-&gt;B16, and A-&gt;A16. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_NV12">
            <summary>
            <para>Most common YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are DXGI_FORMAT_R8_UNORM and DXGI_FORMAT_R8_UINT. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are DXGI_FORMAT_R8G8_UNORM and DXGI_FORMAT_R8G8_UINT. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and V-&gt;G8. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane. An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_P010">
            <summary>
            <para>10-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are DXGI_FORMAT_R16_UNORM and DXGI_FORMAT_R16_UINT. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, DXGI_FORMAT_P010 is no different than DXGI_FORMAT_P016. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are DXGI_FORMAT_R16G16_UNORM and DXGI_FORMAT_R16G16_UINT. For UAVs, an additional valid chrominance data view format is DXGI_FORMAT_R32_UINT. By using DXGI_FORMAT_R32_UINT for UAVs, you can both read and write as opposed to just write for DXGI_FORMAT_R16G16_UNORM and DXGI_FORMAT_R16G16_UINT. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and V-&gt;G16. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane. An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_P016">
            <summary>
            <para>16-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are DXGI_FORMAT_R16_UNORM and DXGI_FORMAT_R16_UINT. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are DXGI_FORMAT_R16G16_UNORM and DXGI_FORMAT_R16G16_UINT. For UAVs, an additional valid chrominance data view format is DXGI_FORMAT_R32_UINT. By using DXGI_FORMAT_R32_UINT for UAVs, you can both read and write as opposed to just write for DXGI_FORMAT_R16G16_UNORM and DXGI_FORMAT_R16G16_UINT. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and V-&gt;G16. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane. An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_420_OPAQUE">
            <summary>
            <para>8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value. The runtime requires that the width and height of all resources that are created with this format are multiples of 2. The runtime also requires that the left, right, top, and bottom members of any RECT that are used for this format are multiples of 2. This format differs from DXGI_FORMAT_NV12 in that the layout of the data within the resource is completely opaque to applications. Applications cannot use the CPU to map the resource and then access the data within the resource. You cannot use shaders with this format. Because of this behavior, legacy hardware that supports a non-NV12 4:2:0 layout (for example, YV12, and so on) can be used. Also, new hardware that has a 4:2:0 implementation better than NV12 can be used when the application does not need the data to be in a standard layout. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_YUY2">
            <summary>
            <para>Most common YUV 4:2:2 video resource format. Valid view formats for this video resource format are DXGI_FORMAT_R8G8B8A8_UNORM and DXGI_FORMAT_R8G8B8A8_UINT. For UAVs, an additional valid view format is DXGI_FORMAT_R32_UINT. By using DXGI_FORMAT_R32_UINT for UAVs, you can both read and write as opposed to just write for DXGI_FORMAT_R8G8B8A8_UNORM and DXGI_FORMAT_R8G8B8A8_UINT. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R8, U0-&gt;G8, Y1-&gt;B8, and V0-&gt;A8. A unique valid view format for this video resource format is DXGI_FORMAT_R8G8_B8G8_UNORM. With this view format, the width of the view appears to be twice what the DXGI_FORMAT_R8G8B8A8_UNORM or DXGI_FORMAT_R8G8B8A8_UINT view would be when hardware reconstructs RGBA automatically on read and before filtering.  This Direct3D hardware behavior is legacy and is likely not useful any more. With this view format, the mapping to the view channel is Y0-&gt;R8, U0-&gt; G8[0], Y1-&gt;B8, and V0-&gt; G8[1]. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width must be even. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_Y210">
            <summary>
            <para>10-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are DXGI_FORMAT_R16G16B16A16_UNORM and DXGI_FORMAT_R16G16B16A16_UINT. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, DXGI_FORMAT_Y210 is no different than DXGI_FORMAT_Y216. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16, U-&gt;G16, Y1-&gt;B16, and V-&gt;A16. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width must be even. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_Y216">
            <summary>
            <para>16-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are DXGI_FORMAT_R16G16B16A16_UNORM and DXGI_FORMAT_R16G16B16A16_UINT. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16, U-&gt;G16, Y1-&gt;B16, and V-&gt;A16. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width must be even. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_NV11">
            <summary>
            <para>Most common planar YUV 4:1:1 video resource format. Valid luminance data view formats for this video resource format are DXGI_FORMAT_R8_UNORM and DXGI_FORMAT_R8_UINT. Valid chrominance data view formats (width and height are each 1/4 of luminance view) for this video resource format are DXGI_FORMAT_R8G8_UNORM and DXGI_FORMAT_R8G8_UINT. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and V-&gt;G8. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. Width must be a multiple of 4. Direct3D11 staging resources and initData parameters for this format use (rowPitch * height * 2) bytes. The first (SysMemPitch * height) bytes are the Y plane, the next ((SysMemPitch / 2) * height) bytes are the UV plane, and the remainder is padding. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_AI44">
            <summary>
            <para>4-bit palletized YUV format that is commonly used for DVD subpicture. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_IA44">
            <summary>
            <para>4-bit palletized YUV format that is commonly used for DVD subpicture. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_P8">
            <summary>
            <para>8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes BluRay data. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_A8P8">
            <summary>
            <para>8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes BluRay data. For more info about YUV formats for video rendering, see <a href="https://docs.microsoft.com/windows/desktop/medfound/recommended-8-bit-yuv-formats-for-video-rendering">Recommended 8-Bit YUV Formats for Video Rendering</a>. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_B4G4R4A4_UNORM">
            <summary>
            <para>A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha. <b>Direct3D 11.1:Â Â </b>This value is not supported until WindowsÂ 8.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_P208">
            <summary>A video format; an 8-bit version of a hybrid planar 4:2:2 format.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_V208">
            <summary>An 8 bit YCbCrA 4:4 rendering format.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT.DXGI_FORMAT_V408">
            <summary>An 8 bit YCbCrA 4:4:4:4 rendering format.</summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL">
            <summary>Represents a rational number.</summary>
            <remarks>
            <para>This structure is a member of the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a> structure. The <b>DXGI_RATIONAL</b> structure operates under the following rules: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_rational#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL.Numerator">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> An unsigned integer value representing the top of the rational number.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_rational#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL.Denominator">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> An unsigned integer value representing the bottom of the rational number.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_rational#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="P:Windows.Win32.Graphics.Dxgi.Common.__DXGI_RGB_1025.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.Common.__DXGI_RGB_1025.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.Common.__DXGI_RGB_1025.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC">
            <summary>Describes multi-sampling parameters for a resource.</summary>
            <remarks>
            <para>This structure is a member of the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_desc1">DXGI_SWAP_CHAIN_DESC1</a> structure. The default sampler mode, with no anti-aliasing, has a count of 1 and a quality level of 0. If multi-sample antialiasing is being used, all bound render targets and depth buffers must have the same sample counts and quality levels. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC.Count">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of multisamples per pixel.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC.Quality">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The image quality level. The higher the quality, the lower the performance. The valid range is between zero and one less than the level returned by <a href="https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-checkmultisamplequalitylevels">ID3D10Device::CheckMultisampleQualityLevels</a> for Direct3D 10 or <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels">ID3D11Device::CheckMultisampleQualityLevels</a> for Direct3D 11. For Direct3D 10.1 and Direct3D 11, you can use two special quality level values. For more information about these quality level values, see Remarks.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS">
            <summary>Describes timing and presentation statistics for a frame.</summary>
            <remarks>
            <para>You initialize the <b>DXGI_FRAME_STATISTICS</b> structure with the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-getframestatistics">IDXGIOutput::GetFrameStatistics</a> or <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiswapchain-getframestatistics">IDXGISwapChain::GetFrameStatistics</a> method. You can only use <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiswapchain-getframestatistics">IDXGISwapChain::GetFrameStatistics</a> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_swap_effect">DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</a> value in the <b>SwapEffect</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_desc1">DXGI_SWAP_CHAIN_DESC1</a> structure to specify that the swap chain uses the flip presentation model. The values in the <b>PresentCount</b> and <b>PresentRefreshCount</b> members indicate information about when a frame was presented on the display screen. You can use these values to determine whether a glitch occurred. The values in the <b>SyncRefreshCount</b> and <b>SyncQPCTime</b> members indicate timing information that you can use for audio and video synchronization or very precise animation. If the swap chain draws in full-screen mode, these values are based on when the computer booted. If the swap chain draws in windowed mode, these values are based on when the swap chain is created.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_frame_statistics#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS.PresentCount">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value that represents the running total count of times that an image was presented to the monitor since the computer booted. <div class="alert"><b>Note</b>Â Â The number of times that an image was presented to the monitor is not necessarily the same as the number of times that you called <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiswapchain-present">IDXGISwapChain::Present</a> or <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgiswapchain1-present1">IDXGISwapChain1::Present1</a>.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_frame_statistics#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS.PresentRefreshCount">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value that represents  the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_frame_statistics#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS.SyncRefreshCount">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value that represents  the running total count of v-blanks when the scheduler last sampled the machine time by calling <a href="https://docs.microsoft.com/windows/desktop/api/profileapi/nf-profileapi-queryperformancecounter">QueryPerformanceCounter</a> and that have happened since the computer booted (for windowed mode, since the swap chain was created).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_frame_statistics#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS.SyncQPCTime">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-large_integer-r1">LARGE_INTEGER</a></b> A value that represents the high-resolution performance counter timer. This value is the same as the value returned by the <a href="https://docs.microsoft.com/windows/desktop/api/profileapi/nf-profileapi-queryperformancecounter">QueryPerformanceCounter</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_frame_statistics#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS.SyncGPUTime">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-large_integer-r1">LARGE_INTEGER</a></b> Reserved. Always returns 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_frame_statistics#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.DXGI_MAPPED_RECT">
            <summary>Describes a mapped rectangle that is used to access a surface.</summary>
            <remarks>The <b>DXGI_MAPPED_RECT</b> structure is initialized by the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgisurface-map">IDXGISurface::Map</a> method.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_MAPPED_RECT.Pitch">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b> A value that describes the width, in bytes, of the surface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_mapped_rect#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_MAPPED_RECT.pBits">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BYTE</a>*</b> A pointer to the image buffer of the surface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_mapped_rect#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC">
            <summary>Describes an output or physical connection between the adapter (video card) and a device.</summary>
            <remarks>The <b>DXGI_OUTPUT_DESC</b> structure is initialized by the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-getdesc">IDXGIOutput::GetDesc</a> method.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC.DeviceName">
            <summary>
            <para>Type: <b>WCHAR[32]</b> A string that contains the name of the output device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_output_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC.DesktopCoordinates">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure containing the bounds of the output in desktop coordinates. Desktop coordinates depend on the dots per inch (DPI) of the desktop. For info about writing DPI-aware Win32 apps, see <a href="https://docs.microsoft.com/windows/desktop/hidpi/high-dpi-desktop-application-development-on-windows">High DPI</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_output_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC.AttachedToDesktop">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> True if the output is attached to the desktop; otherwise, false.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_output_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC.Rotation">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173065(v=vs.85)">DXGI_MODE_ROTATION</a></b> A member of the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173065(v=vs.85)">DXGI_MODE_ROTATION</a> enumerated type describing on how an image is rotated by the output.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_output_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC.Monitor">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HMONITOR</a></b> An <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HMONITOR</a> handle that represents the display monitor. For more information, see <a href="https://docs.microsoft.com/windows/desktop/gdi/hmonitor-and-the-device-context">HMONITOR and the Device Context</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_output_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC">
            <summary>Describes a surface.</summary>
            <remarks>This structure is used by the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgisurface-getdesc">GetDesc</a> and  <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgidevice-createsurface">CreateSurface</a> methods.</remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC.Width">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value describing the surface width.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_surface_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC.Height">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> A value describing the surface height.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_surface_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC.Format">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> A member of the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumerated type that describes the surface format.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_surface_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC.SampleDesc">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a></b> A member of the <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a> structure that describes multi-sampling parameters for the surface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/ns-dxgi-dxgi_surface_desc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.EnumOutputs(System.UInt32,Windows.Win32.Graphics.Dxgi.IDXGIOutput@)">
            <summary>Enumerate adapter (video card) outputs.</summary>
            <param name="Output">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The index of the output.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-enumoutputs#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppOutput">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgioutput">IDXGIOutput</a>**</b> The address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgioutput">IDXGIOutput</a> interface at the position specified by the <i>Output</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-enumoutputs#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> A code that indicates success or failure (see <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>). DXGI_ERROR_NOT_FOUND is returned if the index is greater than the number of outputs. If the adapter came from a device created using D3D_DRIVER_TYPE_WARP, then the adapter has no outputs, so DXGI_ERROR_NOT_FOUND is returned.</para>
            </returns>
            <remarks>
            <para><div class="alert"><b>Note</b>Â Â If you call this API in a Session 0 process, it returns <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</div> <div>Â </div> When the <b>EnumOutputs</b> method succeeds and fills the <i>ppOutput</i> parameter with the address of the pointer to the output interface, <b>EnumOutputs</b> increments the output interface's reference count. To avoid a memory leak, when you finish using the output interface, call the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> method to decrement the reference count. <b>EnumOutputs</b> first returns the output on which the desktop primary is displayed. This output corresponds with an index of zero. <b>EnumOutputs</b> then returns other outputs.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-enumoutputs#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.GetDesc(Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC*)">
            <summary>Gets a DXGI 1.0 description of an adapter (or video card).</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_adapter_desc">DXGI_ADAPTER_DESC</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_adapter_desc">DXGI_ADAPTER_DESC</a> structure that describes the adapter. This parameter must not be <b>NULL</b>. On <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <b>GetDesc</b> returns zeros for the PCI ID in the <b>VendorId</b>, <b>DeviceId</b>, <b>SubSysId</b>, and <b>Revision</b> members of <b>DXGI_ADAPTER_DESC</b> and âSoftware Adapterâ for the description string in the <b>Description</b> member.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise returns E_INVALIDARG if the <i>pDesc</i> parameter is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-getdesc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.CheckInterfaceSupport(System.Guid*,System.Int64@)">
            <summary>Checks whether the system supports a device interface for a graphics component.</summary>
            <param name="InterfaceName">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> The GUID of the interface of the device version for which support is being checked. This should usually be __uuidof(IDXGIDevice), which returns the version number of the Direct3D 9 UMD (user mode driver) binary. Since WDDM 2.3, all driver components within a driver package (D3D9, D3D11, and D3D12) have been required to share a single version number, so this is a good way to query the driver version regardless of which API is being used.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-checkinterfacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pUMDVersion">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-large_integer-r1">LARGE_INTEGER</a>*</b> The user mode driver version of <i>InterfaceName</i>. This is  returned only if the interface is supported, otherwise this parameter will be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-checkinterfacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> S_OK indicates that the interface is supported, otherwise DXGI_ERROR_UNSUPPORTED is returned (For more information, see <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>).</para>
            </returns>
            <remarks>
            <para><div class="alert"><b>Note</b>Â Â You can  use <b>CheckInterfaceSupport</b> only to  check whether a Direct3D 10.x interface is supported, and only on Windows Vista SP1 and later versions of the operating system. If you try to use <b>CheckInterfaceSupport</b> to check whether a Direct3D 11.x and later version interface is supported, <b>CheckInterfaceSupport</b> returns DXGI_ERROR_UNSUPPORTED. Therefore, do not use <b>CheckInterfaceSupport</b>. Instead, to verify whether the operating system supports a particular interface, try to create the interface. For example, if you call the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createblendstate">ID3D11Device::CreateBlendState</a> method and it fails, the operating system does not support the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a> interface.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiadapter-checkinterfacesupport#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject.GetDevice(System.Guid*,System.Object@)">
            <summary>Retrieves the device.</summary>
            <param name="riid">
            <para>Type: <b>REFIID</b> The reference id for the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgidevicesubobject-getdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDevice">
            <para>Type: <b>void**</b> The address of a pointer to the device.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgidevicesubobject-getdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> A code that indicates success or failure (see <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>).</para>
            </returns>
            <remarks>The type of interface that is returned can be any interface published by the device. For example, it could be an IDXGIDevice * called pDevice, and therefore the REFIID would be obtained by calling __uuidof(pDevice).</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIObject.SetPrivateData(System.Guid*,System.UInt32,System.Void*)">
            <summary>Sets application-defined data to the object and associates that data with a GUID.</summary>
            <param name="Name">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> A GUID that identifies the data. Use this GUID in a call to <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiobject-getprivatedata">GetPrivateData</a> to get the data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DataSize">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The size of the object's data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pData">
            <para>Type: <b>const void*</b> A pointer to the object's data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para><b>SetPrivateData</b> makes a copy of the specified data and stores it with the object. Private data that <b>SetPrivateData</b> stores in the object occupies the same storage space as private data that is stored by associated Direct3D objects (for example, by a Microsoft Direct3DÂ 11 device through <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-setprivatedata">ID3D11Device::SetPrivateData</a> or by a Direct3DÂ 11 child device through <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicechild-setprivatedata">ID3D11DeviceChild::SetPrivateData</a>). The <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> reports memory leaks by outputting a list of object interface pointers along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface pointer caused the leak. To set the friendly name, use the <b>SetPrivateData</b> method and the well-known private data GUID (<b>WKPDID_D3DDebugObjectName</b>) that is in D3Dcommon.h. For example, to give pContext a friendly name of <i>My name</i>, use the following code:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-setprivatedata#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIObject.SetPrivateDataInterface(System.Guid*,System.Object)">
            <summary>Set an interface in the object's private data.</summary>
            <param name="Name">
            <para>Type: <b><a href="https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b> A GUID identifying the interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pUnknown">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>*</b> The interface to set.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            </returns>
            <remarks>
            <para>This API associates an interface pointer with the object. When the interface is set its reference count is incremented. When the data are overwritten (by calling SPD or SPDI with the same GUID) or the object is destroyed, ::Release() is called and the interface's reference count is decremented.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-setprivatedatainterface#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.Graphics.Dxgi.IDXGIObject.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)" -->
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIObject.GetParent(System.Guid*,System.Object@)">
            <summary>Gets the parent of the object.</summary>
            <param name="riid">
            <para>Type: <b>REFIID</b> The ID of the requested interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-getparent#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppParent">
            <para>Type: <b>void**</b> The address of a pointer to the parent object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-getparent#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgiobject-getparent">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetDesc(Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*)">
            <summary>Get a description of the output.</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_output_desc">DXGI_OUTPUT_DESC</a>*</b> A pointer to the output description (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_output_desc">DXGI_OUTPUT_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns a code that indicates success or failure. S_OK if successful, <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a> if <i>pDesc</i> is passed in as <b>NULL</b>.</para>
            </returns>
            <remarks>On a high DPI desktop, <b>GetDesc</b> returns the visualized screen size unless the app is marked high DPI aware. For info about writing DPI-aware Win32 apps, see <a href="https://docs.microsoft.com/windows/desktop/hidpi/high-dpi-desktop-application-development-on-windows">High DPI</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetDisplayModeList(Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT,System.UInt32,System.UInt32@,Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC*)">
            <summary>Gets the display modes that match the requested format and other input options. (IDXGIOutput.GetDisplayModeList)</summary>
            <param name="EnumFormat">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b> The color format (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Options for modes to include (see <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-enum-modes">DXGI_ENUM_MODES</a>). DXGI_ENUM_MODES_SCALING needs to be specified to expose the display modes that require scaling.  Centered modes, requiring no scaling and corresponding directly to the display output, are enumerated by default.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pNumModes">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b> Set <i>pDesc</i> to <b>NULL</b> so that <i>pNumModes</i> returns the number of display modes that match the format and the options. Otherwise, <i>pNumModes</i> returns the number of display modes returned in <i>pDesc</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>*</b> A pointer to a list of display modes (see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>); set to <b>NULL</b> to get the number of display modes.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>. It is rare, but possible, that the display modes available can change immediately after calling this method, in which case DXGI_ERROR_MORE_DATA is returned (if there is not enough room for all the display modes). If <b>GetDisplayModeList</b> is called from a Remote Desktop Services session (formerly Terminal Services session), DXGI_ERROR_NOT_CURRENTLY_AVAILABLE is returned.</para>
            </returns>
            <remarks>
            <para>In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor). As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.FindClosestMatchingMode(Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC*,Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC*,System.Object)">
            <summary>Finds the display mode that most closely matches the requested display mode. (IDXGIOutput.FindClosestMatchingMode)</summary>
            <param name="pModeToMatch">
            <para>Type: <b>const <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>*</b> The desired display mode (see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>). Members of <b>DXGI_MODE_DESC</b> can be unspecified indicating no preference for that member.  A value of 0 for <b>Width</b> or <b>Height</b> indicates the value is unspecified.  If either <b>Width</b> or <b>Height</b> are 0, both must be 0.  A numerator and denominator of 0 in <b>RefreshRate</b> indicate it is unspecified. Other members of <b>DXGI_MODE_DESC</b> have enumeration values indicating the member is unspecified.  If <i>pConcernedDevice</i> is <b>NULL</b>, <b>Format</b> cannot be DXGI_FORMAT_UNKNOWN.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pClosestMatch">
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>*</b> The mode that most closely matches <i>pModeToMatch</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pConcernedDevice">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>*</b> A pointer to the Direct3D device interface. If this parameter is <b>NULL</b>, only modes whose format matches that of <i>pModeToMatch</i> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned. For info about the formats that are supported for scan-out by the device at each feature level: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            </returns>
            <remarks>
            <para><b>FindClosestMatchingMode</b> behaves similarly to the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgioutput1-findclosestmatchingmode1">IDXGIOutput1::FindClosestMatchingMode1</a> except <b>FindClosestMatchingMode</b> considers only the mono display modes. <b>IDXGIOutput1::FindClosestMatchingMode1</b> considers only stereo modes if you set the <b>Stereo</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_mode_desc1">DXGI_MODE_DESC1</a> structure that <i>pModeToMatch</i> points to, and considers only mono modes if <b>Stereo</b> is not set.</para>
            <para><a href="https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgioutput1-findclosestmatchingmode1">IDXGIOutput1::FindClosestMatchingMode1</a> returns a matched display-mode set with only stereo modes or only mono modes. <b>FindClosestMatchingMode</b> behaves as though you specified the input mode as mono.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.WaitForVBlank">
            <summary>Halt a thread until the next vertical blank occurs.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the following <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            </returns>
            <remarks>A vertical blank occurs when the raster moves from the lower right corner to the upper left corner to begin drawing the next frame.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.TakeOwnership(System.Object,Windows.Win32.Foundation.BOOL)">
            <summary>Takes ownership of an output.</summary>
            <param name="pDevice">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface of a device (such as an <a href="https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10device">ID3D10Device</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-takeownership#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Exclusive">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Set to <b>TRUE</b> to enable other threads or applications to take ownership of the device; otherwise, set to <b>FALSE</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-takeownership#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para>When you are finished with the output, call <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-releaseownership">IDXGIOutput::ReleaseOwnership</a>. <b>TakeOwnership</b> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods. <h3><a id="Notes_for_Windows_Store_apps"></a><a id="notes_for_windows_store_apps"></a><a id="NOTES_FOR_WINDOWS_STORE_APPS"></a>Notes for Windows Store apps</h3> If a Windows Store app uses <b>TakeOwnership</b>, it fails with <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-takeownership#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.ReleaseOwnership">
            <summary>Releases ownership of the output.</summary>
            <remarks>If you are not using a swap chain, get access to an output by calling <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-takeownership">IDXGIOutput::TakeOwnership</a> and release it when you are finished by calling <b>IDXGIOutput::ReleaseOwnership</b>. An application that uses a swap chain will typically not call either of these methods.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetGammaControlCapabilities(Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL_CAPABILITIES*)">
            <summary>Gets a description of the gamma-control capabilities.</summary>
            <param name="pGammaCaps">
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173062(v=vs.85)">DXGI_GAMMA_CONTROL_CAPABILITIES</a>*</b> A pointer to a  description of the gamma-control capabilities (see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173062(v=vs.85)">DXGI_GAMMA_CONTROL_CAPABILITIES</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getgammacontrolcapabilities#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para><div class="alert"><b>Note</b>Â Â Calling this method is only supported while in full-screen mode.</div> <div>Â </div></para>
            <para>For info about using gamma correction, see <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/using-gamma-correction">Using gamma correction</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getgammacontrolcapabilities#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.SetGammaControl(Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL*)">
            <summary>Sets the gamma controls.</summary>
            <param name="pArray">
            <para>Type: <b>const <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a>*</b> A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a> structure that describes the gamma curve to set.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-setgammacontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para><div class="alert"><b>Note</b>Â Â Calling this method is only supported while in full-screen mode.</div> <div>Â </div></para>
            <para>For info about using gamma correction, see <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/using-gamma-correction">Using gamma correction</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-setgammacontrol#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetGammaControl(Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL*)">
            <summary>Gets the gamma control settings.</summary>
            <param name="pArray">
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a>*</b> An array of gamma control settings (see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getgammacontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para><div class="alert"><b>Note</b>Â Â Calling this method is only supported while in full-screen mode.</div> <div>Â </div></para>
            <para>For info about using gamma correction, see <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/using-gamma-correction">Using gamma correction</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getgammacontrol#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.SetDisplaySurface(Windows.Win32.Graphics.Dxgi.IDXGISurface)">
            <summary>Changes the display mode.</summary>
            <param name="pScanoutSurface">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>*</b> A pointer to a surface (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>) used for rendering an image to the screen. The surface must have been created as a back buffer (DXGI_USAGE_BACKBUFFER).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-setdisplaysurface#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para><b>IDXGIOutput::SetDisplaySurface</b> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods. This method should only be called between <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-takeownership">IDXGIOutput::TakeOwnership</a> and <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-releaseownership">IDXGIOutput::ReleaseOwnership</a> calls. <h3><a id="Notes_for_Windows_Store_apps"></a><a id="notes_for_windows_store_apps"></a><a id="NOTES_FOR_WINDOWS_STORE_APPS"></a>Notes for Windows Store apps</h3> If a Windows Store app uses <b>SetDisplaySurface</b>, it fails with <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-setdisplaysurface#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetDisplaySurfaceData(Windows.Win32.Graphics.Dxgi.IDXGISurface)">
            <summary>Gets a copy of the current display surface.</summary>
            <param name="pDestination">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>*</b> A pointer to a destination surface (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdisplaysurfacedata#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns one of the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            </returns>
            <remarks>
            <para><b>IDXGIOutput::GetDisplaySurfaceData</b> can only be called when an output is in full-screen mode. If the method succeeds, DXGI fills the destination surface. Use <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-getdesc">IDXGIOutput::GetDesc</a> to determine the size (width and height) of the output when you want to allocate space for the destination surface. This is true regardless of target monitor rotation. A destination surface created by a graphics component (such as Direct3D 10) must be created with CPU-write permission (see D3D10_CPU_ACCESS_WRITE). Other surfaces should be created with CPU read-write permission (see D3D10_CPU_ACCESS_READ_WRITE). This method will modify the surface data to fit the destination surface (stretch, shrink, convert format, rotate). The stretch and shrink is performed with point-sampling.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getdisplaysurfacedata#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetFrameStatistics(Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*)">
            <summary>Gets statistics about recently rendered frames.</summary>
            <param name="pStats">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_frame_statistics">DXGI_FRAME_STATISTICS</a>*</b> A pointer to frame statistics (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_frame_statistics">DXGI_FRAME_STATISTICS</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getframestatistics#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> If this function succeeds, it returns S_OK. Otherwise, it might return <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a>.</para>
            </returns>
            <remarks>
            <para>This API is similar to <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiswapchain-getframestatistics">IDXGISwapChain::GetFrameStatistics</a>.</para>
            <para><div class="alert"><b>Note</b>Â Â Calling this method is only supported while in full-screen mode.</div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgioutput-getframestatistics#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.GetDesc(Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC*)">
            <summary>Get a description of the surface.</summary>
            <param name="pDesc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_surface_desc">DXGI_SURFACE_DESC</a>*</b> A pointer to the surface description (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_surface_desc">DXGI_SURFACE_DESC</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgisurface-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the error codes that are described in the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgisurface-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.Map(Windows.Win32.Graphics.Dxgi.DXGI_MAPPED_RECT*,System.UInt32)">
            <summary>Get a pointer to the data contained in the surface, and deny GPU access to the surface.</summary>
            <param name="pLockedRect">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_mapped_rect">DXGI_MAPPED_RECT</a>*</b> A pointer to the surface data (see <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_mapped_rect">DXGI_MAPPED_RECT</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgisurface-map#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="MapFlags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> CPU read-write flags. These flags can be combined with a logical OR.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgisurface-map#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the error codes that are described in the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</para>
            </returns>
            <remarks>Use <b>IDXGISurface::Map</b> to access a surface from the CPU. To release a mapped surface (and allow GPU access) call <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgisurface-unmap">IDXGISurface::Unmap</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.Unmap">
            <summary>Invalidate the pointer to the surface retrieved by IDXGISurface::Map and re-enable GPU access to the resource.</summary>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the error codes that are described in the <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/dxgi/nf-dxgi-idxgisurface-unmap">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="P:Windows.Win32.__float_1025.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__float_1025.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            â  Important â : When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__float_1025.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__float_1025.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="P:Windows.Win32.__float_4.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__float_4.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            â  Important â : When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__float_4.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__float_4.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            â  Important â : When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Asynchronous_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Asynchronous_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Asynchronous_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Asynchronous.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11BlendState_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11BlendState.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11BlendState_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11BlendState.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11BlendState_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11BlendState.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11BlendState_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState,Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11BlendState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Buffer_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Buffer.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Buffer_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Buffer.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Buffer_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Buffer.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Buffer_Extensions.GetType(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Buffer.GetType(Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Buffer_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11Buffer,Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Buffer.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassInstance_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassInstance_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassInstance_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassInstance_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance,Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassLinkage_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassLinkage_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassLinkage_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassLinkage_Extensions.GetClassInstance(Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,System.String,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage.GetClassInstance(Windows.Win32.Foundation.PCSTR,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ClassLinkage_Extensions.CreateClassInstance(Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage.CreateClassInstance(Windows.Win32.Foundation.PCSTR,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11CommandList_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11CommandList,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11CommandList.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11CommandList_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11CommandList,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11CommandList.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11CommandList_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11CommandList,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11CommandList.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ComputeShader_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ComputeShader_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ComputeShader_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Counter_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Counter,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Counter.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Counter_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Counter,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Counter.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Counter_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Counter,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Counter.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Counter_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11Counter,Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Counter.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilState_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilState_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilState_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilState_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState,Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilView_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilView_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilView_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DepthStencilView_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceChild_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceChild_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceChild_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceChild.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.VSSetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.PSSetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.PSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.PSSetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.VSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.PSSetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.IASetVertexBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{System.UInt32})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IASetVertexBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.UInt32*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GSSetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.VSSetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.VSSetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GSSetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GSSetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.OMSetRenderTargets(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMSetRenderTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.OMSetRenderTargetsAndUnorderedAccessViews(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[],System.ReadOnlySpan{System.UInt32})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMSetRenderTargetsAndUnorderedAccessViews(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[],System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.OMSetBlendState(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11BlendState,System.ReadOnlySpan{System.Single},System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMSetBlendState(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState,System.Single*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.SOSetTargets(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.ReadOnlySpan{System.UInt32})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SOSetTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.RSSetViewports(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.ReadOnlySpan{Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSSetViewports(System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.RSSetScissorRects(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.ReadOnlySpan{Windows.Win32.Foundation.RECT})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.RSSetScissorRects(System.UInt32,Windows.Win32.Foundation.RECT*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CopySubresourceRegion(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_BOX})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CopySubresourceRegion(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_BOX*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.UpdateSubresource(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_BOX},System.Void*,System.UInt32,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.UpdateSubresource(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.UInt32,Windows.Win32.Graphics.Direct3D11.D3D11_BOX*,System.Void*,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.HSSetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.HSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11HullShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11HullShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.HSSetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.HSSetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.DSSetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.DSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.DSSetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.DSSetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSSetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSSetUnorderedAccessViews(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[],System.ReadOnlySpan{System.UInt32})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetUnorderedAccessViews(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[],System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetShader(Windows.Win32.Graphics.Direct3D11.ID3D11ComputeShader,Windows.Win32.Graphics.Direct3D11.ID3D11ClassInstance[],System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSSetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSSetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSSetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.VSGetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.PSGetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.PSGetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.PSGetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.PSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.IAGetVertexBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.Span{System.UInt32},System.Span{System.UInt32})">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IAGetVertexBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[],System.UInt32*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GSGetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.IAGetPrimitiveTopology(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.IAGetPrimitiveTopology(Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.VSGetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.VSGetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.VSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GSGetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.GSGetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.GSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.OMGetRenderTargets(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMGetRenderTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.OMGetRenderTargetsAndUnorderedAccessViews(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMGetRenderTargetsAndUnorderedAccessViews(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView[],Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.OMGetBlendState(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11BlendState@,System.Span{System.Single},System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.OMGetBlendState(Windows.Win32.Graphics.Direct3D11.ID3D11BlendState@,System.Single*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.SOGetTargets(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.SOGetTargets(System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.HSGetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.HSGetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.HSGetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.HSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.DSGetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.DSGetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.DSGetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.DSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSGetShaderResources(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetShaderResources(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSGetUnorderedAccessViews(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetUnorderedAccessViews(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSGetSamplers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetSamplers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DeviceContext_Extensions.CSGetConstantBuffers(Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext.CSGetConstantBuffers(System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer[])"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateBuffer(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC@,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA},Windows.Win32.Graphics.Direct3D11.ID3D11Buffer@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateBuffer(Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Buffer@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateTexture1D(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC@,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA},Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateTexture1D(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateTexture2D(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC@,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA},Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateTexture2D(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateTexture3D(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC@,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA},Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateTexture3D(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*,Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateShaderResourceView(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC},Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateShaderResourceView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateUnorderedAccessView(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC},Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateUnorderedAccessView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateRenderTargetView(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC},Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateRenderTargetView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateDepthStencilView(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Nullable{Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC},Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateDepthStencilView(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilView@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateInputLayout(Windows.Win32.Graphics.Direct3D11.ID3D11Device,System.ReadOnlySpan{Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC},System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateInputLayout(Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC*,System.UInt32,System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateGeometryShaderWithStreamOutput(Windows.Win32.Graphics.Direct3D11.ID3D11Device,System.Void*,System.UIntPtr,System.ReadOnlySpan{Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY},System.ReadOnlySpan{System.UInt32},System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateGeometryShaderWithStreamOutput(System.Void*,System.UIntPtr,Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY*,System.UInt32,System.UInt32*,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11ClassLinkage,Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateBlendState(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC@,Windows.Win32.Graphics.Direct3D11.ID3D11BlendState@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateBlendState(Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11BlendState@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateDepthStencilState(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC@,Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateDepthStencilState(Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11DepthStencilState@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateRasterizerState(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC@,Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateRasterizerState(Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateSamplerState(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC@,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateSamplerState(Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateQuery(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC@,Windows.Win32.Graphics.Direct3D11.ID3D11Query@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateQuery(Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11Query@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreatePredicate(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC@,Windows.Win32.Graphics.Direct3D11.ID3D11Predicate@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreatePredicate(Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11Predicate@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CreateCounter(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC@,Windows.Win32.Graphics.Direct3D11.ID3D11Counter@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CreateCounter(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*,Windows.Win32.Graphics.Direct3D11.ID3D11Counter@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.OpenSharedResource(Windows.Win32.Graphics.Direct3D11.ID3D11Device,System.Runtime.InteropServices.SafeHandle,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.OpenSharedResource(Windows.Win32.Foundation.HANDLE,System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CheckCounterInfo(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CheckCounterInfo(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.CheckCounter(Windows.Win32.Graphics.Direct3D11.ID3D11Device,Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC@,Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE@,System.UInt32@,Windows.Win32.Foundation.PSTR,System.UInt32*,Windows.Win32.Foundation.PSTR,System.UInt32*,Windows.Win32.Foundation.PSTR,System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.CheckCounter(Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*,Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE*,System.UInt32@,Windows.Win32.Foundation.PSTR,System.UInt32*,Windows.Win32.Foundation.PSTR,System.UInt32*,Windows.Win32.Foundation.PSTR,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Device,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Device,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Device_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Device,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Device.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DomainShader_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DomainShader_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11DomainShader_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11DomainShader.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11GeometryShader_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11GeometryShader_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11GeometryShader_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11GeometryShader.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11HullShader_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11HullShader,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11HullShader.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11HullShader_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11HullShader,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11HullShader.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11HullShader_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11HullShader,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11HullShader.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11InputLayout_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11InputLayout_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11InputLayout_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11InputLayout.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11PixelShader_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11PixelShader_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11PixelShader_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11PixelShader.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Predicate_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Predicate,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Predicate.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Predicate_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Predicate,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Predicate.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Predicate_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Predicate,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Predicate.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Predicate_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11Predicate,Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Predicate.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Query_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Query,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Query.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Query_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Query,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Query.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Query_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Query,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Query.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Query_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11Query,Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Query.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RasterizerState_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RasterizerState_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RasterizerState_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RasterizerState_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState,Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RasterizerState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RenderTargetView_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RenderTargetView_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RenderTargetView_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11RenderTargetView_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView,Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11RenderTargetView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Resource_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Resource.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Resource_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Resource.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Resource_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Resource.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Resource_Extensions.GetType(Windows.Win32.Graphics.Direct3D11.ID3D11Resource,Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Resource.GetType(Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11SamplerState_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11SamplerState_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11SamplerState_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11SamplerState_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState,Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11SamplerState.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ShaderResourceView_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ShaderResourceView_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ShaderResourceView_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11ShaderResourceView_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView,Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11ShaderResourceView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture1D_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture1D_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture1D_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture1D_Extensions.GetType(Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D,Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D.GetType(Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture1D_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D,Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture1D.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture2D_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture2D_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture2D_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture2D_Extensions.GetType(Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D,Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D.GetType(Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture2D_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D,Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture2D.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture3D_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture3D_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture3D_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture3D_Extensions.GetType(Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D,Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D.GetType(Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_DIMENSION*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11Texture3D_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D,Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11Texture3D.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11UnorderedAccessView_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11UnorderedAccessView_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11UnorderedAccessView_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11UnorderedAccessView_Extensions.GetDesc(Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView,Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11UnorderedAccessView.GetDesc(Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11VertexShader_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11VertexShader_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11VertexShader_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11VertexShader.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11View_Extensions.GetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11View,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11View.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11View_Extensions.SetPrivateData(Windows.Win32.Graphics.Direct3D11.ID3D11View,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11View.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Direct3D11_ID3D11View_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Direct3D11.ID3D11View,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Direct3D11.ID3D11View.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIAdapter_Extensions.SetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIAdapter_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIAdapter_Extensions.GetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIAdapter_Extensions.GetParent(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.GetParent(System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIAdapter_Extensions.GetDesc(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.GetDesc(Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIAdapter_Extensions.CheckInterfaceSupport(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,System.Guid@,System.Int64@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIAdapter.CheckInterfaceSupport(System.Guid*,System.Int64@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIDeviceSubObject_Extensions.SetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIDeviceSubObject_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIDeviceSubObject_Extensions.GetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIDeviceSubObject_Extensions.GetParent(Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject.GetParent(System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIDeviceSubObject_Extensions.GetDevice(Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIDeviceSubObject.GetDevice(System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIObject_Extensions.SetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIObject,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIObject.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIObject_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Dxgi.IDXGIObject,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIObject.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIObject_Extensions.GetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIObject,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIObject.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIObject_Extensions.GetParent(Windows.Win32.Graphics.Dxgi.IDXGIObject,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIObject.GetParent(System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.SetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIOutput,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Dxgi.IDXGIOutput,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.GetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGIOutput,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.GetParent(Windows.Win32.Graphics.Dxgi.IDXGIOutput,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetParent(System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.GetDesc(Windows.Win32.Graphics.Dxgi.IDXGIOutput,Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetDesc(Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.FindClosestMatchingMode(Windows.Win32.Graphics.Dxgi.IDXGIOutput,Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC@,Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.FindClosestMatchingMode(Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC*,Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.GetGammaControlCapabilities(Windows.Win32.Graphics.Dxgi.IDXGIOutput,Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL_CAPABILITIES@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetGammaControlCapabilities(Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL_CAPABILITIES*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.SetGammaControl(Windows.Win32.Graphics.Dxgi.IDXGIOutput,Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.SetGammaControl(Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.GetGammaControl(Windows.Win32.Graphics.Dxgi.IDXGIOutput,Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetGammaControl(Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGIOutput_Extensions.GetFrameStatistics(Windows.Win32.Graphics.Dxgi.IDXGIOutput,Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGIOutput.GetFrameStatistics(Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGISurface_Extensions.SetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGISurface,System.Guid@,System.UInt32,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.SetPrivateData(System.Guid*,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGISurface_Extensions.SetPrivateDataInterface(Windows.Win32.Graphics.Dxgi.IDXGISurface,System.Guid@,System.Object)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.SetPrivateDataInterface(System.Guid*,System.Object)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGISurface_Extensions.GetPrivateData(Windows.Win32.Graphics.Dxgi.IDXGISurface,System.Guid@,System.UInt32@,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.GetPrivateData(System.Guid*,System.UInt32@,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGISurface_Extensions.GetParent(Windows.Win32.Graphics.Dxgi.IDXGISurface,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.GetParent(System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGISurface_Extensions.GetDevice(Windows.Win32.Graphics.Dxgi.IDXGISurface,System.Guid@,System.Object@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.GetDevice(System.Guid*,System.Object@)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGISurface_Extensions.GetDesc(Windows.Win32.Graphics.Dxgi.IDXGISurface,Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC@)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.GetDesc(Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC*)"/>
        </member>
        <member name="M:Windows.Win32.Graphics_Dxgi_IDXGISurface_Extensions.Map(Windows.Win32.Graphics.Dxgi.IDXGISurface,Windows.Win32.Graphics.Dxgi.DXGI_MAPPED_RECT@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.Graphics.Dxgi.IDXGISurface.Map(Windows.Win32.Graphics.Dxgi.DXGI_MAPPED_RECT*,System.UInt32)"/>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "d3d11.dll".
            </content>
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.D3D11CreateDevice(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE,System.Runtime.InteropServices.SafeHandle,Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG,System.ReadOnlySpan{Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL},System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Device@,Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL*,Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.D3D11CreateDevice(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE,Windows.Win32.Foundation.HMODULE,Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG,Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL*,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Device@,Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL*,Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext@)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.D3D11CreateDevice(Windows.Win32.Graphics.Dxgi.IDXGIAdapter,Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE,Windows.Win32.Foundation.HMODULE,Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG,Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL*,System.UInt32,System.UInt32,Windows.Win32.Graphics.Direct3D11.ID3D11Device@,Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL*,Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext@)">
            <summary>Creates a device that represents the display adapter. (D3D11CreateDevice)</summary>
            <param name="pAdapter">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiadapter">IDXGIAdapter</a>*</b> A pointer to the video adapter to use when creating a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>. Pass <b>NULL</b> to use the default adapter, which is the first adapter that is enumerated by <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgifactory-enumadapters">IDXGIFactory1::EnumAdapters</a>. <div class="alert"><b>Note</b>Â Â Do not mix the use of DXGI 1.0 (<a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory">IDXGIFactory</a>) and DXGI 1.1 (<a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory1">IDXGIFactory1</a>) in an application. Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application. </div> <div>Â </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DriverType">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE</a></b> The <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE</a>, which represents the driver type to create.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Software">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HMODULE</a></b> A handle to a DLL that implements a software rasterizer. If <i>DriverType</i> is <i>D3D_DRIVER_TYPE_SOFTWARE</i>, <i>Software</i> must not be <b>NULL</b>. Get the handle by calling <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a> , or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The runtime <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">layers</a> to enable (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_FLAG</a>); values can be bitwise OR'd together.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pFeatureLevels">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b> A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>s, which determine the order of feature levels to attempt to create. If <i>pFeatureLevels</i> is set to <b>NULL</b>, this function uses the following array of feature levels:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="FeatureLevels">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The number of elements in <i>pFeatureLevels</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SDKVersion">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> The SDK version; use <i>D3D11_SDK_VERSION</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppDevice">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>**</b> Returns the address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a> object that represents the device created. If this parameter is <b>NULL</b>, no ID3D11Device will be returned.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pFeatureLevel">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b> If successful, returns the first <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a> from the <i>pFeatureLevels</i> array which succeeded. Supply <b>NULL</b> as an input if you don't need to determine which feature level is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppImmediateContext">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>**</b> Returns the address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> object that represents the device context. If this parameter is <b>NULL</b>, no ID3D11DeviceContext will be returned.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method can return one of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            <para>This method returns E_INVALIDARG if you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value.</para>
            <para>This method returns <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_SDK_COMPONENT_MISSING</a> if you specify <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_DEBUG</a> in <i>Flags</i> and the incorrect version of the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> is installed on your computer. Install the latest Windows SDK to get the correct version.</para>
            </returns>
            <remarks>
            <para>This entry-point is supported by the Direct3D 11 runtime, which is available on Windows 7, Windows Server 2008 R2, and as an update to Windows Vista (KB971644).</para>
            <para>To create a Direct3D 11.1 device (<a href="https://docs.microsoft.com/windows/desktop/api/d3d11_1/nn-d3d11_1-id3d11device1">ID3D11Device1</a>), which is available on WindowsÂ 8, Windows ServerÂ 2012, and WindowsÂ 7 and Windows ServerÂ 2008Â R2 with the <a href="https://docs.microsoft.com/windows/desktop/direct3darticles/platform-update-for-windows-7">Platform Update for Windows 7</a> installed, you first create a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a> with this function, and then call the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(q)">QueryInterface</a> method on the <b>ID3D11Device</b> object to obtain the <b>ID3D11Device1</b> interface.</para>
            <para>To create a Direct3D 11.2 device (<a href="https://docs.microsoft.com/windows/desktop/api/d3d11_2/nn-d3d11_2-id3d11device2">ID3D11Device2</a>), which is available on WindowsÂ 8.1 and Windows ServerÂ 2012Â R2, you first create a <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a> with this function, and then call the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(q)">QueryInterface</a> method on the <b>ID3D11Device</b> object to obtain the <b>ID3D11Device2</b> interface.</para>
            <para>Set <i>ppDevice</i> and <i>ppImmediateContext</i> to <b>NULL</b> to determine which feature level is supported by looking at <i>pFeatureLevel</i> without creating a device.</para>
            <para>For an example, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-initialize">How To: Create a Device and Immediate Context</a>; to create a device and a swap chain at the same time, use <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdeviceandswapchain">D3D11CreateDeviceAndSwapChain</a>.</para>
            <para>If you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value, you must also set the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_UNKNOWN value. If you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value, <b>D3D11CreateDevice</b> returns an <a href="https://docs.microsoft.com/windows/win32/com/structure-of-com-error-codes">HRESULT</a> of E_INVALIDARG.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/d3d11/nf-d3d11-d3d11createdevice#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.FreeLibrary(Windows.Win32.Foundation.HMODULE)">
            <summary>Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.</summary>
            <param name="hLibModule">
            <para>A handle to the loaded library module. The <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandleexa">GetModuleHandleEx</a> function returns this handle.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
            </returns>
            <remarks>
            <para>The system maintains a per-process reference count for each loaded module. A  module that was loaded at process initialization due to load-time dynamic linking has a reference count of one. The reference count for a module is incremented each time the  module is loaded by a call to <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>. The reference count is also incremented by a call to <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a> unless the  module  is being loaded for the first time and is being loaded as   a data or image file. The reference count is decremented each time the <b>FreeLibrary</b> or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a> function is called for the module. When a  module's reference count reaches zero or the process terminates, the system unloads the module from the address space of the  process. Before unloading a library module, the system enables the module to detach from the process by calling the module's <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a> function, if it has one, with the DLL_PROCESS_DETACH value. Doing so gives the library module an opportunity to clean up resources allocated on behalf of the current process. After the entry-point function returns, the library module is removed from the address space of the current process. It is not safe to call <b>FreeLibrary</b> from <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a>. For more information, see the Remarks section in <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a>. Calling <b>FreeLibrary</b> does not affect other processes that are using the same module. Use caution when calling <b>FreeLibrary</b> with a handle returned by <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>. The <b>GetModuleHandle</b> function does not increment a module's reference count, so passing this handle to <b>FreeLibrary</b> can cause a module to be unloaded prematurely. A thread that must unload the DLL in which it is executing and then terminate itself should call <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a> instead of calling <b>FreeLibrary</b> and <b>ExitThread</b> separately. Otherwise, a race condition can occur. For details, see the Remarks section of <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para>The <b>CloseHandle</b> function closes handles to the following objects: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/handleapi/nf-handleapi-closehandle#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
    </members>
</doc>
